api = [pointers, generic];
api_style = [functions, freeform];
jump_model = [goto_label, loop_switch];
target = [code, dot, skeleton];

computed_goto = optional;
case_ranges = optional;
constants = snake_case;
char_literals = (encoding.ebcdic ? hexadecimal : symbolic);
semicolons = yes;
label_indent = zero;
abort_requires_include = yes;

code:var_defn_local = type " " name (have_init? " = " init) ";" nl;
code:var_defn_global = "#define " name " " init nl;
code:array_defn = "static const " type " " name "[] = {" init "};" nl;

code:type_int = "int";
code:type_uint = "unsigned int";
code:type_yyctype = type;
code:type_yybm = "unsigned char";

code:if_then_else =
    "if (" then_cond ") {" nl
        [then_stmt: indent then_stmt nl]
    (have_else_part? "} else " (have_else_cond? "if (" else_cond ") ") "{" nl
        [else_stmt: indent else_stmt nl])
    "}" nl;

code:if_then_else_oneline =
    "if (" then_cond ") " then_stmt
    (have_else_part? " else " (have_else_cond? "(" else_cond ") ") else_stmt)
    nl;

code:switch =
    "switch (" expr ") {" nl
        [case: indent case]
    "}" nl;

code:switch_cases =
    [case: case nl]
    [stmt: indent stmt nl];

code:switch_cases_oneline =
    [case{0:-2}: case nl]
    [case{-1}:   case stmt nl];

code:switch_case_single =
    "case " val ":";

code:switch_case_range =
    "case " [val{0}: val] ".." [val{-1}: val] ":";

code:switch_case_default =
    "default:";

code:loop =
    "for (;;) {" nl
        [stmt: indent stmt nl]
    "}" nl;

code:cond_enum =
    "enum " name " {" nl
        [elem{0:-2}: indent elem (jump_model.loop_switch? " = " init) "," nl]
        [elem{-1}:   indent elem (jump_model.loop_switch? " = " init) nl]
    "};" nl;

code:autogen_comment = "/* Generated by re2c" (version? " " version) (date? " on " date) " */";

code:line_directive = "#line " line " \"" file "\"" nl;

code:label = name;

code:bitmap_check = table "[" offset " + " char "] & " mask;

code:abort_expr = "abort()";

code:yypeek_expr = (api.generic
    ? expr (api_style.functions ? "()")
    : "*" expr );

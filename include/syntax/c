api = [pointers, generic];
api_style = [functions, freeform];
jump_model = [goto_label, loop_switch];
target = [code, dot, skeleton];

computed_goto = optional;
case_ranges = optional;
constants = snake_case;
char_literals = (encoding.ebcdic ? hexadecimal : symbolic);
semicolons = yes;
abort_requires_include = yes;

code:var = topindent type " " name (have_init? " = " init) ";" nl;

code:const = topindent "#define " name " " init nl;

code:array =
    topindent type " " name "[" size "] = {" nl indent
        [row{0:-2}: topindent [elem{0:-2}: elem ", "] [elem{-1}: elem ","] nl]
        [row{-1}:   topindent [elem{0:-2}: elem ", "] [elem{-1}: elem]     nl]
    dedent topindent "};" nl;

code:type_int = "int";
code:type_uint = "unsigned int";
// code:type_cond_enum
code:type_yybm = "static const unsigned char";
code:type_yytarget = "static const void*";

code:if_then_else =
    topindent "if (" then_cond ") {" nl
        indent [then_stmt: then_stmt] dedent
    (have_else_part? topindent "} else " (have_else_cond? "if (" else_cond ") ") "{" nl
        indent [else_stmt: else_stmt] dedent)
    topindent "}" nl;

code:if_then_oneline = topindent "if (" then_cond ") " [then_stmt: then_stmt];

code:switch =
    topindent "switch (" expr ") {" nl
        indent [case: case] dedent
    topindent "}" nl;

code:switch_cases =
    [case: case nl]
        indent [stmt: stmt] dedent;

code:switch_cases_oneline =
    [case{0:-2}: case nl]
    [case{-1}:   case " " [stmt: stmt]];

code:switch_case_range = (case_ranges
    ? topindent "case " [val{0}: val] (multival ? " ... " [val{-1}: val]) ":"
    : [val{0:-2}: topindent "case " val ":" nl]
      [val{-1}:   topindent "case " val ":"]);

code:switch_case_default =
    topindent "default:";

code:loop =
    topindent "for (;;) {" nl
        indent [stmt: stmt] dedent
    topindent "}" nl;

code:enum =
    "enum " name " {" nl indent
        [elem{0:-2}: topindent elem (have_init? " = " init) "," nl]
        [elem{-1}:   topindent elem (have_init? " = " init) nl]
    dedent "};" nl;

code:fingerprint =
    "/* Generated by re2c" (have_version? " " version) (have_date? " on " date) " */" nl;

code:line_info = "#line " line " \"" file "\"" nl;

code:label = name;

code:bitmap_check = table "[" offset " + " char "] & " mask;

code:abort_expr = "abort()";

code:yypeek_expr = (api.generic
    ? expr (api_style.functions ? "()")
    : "*" expr );

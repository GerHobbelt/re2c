api = [generic];
api_style = [freeform, functions];
jump_model = [loop_switch];
target = [code, dot];

computed_goto = unsupported;
case_ranges = unsupported;
constants = snake_case;
char_literals = (encoding.ebcdic ? hexadecimal : symbolic);
semicolons = yes;
abort_requires_include = no;

code:var =
    // In Rust uninitialized variable is an error, but if the compiler is able to see
    // that all paths overwrite the initial value, it warns about unused assignments.
    (have_init? "" : topindent "#[allow(unused_assignments)]" nl)
    topindent "let mut " name " : " type " = " (have_init? init : "0") ";" nl;

code:const = topindent "const " name ": " type " = " init nl ";";

// code:array

code:type_int = "isize";
code:type_uint = "usize";
code:type_cond_enum = (storable_state? "isize" : "usize");
// code:type_yybm
// code:type_yytarget

code:if_then_else =
    topindent "if " then_cond " {" nl
        indent [then_stmt: then_stmt] dedent
    (have_else_part? topindent "} else " (have_else_cond? "if " else_cond " ") "{" nl
        indent [else_stmt: else_stmt] dedent)
    topindent "}" nl;

code:switch =
    topindent "match " expr " {" nl
        indent [case: case] dedent
    topindent "}" nl;

code:switch_cases =
    [case{0:-2}: topindent case " |" nl]
    [case{-1}:   topindent case " => {" nl
        indent [stmt: stmt] dedent
    topindent "}" nl];

code:switch_cases_oneline =
    [case{0:-2}: topindent case " |" nl]
    [case{-1}:   topindent case " => " [stmt: stmt]];

code:switch_case_range = [val{0}: val] (multival ? " ..= " [val{-1}: val]);

code:switch_case_default = "_";

code:loop =
    topindent (have_label? label ": ") "loop {" nl
        indent [stmt: stmt] dedent
    topindent "}" nl;

code:enum = [elem: topindent "const " elem ": " type " = " init ";" nl];

code:autogen_comment = "/* Generated by re2c" (version? " " version) (date? " on " date) " */";

// code:line_directive (no line directives in Rust)

code:label = "'" name;

// code:bitmap_check (bitmaps not supported in Rust)

code:abort_expr = "panic!(\"internal lexer error\")";

code:yypeek_expr = (unsafe? "unsafe { " expr " }" : expr) (api_style.functions ? "()");

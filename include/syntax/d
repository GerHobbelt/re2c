supported_apis = ["default", "generic", "record"];
supported_api_styles = ["free-form"];
supported_code_models = ["goto_label", "loop_switch", "recursive_functions"];
supported_targets = ["code", "dot"];
supported_features = ["nested_ifs", "bitmaps", "case_ranges"];

semicolons = 1;
implicit_bool_conversion = 0;
backtick_quoted_strings = 0;
standalone_single_quotes = 0;
indentation_sensitive = 0;
wrap_blocks_in_braces = 1;

conf:api = default;
conf:api:style = free-form;
conf:api:sigil = "@@";
conf:define:YYGETCOND:naked = 0;
conf:define:YYSETCOND:naked = 0;
conf:define:YYSETCOND@cond = "@@";
conf:define:YYGETSTATE:naked = 0;
conf:define:YYSETSTATE:naked = 0;
conf:define:YYSETSTATE@state = "@@";
conf:define:YYFILL@len = "@@";
conf:define:YYFILL:naked = 0;
conf:define:YYFN = ["<undefined-function-name>;<undefined-function-type>"];
conf:yyfn:sep = ";";
conf:variable:yycond = "yycond";
conf:variable:yyctable = "yyctable";
conf:variable:yyaccept = "yyaccept";
conf:variable:yytarget = "yytarget";
conf:variable:yystate = "yystate";
conf:variable:yynmatch = "yynmatch";
conf:variable:yypmatch = "yypmatch";
conf:variable:yyrecord = "yyrecord";
conf:variable:yych = "yych";
conf:variable:yych:conversion = 0;
conf:variable:yych:literals = char_or_hex;
conf:variable:yych:emit = (code_model.recursive_functions ? 0 : 1);
conf:variable:yybm = "yybm";
conf:variable:yybm:hex = 0;
conf:variable:yyfill = "";
conf:variable:yystable = ""; // deprecated
conf:header = "";
conf:eof = -1;
conf:sentinel = -1;
conf:yyfill:enable = 1;
conf:yyfill:parameter = 1;
conf:yyfill:check = 1;
conf:tags = 0;
conf:leftmost-captures = 0;
conf:posix-captures = 0;
conf:tags:prefix = "yyt";
conf:invert-captures = 0;
conf:cond:abort = 1;
conf:cond:prefix = "yyc_";
conf:cond:enumprefix = "yyc";
conf:cond:divider@cond = "@@";
conf:cond:goto@cond = "@@";
conf:state:abort = 1;
conf:state:nextlabel = 0;
conf:bit-vectors = 0;
conf:debug-output = 0;
conf:computed-gotos = 0;
conf:computed-gotos:threshold = 9;
conf:nested-ifs = 0;
conf:case-insensitive = 0;
conf:case-inverted = 0;
conf:case-ranges = 0;
conf:unsafe = 0;
conf:monadic = 0;
conf:encoding:ebcdic = 0;
conf:encoding:utf32 = 0;
conf:encoding:ucs2 = 0;
conf:encoding:utf16 = 0;
conf:encoding:utf8 = 0;
conf:encoding-policy = ignore;
conf:empty-class = match-empty;
conf:indent:string = "\t";
conf:indent:top = 0;
conf:label:prefix = "yy";
conf:label:yyfill = "yyFillLabel";
conf:label:yyloop = "";
conf:label:yyNext = "yyNext";
conf:label:start = 0;

conf:define:YYBACKUP = "yybackup";
conf:define:YYBACKUPCTX = "yybackupctx";
conf:define:YYCONDTYPE = "YYCond";
conf:define:YYCOPYMTAG = sigil "{lhs} = " sigil "{rhs};";
conf:define:YYCOPYSTAG = sigil "{lhs} = " sigil "{rhs};";
conf:define:YYCTXMARKER = (api.record ? record ".") "yyctxmarker";
conf:define:YYCTYPE = "YYChar";
conf:define:YYCURSOR = (api.record ? record ".") "yycursor";
conf:define:YYDEBUG = "yydebug";
conf:define:YYFILL = "yyfill";
conf:define:YYGETACCEPT = sigil "{var}";
conf:define:YYGETCOND = "yygetcond";
conf:define:YYGETSTATE = "yygetstate";
conf:define:YYINPUT = (api.record ? record ".") "yyinput";
conf:define:YYLESSTHAN = "yylessthan";
conf:define:YYLIMIT = (api.record ? record ".") "yylimit";
conf:define:YYMARKER = (api.record ? record ".") "yymarker";
conf:define:YYMAXFILL = "YYMaxFill";
conf:define:YYMAXNMATCH = "YYMaxNMatch";
conf:define:YYMTAGN = "yymtagn";
conf:define:YYMTAGP = "yymtagp";
conf:define:YYPEEK = "yypeek";
conf:define:YYRESTORE = "yyrestore";
conf:define:YYRESTORECTX = "yyrestorectx";
conf:define:YYRESTORETAG = "yyrestoretag";
conf:define:YYSETACCEPT = sigil "{var} = " sigil "{val};";
conf:define:YYSETCOND = "yysetcond";
conf:define:YYSETSTATE = "yysetstate";
conf:define:YYSHIFT = "yyshift";
conf:define:YYSHIFTSTAG = "yyshiftstag";
conf:define:YYSHIFTMTAG = "yyshiftmtag";
conf:define:YYSKIP = "yyskip";
conf:define:YYSTAGN = "yystagn";
conf:define:YYSTAGP = "yystagp";
conf:tags:expression = (api.record ? record ".") sigil;
conf:tags:negative = (api.generic ? "@@" : "null");
conf:cond:divider = "/* *********************************** */";
conf:cond:goto = "goto " sigil ";";

code:var_local = topindent type " " name (have_init? " = " init) ";" nl;
code:var_global = code:var_local;

code:const_local = topindent "enum " name " = " init ";" nl;
code:const_global = code:const_local;

code:array_local =
    topindent type "[" size "] " name " = [" nl indent
        [row{0:-2}: topindent [elem{0:-2}: elem ", "] [elem{-1}: elem ","] nl]
        [row{-1}:   topindent [elem{0:-2}: elem ", "] [elem{-1}: elem]     nl]
    dedent topindent "];" nl;
code:array_global = code:array_local;
code:array_elem = array "[" index "]";

code:type_int = "int";
code:type_uint = "uint";
// code:type_cond_enum
code:type_yybm = "immutable char";
// code:type_yytarget

code:assign = topindent lhs " = " rhs ";" nl;

code:if_then_else =
    [branch{0}: topindent "if (" cond ") {" nl
        indent [stmt: stmt] dedent]
    [branch{1:-1}: topindent "} else " (have_cond? "if (" cond ") ") "{" nl
        indent [stmt: stmt] dedent]
    topindent "}" nl;

code:if_then_else_oneline =
    [branch{0}:    topindent "if (" cond ") " [stmt: stmt] nl]
    [branch{1:-1}: topindent "else " (have_cond? "if (" cond ") ") [stmt: stmt] nl];

code:switch =
    topindent "switch (" expr ") {" nl
        indent [case: case] dedent
    topindent "}" nl;

code:switch_cases =
    [case: case nl]
        indent [stmt: stmt] dedent;

code:switch_cases_oneline =
    [case{0:-2}: case nl]
    [case{-1}:   case " " [stmt: stmt] nl];

code:switch_case_range =
    topindent "case " [val{0}: val] (many ? ": .. case " [val{-1}: val]) ":";

code:switch_case_default =
    topindent "default:";

code:loop =
    topindent "while (true) {" nl
        indent [stmt: stmt] dedent
    topindent "}" nl;

code:goto = topindent "goto " label ";" nl;

code:enum =
    "enum " name " {" nl indent
        [elem{0:-2}: topindent elem (have_init? " = " init) "," nl]
        [elem{-1}:   topindent elem (have_init? " = " init) nl]
    dedent "};" nl;

code:enum_elem = type "." name;

code:fndef =
    topindent type " " name "("
        [arg{0:-2}: argtype " " argname ", "]
        [arg{-1}:   argtype " " argname]
    ") {" nl
        indent [stmt: stmt] dedent
    "}" nl;

code:fncall =
    topindent (have_retval ? retval " = " name) "(" [arg{0:-2}: arg ", "] [arg{-1}: arg] ");" nl;

code:tailcall =
    topindent (have_retval ? "return " name) "(" [arg{0:-2}: arg ", "] [arg{-1}: arg] ");" nl;

code:recursive_functions = [fn: fndef nl];

code:fingerprint =
    "/* Generated by re2c" (have_version? " " version) (have_date? " on " date) " */" nl;

code:line_info = "#line " line " \"" file "\"" nl;

code:abort = topindent "assert(false);" nl;

code:yydebug =
    topindent (api.generic
        ? debug
    : (api.record
        ? debug "(" record ");"
        : debug "(" state ", " char ");"
    )) nl;

code:yypeek =
    topindent (code_model.recursive_functions ? ctype " ") char " = " (api.generic
        ? peek
        : typecast "*" cursor
    ) ";" nl;

code:yyskip =
    topindent (api.generic
        ? skip
        : "++" cursor ";"
    ) nl;

code:yybackup =
    topindent (api.generic
        ? backup
        : marker " = " cursor ";"
    ) nl;

code:yybackupctx =
    topindent (api.generic
        ? backupctx
        : ctxmarker " = " cursor ";"
    ) nl;

code:yyskip_yypeek =
    topindent (code_model.recursive_functions ? ctype " ") char " = "
        typecast "*++" cursor ";" nl;

code:yypeek_yyskip =
    topindent (code_model.recursive_functions ? ctype " ") char " = "
        typecast "*" cursor "++;" nl;

code:yyskip_yybackup = topindent marker " = ++" cursor ";" nl;

code:yybackup_yyskip = topindent marker " = " cursor "++;" nl;

code:yybackup_yypeek =
    topindent (code_model.recursive_functions ? ctype " ") char " = "
        typecast "*(" marker " = " cursor ");" nl;

code:yyskip_yybackup_yypeek =
    topindent (code_model.recursive_functions ? ctype " ") char " = "
        typecast "*(" marker " = ++" cursor ");" nl;

code:yybackup_yypeek_yyskip =
    topindent (code_model.recursive_functions ? ctype " ") char " = "
        typecast "*(" marker " = " cursor "++);" nl;

code:yyrestore =
    topindent (api.generic
        ? restore
        : cursor " = " marker ";"
    ) nl;

code:yyrestorectx =
    topindent (api.generic
        ? restorectx
        : cursor " = " ctxmarker ";"
    ) nl;

code:yyrestoretag =
    topindent (api.generic
        ? restoretag
        : cursor " = " tag ";"
    ) nl;

code:yyshift =
    topindent (api.generic
        ? shift
        : cursor " -= " offset ";"
    ) nl;

code:yyshiftstag =
    topindent (nested ? "if (" tag " != " neg ") ") (api.generic
        ? shiftstag
        : tag " -= " offset ";"
    ) nl;

code:yyshiftmtag = topindent shiftmtag nl;

code:yystagp =
    topindent (api.generic
        ? stagp
        : tag " = " cursor ";"
    ) nl;

code:yymtagp = topindent mtagp nl;

code:yystagn =
    topindent (api.generic
        ? stagn
        : tag " = " neg ";"
    ) nl;

code:yymtagn = topindent mtagn nl;

code:yycopystag =
    topindent (api.generic
        ? copystag
        : lhs " = " rhs ";"
    ) nl;

code:yycopymtag =
    topindent (api.generic
        ? copymtag
        : lhs " = " rhs ";"
    ) nl;

code:yygetaccept =
    (api.generic
        ? getaccept
    : (api.record & (storable_state | code_model.recursive_functions)
        ? record "." var
        : var));

code:yysetaccept =
    topindent (api.generic
        ? setaccept
    : (api.record & (storable_state | code_model.recursive_functions)
        ? record "." var " = " val ";"
        : var " = " val ";"
    )) nl;

code:yygetcond =
    (api.record
        ? record "." var
        : getcond);

code:yysetcond =
    topindent (api.record
        ? record "." var " = " val ";"
        : setcond
    ) nl;

code:yygetstate =
    (api.record
        ? record "." var
        : getstate);

code:yysetstate =
    topindent (api.record
        ? record "." var " = " val ";"
        : setstate
    ) nl;

code:yylessthan =
    (api.generic
        ? lessthan
        : (many
            ? "(" limit " - " cursor ") < " need
            : limit " <= " cursor));

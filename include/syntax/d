api = [generic];
api_style = [freeform, functions];
code_model = [goto_label, loop_switch, recursive_functions];
target = [code, dot];

computed_goto = unsupported;
case_ranges = optional;
constants = snake_case;
yyctype_literals = char;
semicolons = yes;
abort_in_default_case = yes;
implicit_bool_conversion = no;
backtick_quoted_strings = no;
standalone_single_quotes = no;

code:var = topindent type " " name (have_init? " = " init) ";" nl;

code:const = topindent "enum " name " = " init ";" nl;

code:array =
    topindent type "[" size "] " name " = [" nl indent
        [row{0:-2}: topindent [elem{0:-2}: elem ", "] [elem{-1}: elem ","] nl]
        [row{-1}:   topindent [elem{0:-2}: elem ", "] [elem{-1}: elem]     nl]
    dedent topindent "];" nl;

code:type_int = "int";
code:type_uint = "uint";
// code:type_cond_enum
code:type_yybm = "immutable char";
// code:type_yytarget

code:if_then_else =
    [branch{0}: topindent "if (" cond ") {" nl
        indent [stmt: stmt] dedent]
    [branch{1:-1}: topindent "} else " (have_cond? "if (" cond ") ") "{" nl
        indent [stmt: stmt] dedent]
    topindent "}" nl;

code:if_then_else_oneline =
    [branch{0}:    topindent "if (" cond ") " [stmt: stmt]]
    [branch{1:-1}: topindent "else " (have_cond? "if (" cond ") ") [stmt: stmt]];

code:switch =
    topindent "switch (" expr ") {" nl
        indent [case: case] dedent
    topindent "}" nl;

code:switch_cases =
    [case: case nl]
        indent [stmt: stmt] dedent;

code:switch_cases_oneline =
    [case{0:-2}: case nl]
    [case{-1}:   case " " [stmt: stmt]];

code:switch_case_range =
    topindent "case " [val{0}: val] (multival ? ": .. case " [val{-1}: val]) ":";

code:switch_case_default =
    topindent "default:";

code:loop =
    topindent "while (true) {" nl
        indent [stmt: stmt] dedent
    topindent "}" nl;

code:enum =
    "enum " name " {" nl indent
        [elem{0:-2}: topindent elem (have_init? " = " init) "," nl]
        [elem{-1}:   topindent elem (have_init? " = " init) nl]
    dedent "};" nl;

code:enum_elem = type "." name;

code:fndef =
    topindent type " " name "("
        [arg{0:-2}: argtype " " argname ", "]
        [arg{-1}:   argtype " " argname]
    ") {" nl
        indent [stmt: stmt] dedent
    "}" nl;

code:fncall = name "(" [arg{0:-2}: arg ", "] [arg{-1}: arg] ")";

code:tailcall = topindent "return " name "(" [arg{0:-2}: arg ", "] [arg{-1}: arg] ");" nl;

code:recursive_functions = [fn: fndef nl];

code:fingerprint =
    "/* Generated by re2c" (have_version? " " version) (have_date? " on " date) " */" nl;

code:line_info = "#line " line " \"" file "\"" nl;

code:abort = topindent "assert(false);" nl;

code:yyaccept = topindent var " = " num ";" nl;

code:yydebug = topindent debug "(" state ", " char ");" nl;

code:yypeek =
    topindent (code_model.recursive_functions ? ctype " ") char " = " (api.generic
        ? peek (api_style.functions ? "()")
        : typecast "*" cursor
    ) ";" nl;

code:yyskip =
    topindent (api.generic
        ? skip (api_style.functions ? "();")
        : "++" cursor ";"
    ) nl;

code:yybackup =
    topindent (api.generic
        ? backup (api_style.functions ? "();")
        : marker " = " cursor ";"
    ) nl;

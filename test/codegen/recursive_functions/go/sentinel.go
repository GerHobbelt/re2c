// Code generated by re2c, DO NOT EDIT.
//go:generate re2go $INPUT -o $OUTPUT --recursive-functions -i
package main

// expect a null-terminated string

func yy0(str string, cur int, count int) int {
	yych := str[cur]
	cur += 1
	switch (yych) {
	case 0x00:
		return yy1(str, cur, count)
	case ' ':
		return yy3(str, cur, count)
	case 'a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z':
		return yy5(str, cur, count)
	default:
		return yy2(str, cur, count)
	}
}

func yy1(str string, cur int, count int) int {
	return count
}

func yy2(str string, cur int, count int) int {
	return -1
}

func yy3(str string, cur int, count int) int {
	yych := str[cur]
	switch (yych) {
	case ' ':
		cur += 1
		return yy3(str, cur, count)
	default:
		return yy4(str, cur, count)
	}
}

func yy4(str string, cur int, count int) int {
	return lex(str, cur, count)
}

func yy5(str string, cur int, count int) int {
	yych := str[cur]
	switch (yych) {
	case 'a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z':
		cur += 1
		return yy5(str, cur, count)
	default:
		return yy6(str, cur, count)
	}
}

func yy6(str string, cur int, count int) int {
	count += 1; return lex(str, cur, count)
}

func lex(str string, cur int, count int) int {
	return yy0(str, cur, count)
}



func main() {
	assert_eq := func(x, y int) { if x != y { panic("error") } }
	assert_eq(lex("\000", 0, 0), 0)
	assert_eq(lex("one two three\000", 0, 0), 3)
	assert_eq(lex("f0ur\000", 0, 0), -1)
}

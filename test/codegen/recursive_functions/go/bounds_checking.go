// Code generated by re2c, DO NOT EDIT.
//go:generate re2go $INPUT -o $OUTPUT --recursive-functions -i
package main

import "strings"

var YYMAXFILL uint = 1


type State struct {
	buf   string
	cur   uint
	mar   uint
	lim   uint
	count int
}


func yy0(st *State) int {
	if (st.lim - st.cur < 1) {
		return -1
	}
	yych := st.buf[st.cur]
	st.cur += 1
	switch (yych) {
	case 0x00:
		return yy1(st)
	case ' ':
		return yy3(st)
	case '\'':
		return yy5(st)
	default:
		return yy2(st)
	}
}

func yy1(st *State) int {
	{ return st.count }
}

func yy2(st *State) int {
	{ return -1 }
}

func yy3(st *State) int {
	if (st.lim - st.cur < 1) {
		return -1
	}
	yych := st.buf[st.cur]
	switch (yych) {
	case ' ':
		st.cur += 1
		return yy3(st)
	default:
		return yy4(st)
	}
}

func yy4(st *State) int {
	{ return do_lex(st) }
}

func yy5(st *State) int {
	if (st.lim - st.cur < 1) {
		return -1
	}
	yych := st.buf[st.cur]
	st.cur += 1
	switch (yych) {
	case '\'':
		return yy6(st)
	case '\\':
		return yy7(st)
	default:
		return yy5(st)
	}
}

func yy6(st *State) int {
	{ st.count += 1; return do_lex(st) }
}

func yy7(st *State) int {
	if (st.lim - st.cur < 1) {
		return -1
	}
	st.cur += 1
	return yy5(st)
}

func do_lex(st *State) int {
	return yy0(st)
}



// Expects YYMAXFILL-padded string.
func lex(str string) int {
	st := &State{
		// Pad string with YYMAXFILL zeroes at the end.
		buf: str + strings.Repeat("\000", int(YYMAXFILL)),
		cur: 0,
		mar: 0,
		lim: uint(len(str)) + YYMAXFILL,
		count: 0}
	return do_lex(st)
}

func main() {
	assert_eq := func(x, y int) { if x != y { panic("error") } }
	assert_eq(lex(""), 0)
	assert_eq(lex("'qu\000tes' 'are' 'fine: \\'' "), 3)
	assert_eq(lex("'unterminated\\'"), -1)
	assert_eq(lex("'unexpected \000 null\\'"), -1)
}

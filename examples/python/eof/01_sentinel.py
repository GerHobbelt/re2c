# Generated by re2c
# re2py $INPUT -o $OUTPUT

# expect a null-terminated string
def lex(str):
    cur = 0
    count = 0

    while True:
    
        yystate = 0
        while True:
            match yystate:
                case 0:
                    yych = str[cur]
                    cur += 1
                    match yych:
                        case 0x00:
                            yystate = 1
                            continue
                        case 0x20:
                            yystate = 3
                            continue
                        case 0x61|0x62|0x63|0x64|0x65|0x66|0x67|0x68|0x69|0x6A|0x6B|0x6C|0x6D|0x6E|0x6F|0x70|0x71|0x72|0x73|0x74|0x75|0x76|0x77|0x78|0x79|0x7A:
                            yystate = 5
                            continue
                        case _:
                            yystate = 2
                            continue
                case 1:
                    return count
                case 2:
                    return -1
                case 3:
                    yych = str[cur]
                    match yych:
                        case 0x20:
                            cur += 1
                            yystate = 3
                            continue
                        case _:
                            yystate = 4
                            continue
                case 4:
                    break
                case 5:
                    yych = str[cur]
                    match yych:
                        case 0x61|0x62|0x63|0x64|0x65|0x66|0x67|0x68|0x69|0x6A|0x6B|0x6C|0x6D|0x6E|0x6F|0x70|0x71|0x72|0x73|0x74|0x75|0x76|0x77|0x78|0x79|0x7A:
                            cur += 1
                            yystate = 5
                            continue
                        case _:
                            yystate = 6
                            continue
                case 6:
                    count += 1
                    break
                case _:
                    raise "internal lexer error"


assert lex(b"\0") == 0
assert lex(b"one two three\0") == 3
assert lex(b"f0ur\0") == -1

# Generated by re2c
# re2py $INPUT -o $OUTPUT

YYMAXFILL = 1


def lex(str):
    cur = 0
    lim = len(str)
    count = 0

    while True:
    
        yystate = 0
        while True:
            match yystate:
                case 0:
                    if cur + 1 > lim:
                        return -1
                    yych = str[cur]
                    cur += 1;
                    match yych:
                        case 0x00:
                            yystate = 1
                            continue
                        case 0x20:
                            yystate = 3
                            continue
                        case 0x27:
                            yystate = 5
                            continue
                        case _:
                            yystate = 2
                            continue
                case 1:
                    # check that it is the sentinel, not some unexpected null
                    return count if cur == lim - YYMAXFILL + 1 else -1
                case 2:
                    return -1
                case 3:
                    if cur + 1 > lim:
                        return -1
                    yych = str[cur]
                    match yych:
                        case 0x20:
                            cur += 1;
                            yystate = 3
                            continue
                        case _:
                            yystate = 4
                            continue
                case 4:
                    break
                case 5:
                    if cur + 1 > lim:
                        return -1
                    yych = str[cur]
                    cur += 1;
                    match yych:
                        case 0x27:
                            yystate = 6
                            continue
                        case 0x5C:
                            yystate = 7
                            continue
                        case _:
                            yystate = 5
                            continue
                case 6:
                    count += 1
                    break
                case 7:
                    if cur + 1 > lim:
                        return -1
                    cur += 1;
                    yystate = 5
                    continue
                case _:
                    raise "internal lexer error"


def test(str, count):
    padded_str = str + (b"\0" * YYMAXFILL)
    assert lex(padded_str) == count

test(b"", 0)
test(b"'unterminated\\'", -1)
test(b"'qu\x00tes' 'are' 'fine: \\'' ", 3)
test(b"'unexpected \x00 null", -1)

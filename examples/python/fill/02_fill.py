# Generated by re2c
# re2py $INPUT -o $OUTPUT

from enum import Enum
import os

BUFSIZE = 4096
YYMAXFILL = 1


class State:
    def __init__(self, fname):
        self.file = open(fname, "rb")
        self.buf = bytearray(BUFSIZE)
        self.lim = BUFSIZE - YYMAXFILL
        self.cur = self.lim
        self.mar = self.lim
        self.tok = self.lim
        self.eof = False

    def __del__(self):
        self.file.close()

class Status(Enum):
    OK = 0
    EOF = 1
    LONG_LEXEME = 2

def fill(st, need):
    if st.eof:
        return Status.EOF

    # Error: lexeme too long. In real life could reallocate a larger buffer.
    if st.tok < need:
        return Status.LONG_LEXEME

    # Shift buffer contents (discard everything up to the current token).
    st.buf = st.buf[st.tok:st.lim]
    st.cur -= st.tok;
    st.mar -= st.tok;
    st.lim -= st.tok;
    st.tok = 0;

    # Fill free space at the end of buffer with new data from file.
    bytes = st.file.read(BUFSIZE - st.lim - 1) # -1 for sentinel
    if not bytes:
        st.eof = True # end of file
        st.lim += YYMAXFILL
        st.buf += b"\0" * YYMAXFILL
    else:
        st.lim += len(bytes);
        st.buf += bytes

    return Status.OK

def lex(st):
    count = 0
    while True:
        st.tok = st.cur
        
        yystate = 0
        while True:
            match yystate:
                case 0:
                    if st.lim - st.cur < 1:
                        if fill(st, 1) != Status.OK: return -1
                    yych = st.buf[st.cur]
                    st.cur += 1
                    if yych <= 0x20:
                        if yych <= 0x00:
                            yystate = 1
                            continue
                        if yych <= 0x1F:
                            yystate = 2
                            continue
                        yystate = 3
                        continue
                    else:
                        if yych == 0x27:
                            yystate = 4
                            continue
                        yystate = 2
                        continue
                case 1:
                    # Check that it is the sentinel, not some unexpected null.
                    return count if st.tok == st.lim - YYMAXFILL else -1
                case 2:
                    return -1
                case 3:
                    if st.lim - st.cur < 1:
                        if fill(st, 1) != Status.OK: return -1
                    yych = st.buf[st.cur]
                    if yych == 0x20:
                        st.cur += 1
                        yystate = 3
                        continue
                    break
                case 4:
                    if st.lim - st.cur < 1:
                        if fill(st, 1) != Status.OK: return -1
                    yych = st.buf[st.cur]
                    st.cur += 1
                    if yych == 0x27:
                        yystate = 5
                        continue
                    if yych == 0x5C:
                        yystate = 6
                        continue
                    yystate = 4
                    continue
                case 5:
                    count += 1
                    break
                case 6:
                    if st.lim - st.cur < 1:
                        if fill(st, 1) != Status.OK: return -1
                    st.cur += 1
                    yystate = 4
                    continue
                case _:
                    raise "internal lexer error"


def main():
    fname = "input"

    # Prepare input file.
    f = open(fname, "w")
    for i in range(BUFSIZE):
        f.write("'qu\0tes' 'are' 'fine: \\'' ")
    f.close()

    # Run lexer on the prepared file.
    st = State(fname)
    assert lex(st) == 3 * BUFSIZE

    # Cleanup.
    os.remove(fname)

if __name__ == '__main__':
    main()

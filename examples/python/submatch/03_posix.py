# Generated by re2c
# re2py $INPUT -o $OUTPUT

from collections import namedtuple

SemVer = namedtuple('SemVer', 'major minor patch')

# Maximum number of capturing groups among all rules.
YYMAXNMATCH = 4

NONE = -1

def parse(str):
    cur = 0

    # A list for capturing parentheses (twice the number of groups).
    yypmatch = [None] * (YYMAXNMATCH * 2)

    
    yystate = 0
    while True:
        match yystate:
            case 0:
                yych = str[cur]
                match yych:
                    case 0x30|0x31|0x32|0x33|0x34|0x35|0x36|0x37|0x38|0x39:
                        yyt1 = cur
                        cur += 1
                        yystate = 3
                        continue
                    case _:
                        cur += 1
                        yystate = 1
                        continue
            case 1:
                yystate = 2
                continue
            case 2:
                return None
            case 3:
                mar = cur
                yych = str[cur]
                match yych:
                    case 0x2E:
                        cur += 1
                        yystate = 4
                        continue
                    case 0x30|0x31|0x32|0x33|0x34|0x35|0x36|0x37|0x38|0x39:
                        cur += 1
                        yystate = 6
                        continue
                    case _:
                        yystate = 2
                        continue
            case 4:
                yych = str[cur]
                match yych:
                    case 0x30|0x31|0x32|0x33|0x34|0x35|0x36|0x37|0x38|0x39:
                        yyt2 = cur
                        cur += 1
                        yystate = 7
                        continue
                    case _:
                        yystate = 5
                        continue
            case 5:
                cur = mar
                yystate = 2
                continue
            case 6:
                yych = str[cur]
                match yych:
                    case 0x2E:
                        cur += 1
                        yystate = 4
                        continue
                    case 0x30|0x31|0x32|0x33|0x34|0x35|0x36|0x37|0x38|0x39:
                        cur += 1
                        yystate = 6
                        continue
                    case _:
                        yystate = 5
                        continue
            case 7:
                yych = str[cur]
                match yych:
                    case 0x00:
                        yyt3 = cur
                        yyt4 = NONE
                        yyt5 = NONE
                        cur += 1
                        yystate = 8
                        continue
                    case 0x2E:
                        yyt3 = cur
                        yyt5 = cur
                        cur += 1
                        yystate = 9
                        continue
                    case 0x30|0x31|0x32|0x33|0x34|0x35|0x36|0x37|0x38|0x39:
                        cur += 1
                        yystate = 7
                        continue
                    case _:
                        yystate = 5
                        continue
            case 8:
                yynmatch = 4
                yypmatch[2] = yyt1
                yypmatch[4] = yyt2
                yypmatch[5] = yyt3
                yypmatch[6] = yyt5
                yypmatch[7] = yyt4
                yypmatch[0] = yyt1
                yypmatch[1] = cur
                yypmatch[3] = yyt2
                yypmatch[3] += -1
                # `yynmatch` is the number of capturing groups
                assert yynmatch == 4
                # Even `yypmatch` values are for opening parentheses, odd values
                # are for closing parentheses, the first group is the whole match.
                major = int(str[yypmatch[2]:yypmatch[3]])
                minor = int(str[yypmatch[4]:yypmatch[5]])
                patch = 0 if yypmatch[6] == NONE else int(str[yypmatch[6] + 1:yypmatch[7]])
                return SemVer(major, minor, patch)
            case 9:
                yych = str[cur]
                if yych <= 0x00:
                    yystate = 5
                    continue
                yystate = 11
                continue
            case 10:
                yych = str[cur]
                yystate = 11
                continue
            case 11:
                match yych:
                    case 0x00:
                        yyt4 = cur
                        cur += 1
                        yystate = 8
                        continue
                    case 0x30|0x31|0x32|0x33|0x34|0x35|0x36|0x37|0x38|0x39:
                        cur += 1
                        yystate = 10
                        continue
                    case _:
                        yystate = 5
                        continue
            case _:
                raise "internal lexer error"


assert parse(b"23.34\0") == SemVer(23, 34, 0)
assert parse(b"1.2.99999\0") == SemVer(1, 2, 99999)
assert parse(b"1.a\0") == None

# Generated by re2c
# re2py $INPUT -o $OUTPUT

class State:
    def __init__(self, str):
        self.str = str
        self.cur = 0
        self.mar = 0



def parse_u32(str):
    st = State(str)
    
    yystate = 0
    while True:
        match yystate:
            case 0:
                yych = st.str[st.cur]
                st.cur += 1
                match yych:
                    case 0x30:
                        yystate = 2
                        continue
                    case 0x31|0x32|0x33|0x34|0x35|0x36|0x37|0x38|0x39:
                        yystate = 4
                        continue
                    case _:
                        yystate = 1
                        continue
            case 1:
                return None
            case 2:
                st.mar = st.cur
                yych = st.str[st.cur]
                match yych:
                    case 0x42|0x62:
                        st.cur += 1
                        yystate = 5
                        continue
                    case 0x58|0x78:
                        st.cur += 1
                        yystate = 7
                        continue
                    case _:
                        yystate = 3
                        continue
            case 3:
                return parse_oct(st)
            case 4:
                st.cur += -1
                return parse_dec(st)
            case 5:
                yych = st.str[st.cur]
                match yych:
                    case 0x30|0x31:
                        st.cur += 1
                        yystate = 8
                        continue
                    case _:
                        yystate = 6
                        continue
            case 6:
                st.cur = st.mar
                yystate = 3
                continue
            case 7:
                yych = st.str[st.cur]
                match yych:
                    case 0x30|0x31|0x32|0x33|0x34|0x35|0x36|0x37|0x38|0x39|0x41|0x42|0x43|0x44|0x45|0x46|0x61|0x62|0x63|0x64|0x65|0x66:
                        st.cur += 1
                        yystate = 9
                        continue
                    case _:
                        yystate = 6
                        continue
            case 8:
                st.cur += -1
                return parse_bin(st)
            case 9:
                st.cur += -1
                return parse_hex(st)
            case _:
                raise "internal lexer error"


def parse_bin(st):
    n = 0
    while True:
    
        yystate = 0
        while True:
            match yystate:
                case 0:
                    yych = st.str[st.cur]
                    st.cur += 1
                    match yych:
                        case 0x30|0x31:
                            yystate = 2
                            continue
                        case _:
                            yystate = 1
                            continue
                case 1:
                    return n
                case 2:
                    n = n * 2 + (st.str[st.cur - 1] - 48)
                    break
                case _:
                    raise "internal lexer error"


def parse_oct(st):
    n = 0
    while True:
    
        yystate = 0
        while True:
            match yystate:
                case 0:
                    yych = st.str[st.cur]
                    st.cur += 1
                    match yych:
                        case 0x30|0x31|0x32|0x33|0x34|0x35|0x36|0x37:
                            yystate = 2
                            continue
                        case _:
                            yystate = 1
                            continue
                case 1:
                    return n
                case 2:
                    n = n * 8 + (st.str[st.cur - 1] - 48)
                    break
                case _:
                    raise "internal lexer error"


def parse_dec(st):
    n = 0
    while True:
    
        yystate = 0
        while True:
            match yystate:
                case 0:
                    yych = st.str[st.cur]
                    st.cur += 1
                    match yych:
                        case 0x30|0x31|0x32|0x33|0x34|0x35|0x36|0x37|0x38|0x39:
                            yystate = 2
                            continue
                        case _:
                            yystate = 1
                            continue
                case 1:
                    return n
                case 2:
                    n = n * 10 + (st.str[st.cur - 1] - 48)
                    break
                case _:
                    raise "internal lexer error"


def parse_hex(st):
    n = 0
    while True:
    
        yystate = 0
        while True:
            match yystate:
                case 0:
                    yych = st.str[st.cur]
                    st.cur += 1
                    match yych:
                        case 0x30|0x31|0x32|0x33|0x34|0x35|0x36|0x37|0x38|0x39:
                            yystate = 2
                            continue
                        case 0x41|0x42|0x43|0x44|0x45|0x46:
                            yystate = 3
                            continue
                        case 0x61|0x62|0x63|0x64|0x65|0x66:
                            yystate = 4
                            continue
                        case _:
                            yystate = 1
                            continue
                case 1:
                    return n
                case 2:
                    n = n * 16 + (st.str[st.cur - 1] - 48)
                    break
                case 3:
                    n = n * 16 + (st.str[st.cur - 1] - 55)
                    break
                case 4:
                    n = n * 16 + (st.str[st.cur - 1] - 87)
                    break
                case _:
                    raise "internal lexer error"


assert parse_u32(b"\0") == None
assert parse_u32(b"1234567890\0") == 1234567890
assert parse_u32(b"0b1101\0") == 13
assert parse_u32(b"0x7Fe\0") == 2046
assert parse_u32(b"0644\0") == 420
assert parse_u32(b"9999999999\0") == 9999999999

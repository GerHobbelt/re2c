/* Generated by re2c */
#line 1 "d/fill/01_fill.re"
// re2d $INPUT -o $OUTPUT
module main;

import core.stdc.string;
import core.stdc.stdio;

enum BUFSIZE = 4095;

struct Input {
    FILE* file;
    char[BUFSIZE + 1] buf;// +1 for sentinputel
    char* lim, cur, mar, tok;
    bool eof;
};

private int fill(ref Input input) {
    if (input.eof) return 1;

    const size_t shift = input.tok - input.buf.ptr;
    const size_t used = input.lim - input.tok;

    // Error: lexeme too long. In real life could reallocate a larger buffer.
    if (shift < 1) return 2;

    // Shift buffer contents (discard everythinputg up to the current token).
    memmove(cast(void*)input.buf.ptr, input.tok, used);
    input.lim -= shift;
    input.cur -= shift;
    input.mar -= shift;
    input.tok -= shift;

    // Fill free space at the end of buffer with new data from file.
    input.lim += fread(input.lim, 1, BUFSIZE - used, input.file);
    input.lim[0] = 0;
    input.eof = input.lim < (input.buf.ptr + BUFSIZE);
    return 0;
}

private int lex(ref Input input) {
    int count = 0;
    for (;;) {
        input.tok = input.cur;
    
#line 47 "d/fill/01_fill.d"
{
	char yych;
yyFillLabel0:
	yych = (*input.cur);
	switch (yych) {
		case ' ': goto yy3;
		case '\'': goto yy5;
		default:
			if (input.lim <= input.cur) {
				if (fill(input) == 0) goto yyFillLabel0;
				goto yy10;
			}
			goto yy1;
	}
yy1:
	input.cur++;
yy2:
#line 55 "d/fill/01_fill.re"
	{ return -1; }
#line 67 "d/fill/01_fill.d"
yy3:
	input.cur++;
yyFillLabel1:
	yych = (*input.cur);
	switch (yych) {
		case ' ': goto yy3;
		default:
			if (input.lim <= input.cur) {
				if (fill(input) == 0) goto yyFillLabel1;
			}
			goto yy4;
	}
yy4:
#line 58 "d/fill/01_fill.re"
	{ continue; }
#line 83 "d/fill/01_fill.d"
yy5:
	input.cur++;
	input.mar = input.cur;
yyFillLabel2:
	yych = (*input.cur);
	if (yych >= 0x01) goto yy7;
	if (input.lim <= input.cur) {
		if (fill(input) == 0) goto yyFillLabel2;
		goto yy2;
	}
yy6:
	input.cur++;
yyFillLabel3:
	yych = (*input.cur);
yy7:
	switch (yych) {
		case '\'': goto yy8;
		case '\\': goto yy9;
		default:
			if (input.lim <= input.cur) {
				if (fill(input) == 0) goto yyFillLabel3;
				goto yy11;
			}
			goto yy6;
	}
yy8:
	input.cur++;
#line 57 "d/fill/01_fill.re"
	{ ++count; continue; }
#line 113 "d/fill/01_fill.d"
yy9:
	input.cur++;
yyFillLabel4:
	yych = (*input.cur);
	if (yych <= 0x00) {
		if (input.lim <= input.cur) {
			if (fill(input) == 0) goto yyFillLabel4;
			goto yy11;
		}
		goto yy6;
	}
	goto yy6;
yy10:
#line 56 "d/fill/01_fill.re"
	{ return count; }
#line 129 "d/fill/01_fill.d"
yy11:
	input.cur = input.mar;
	goto yy2;
}
#line 59 "d/fill/01_fill.re"

    }
    assert(0);
}

void main() {
    const char[] fname = "input";
    const char[] content = "'qu\0tes' 'are' 'fine: \\'' ";

    // Prepare inputput file: a few times the size of the buffer, containing
    // strings with zeroes and escaped quotes.
    FILE* f = fopen(fname.ptr, "w");
    for (int i = 0; i < BUFSIZE; ++i) {
        fwrite(cast(const(void*)) content.ptr, 1, content.length - 1, f);
    }
    fclose(f);
    int count = 3 * BUFSIZE; // number of quoted strings written to file

    // Initialize lexer state: all pointers are at the end of buffer.
    Input input;
    input.file = fopen(fname.ptr, "r");
    input.cur = input.mar = input.tok = input.lim = input.buf.ptr + BUFSIZE;
    input.eof = 0;
    // Sentinel (at YYLIMIT pointer) is set to zero, which triggers YYFILL.
    input.lim[0] = 0;

    // Run the lexer.
    assert(lex(input) == count);

    // Cleanup: remove input file.
    fclose(input.file);
    remove(fname.ptr);
}

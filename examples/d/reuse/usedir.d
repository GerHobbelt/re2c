/* Generated by re2c */
#line 1 "d/reuse/usedir.re"
// re2d $INPUT -o $OUTPUT
module main;

// This example shows how to combine reusable re2c blocks: two blocks
// ('colors' and 'fish') are merged into one. The 'salmon' rule occurs
// in both blocks; the 'fish' block takes priority because it is used
// earlier. Default rule * occurs in all three blocks; the local (not
// inherited) definition takes priority.

enum What { COLOR, FISH, DUNNO };

#line 15 "d/reuse/usedir.re"


#line 20 "d/reuse/usedir.re"


private What lex(const(char)* s) {
    const(char)* cur = s, mar;
    
#line 24 "d/reuse/usedir.d"
{
	char yych;
	yych = *cur;
	switch (yych) {
		case 'e': goto yy3;
		case 'h': goto yy4;
		case 'm': goto yy5;
		case 'r': goto yy6;
		case 's': goto yy7;
		default: goto yy1;
	}
yy1:
	++cur;
yy2:
#line 34 "d/reuse/usedir.re"
	{ return What.DUNNO; }
#line 41 "d/reuse/usedir.d"
yy3:
	++cur;
	mar = cur;
	yych = *cur;
	switch (yych) {
		case 'e': goto yy8;
		default: goto yy2;
	}
yy4:
	++cur;
	mar = cur;
	yych = *cur;
	switch (yych) {
		case 'a': goto yy10;
		default: goto yy2;
	}
yy5:
	++cur;
	mar = cur;
	yych = *cur;
	switch (yych) {
		case 'a': goto yy11;
		default: goto yy2;
	}
yy6:
	++cur;
	mar = cur;
	yych = *cur;
	switch (yych) {
		case 'e': goto yy12;
		default: goto yy2;
	}
yy7:
	++cur;
	mar = cur;
	yych = *cur;
	switch (yych) {
		case 'a': goto yy13;
		default: goto yy2;
	}
yy8:
	++cur;
	yych = *cur;
	switch (yych) {
		case 'l': goto yy14;
		default: goto yy9;
	}
yy9:
	cur = mar;
	goto yy2;
yy10:
	++cur;
	yych = *cur;
	switch (yych) {
		case 'd': goto yy15;
		default: goto yy9;
	}
yy11:
	++cur;
	yych = *cur;
	switch (yych) {
		case 'g': goto yy16;
		default: goto yy9;
	}
yy12:
	++cur;
	yych = *cur;
	switch (yych) {
		case 'd': goto yy17;
		default: goto yy9;
	}
yy13:
	++cur;
	yych = *cur;
	switch (yych) {
		case 'l': goto yy18;
		default: goto yy9;
	}
yy14:
	++cur;
#line 19 "d/reuse/usedir.re"
	{ return What.FISH; }
#line 124 "d/reuse/usedir.d"
yy15:
	++cur;
	yych = *cur;
	switch (yych) {
		case 'd': goto yy19;
		default: goto yy9;
	}
yy16:
	++cur;
	yych = *cur;
	switch (yych) {
		case 'e': goto yy20;
		default: goto yy9;
	}
yy17:
	++cur;
#line 14 "d/reuse/usedir.re"
	{ return What.COLOR; }
#line 143 "d/reuse/usedir.d"
yy18:
	++cur;
	yych = *cur;
	switch (yych) {
		case 'm': goto yy21;
		default: goto yy9;
	}
yy19:
	++cur;
	yych = *cur;
	switch (yych) {
		case 'o': goto yy22;
		default: goto yy9;
	}
yy20:
	++cur;
	yych = *cur;
	switch (yych) {
		case 'n': goto yy23;
		default: goto yy9;
	}
yy21:
	++cur;
	yych = *cur;
	switch (yych) {
		case 'o': goto yy24;
		default: goto yy9;
	}
yy22:
	++cur;
	yych = *cur;
	switch (yych) {
		case 'c': goto yy25;
		default: goto yy9;
	}
yy23:
	++cur;
	yych = *cur;
	switch (yych) {
		case 't': goto yy26;
		default: goto yy9;
	}
yy24:
	++cur;
	yych = *cur;
	switch (yych) {
		case 'n': goto yy14;
		default: goto yy9;
	}
yy25:
	++cur;
	yych = *cur;
	switch (yych) {
		case 'k': goto yy14;
		default: goto yy9;
	}
yy26:
	++cur;
	yych = *cur;
	switch (yych) {
		case 'a': goto yy17;
		default: goto yy9;
	}
}
#line 35 "d/reuse/usedir.re"

}

void main() {
    assert(lex("salmon") == What.FISH);
    assert(lex("what?") == What.DUNNO);
}

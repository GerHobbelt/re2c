/* Generated by re2c */
#line 1 "d/reuse/reuse.re"
// re2d $INPUT -o $OUTPUT --input-encoding utf8
module main;

import std.stdint;

// This example supports multiple input encodings: UTF-8 and UTF-32.
// Both lexers are generated from the same rules block, and the use
// blocks add only encoding-specific configurations.
#line 18 "d/reuse/reuse.re"


private int lex_utf8(const(uint8_t)* s) {
    const(uint8_t)* cur = s, mar;
    
#line 18 "d/reuse/reuse.d"
{
	uint8_t yych;
	yych = *cur;
	switch (yych) {
		case 0xE2: goto yy3;
		default: goto yy1;
	}
yy1:
	++cur;
yy2:
#line 17 "d/reuse/reuse.re"
	{ return 1; }
#line 31 "d/reuse/reuse.d"
yy3:
	++cur;
	mar = cur;
	yych = *cur;
	switch (yych) {
		case 0x88: goto yy4;
		default: goto yy2;
	}
yy4:
	++cur;
	yych = *cur;
	switch (yych) {
		case 0x80: goto yy6;
		default: goto yy5;
	}
yy5:
	cur = mar;
	goto yy2;
yy6:
	++cur;
	yych = *cur;
	switch (yych) {
		case 'x': goto yy7;
		default: goto yy5;
	}
yy7:
	++cur;
	yych = *cur;
	switch (yych) {
		case ' ': goto yy8;
		default: goto yy5;
	}
yy8:
	++cur;
	yych = *cur;
	switch (yych) {
		case 0xE2: goto yy9;
		default: goto yy5;
	}
yy9:
	++cur;
	yych = *cur;
	switch (yych) {
		case 0x88: goto yy10;
		default: goto yy5;
	}
yy10:
	++cur;
	yych = *cur;
	switch (yych) {
		case 0x83: goto yy11;
		default: goto yy5;
	}
yy11:
	++cur;
	yych = *cur;
	switch (yych) {
		case 'y': goto yy12;
		default: goto yy5;
	}
yy12:
	++cur;
#line 16 "d/reuse/reuse.re"
	{ return 0; }
#line 96 "d/reuse/reuse.d"
}
#line 25 "d/reuse/reuse.re"

}

private int lex_utf32(const(uint32_t)* s) {
    const(uint32_t)* cur = s, mar;
    
#line 105 "d/reuse/reuse.d"
{
	uint32_t yych;
	yych = *cur;
	if (yych == 0x00002200) goto yy15;
	++cur;
yy14:
#line 17 "d/reuse/reuse.re"
	{ return 1; }
#line 114 "d/reuse/reuse.d"
yy15:
	++cur;
	mar = cur;
	yych = *cur;
	if (yych != 'x') goto yy14;
	++cur;
	yych = *cur;
	if (yych == ' ') goto yy17;
yy16:
	cur = mar;
	goto yy14;
yy17:
	++cur;
	yych = *cur;
	if (yych != 0x00002203) goto yy16;
	++cur;
	yych = *cur;
	if (yych != 'y') goto yy16;
	++cur;
#line 16 "d/reuse/reuse.re"
	{ return 0; }
#line 136 "d/reuse/reuse.d"
}
#line 33 "d/reuse/reuse.re"

}

void main() {
    immutable uint8_t[] s8 = // UTF-8
        [ 0xe2, 0x88, 0x80, 0x78, 0x20, 0xe2, 0x88, 0x83, 0x79 ];

    immutable uint32_t[] s32 = // UTF32
        [ 0x00002200, 0x00000078, 0x00000020, 0x00002203, 0x00000079 ];

    assert(lex_utf8(cast(const(uint8_t)*)s8) == 0);
    assert(lex_utf32(cast(const(uint32_t)*)s32) == 0);
}

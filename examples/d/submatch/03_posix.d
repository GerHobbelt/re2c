/* Generated by re2c */
#line 1 "d/submatch/03_posix.re"
// re2d $INPUT -o $OUTPUT
module main;

// Maximum number of capturing groups among all rules.
#line 8 "d/submatch/03_posix.d"
enum YYMAXNMATCH = 4;
#line 5 "d/submatch/03_posix.re"


struct SemVer { int major, minor, patch; };

private int s2n(const(char)* s, const(char)* e) { // pre-parsed string to number
    int n = 0;
    for (; s < e; ++s) n = n * 10 + (*s - '0');
    return n;
}

private bool lex(const(char)* str, ref SemVer ver) {
    const(char)* cur = str, mar;

    // Allocate memory for capturing parentheses (twice the number of groups).
    const(char)*[YYMAXNMATCH * 2] yypmatch;
    size_t yynmatch;

    // Autogenerated tag variables used by the lexer to track tag values.
    
#line 30 "d/submatch/03_posix.d"
const(char)* yyt1;
const(char)* yyt2;
const(char)* yyt3;
const(char)* yyt4;
const(char)* yyt5;
#line 23 "d/submatch/03_posix.re"


    
#line 40 "d/submatch/03_posix.d"
{
	char yych;
	yych = *cur;
	switch (yych) {
		case '0': .. case '9':
			yyt1 = cur;
			goto yy3;
		default: goto yy1;
	}
yy1:
	++cur;
yy2:
#line 49 "d/submatch/03_posix.re"
	{ return false; }
#line 55 "d/submatch/03_posix.d"
yy3:
	++cur;
	mar = cur;
	yych = *cur;
	switch (yych) {
		case '.': goto yy4;
		case '0': .. case '9': goto yy6;
		default: goto yy2;
	}
yy4:
	++cur;
	yych = *cur;
	switch (yych) {
		case '0': .. case '9':
			yyt2 = cur;
			goto yy7;
		default: goto yy5;
	}
yy5:
	cur = mar;
	goto yy2;
yy6:
	++cur;
	yych = *cur;
	switch (yych) {
		case '.': goto yy4;
		case '0': .. case '9': goto yy6;
		default: goto yy5;
	}
yy7:
	++cur;
	yych = *cur;
	switch (yych) {
		case 0x00:
			yyt3 = cur;
			yyt4 = null;
			yyt5 = null;
			goto yy8;
		case '.':
			yyt3 = cur;
			yyt5 = cur;
			goto yy9;
		case '0': .. case '9': goto yy7;
		default: goto yy5;
	}
yy8:
	++cur;
	yynmatch = 4;
	yypmatch[2] = yyt1;
	yypmatch[4] = yyt2;
	yypmatch[5] = yyt3;
	yypmatch[6] = yyt5;
	yypmatch[7] = yyt4;
	yypmatch[0] = yyt1;
	yypmatch[1] = cur;
	yypmatch[3] = yyt2;
	yypmatch[3] += -1;
#line 39 "d/submatch/03_posix.re"
	{
            // `yynmatch` is the number of capturing groups
            assert(yynmatch == 4);
            // Even `yypmatch` values are for opening parentheses, odd values
            // are for closing parentheses, the first group is the whole match.
            ver.major = s2n(yypmatch[2], yypmatch[3]);
            ver.minor = s2n(yypmatch[4], yypmatch[5]);
            ver.patch = yypmatch[6] ? s2n(yypmatch[6] + 1, yypmatch[7]) : 0;
            return true;
        }
#line 124 "d/submatch/03_posix.d"
yy9:
	++cur;
	yych = *cur;
	if (yych <= 0x00) goto yy5;
	goto yy11;
yy10:
	++cur;
	yych = *cur;
yy11:
	switch (yych) {
		case 0x00:
			yyt4 = cur;
			goto yy8;
		case '0': .. case '9': goto yy10;
		default: goto yy5;
	}
}
#line 50 "d/submatch/03_posix.re"

}

void main() {
    SemVer v;
    assert(lex("23.34", v) && v.major == 23 && v.minor == 34 && v.patch == 0);
    assert(lex("1.2.999", v) && v.major == 1 && v.minor == 2 && v.patch == 999);
    assert(!lex("1.a", v));
}

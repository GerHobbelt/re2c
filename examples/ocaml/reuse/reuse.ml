(* Generated by re2c *)
#1 "ocaml/reuse/reuse.re"
(* re2ocaml $INPUT -o $OUTPUT --input-encoding utf8 *)

(* This example supports multiple input encodings: UTF-8 and UTF-32.
   Both lexers are generated from the same rules block, and the use
   blocks add only encoding-specific configurations. *)

type state = {
    mutable cur: int;
    mutable mar: int;
}

#22 "ocaml/reuse/reuse.re"



#19 "ocaml/reuse/reuse.ml"
let rec yy0 (st : state) (str : char array) : int option =
	let yych = Char.code str.(st.cur) in
	st.cur <- st.cur + 1;
	match yych with
		| 0xE2 -> (yy3 [@tailcall]) st str
		| _ -> (yy1 [@tailcall]) st str

and yy1 (st : state) (str : char array) : int option =
	(yy2 [@tailcall]) st str

and yy2 (st : state) (str : char array) : int option =
#21 "ocaml/reuse/reuse.re"
	None
#33 "ocaml/reuse/reuse.ml"

and yy3 (st : state) (str : char array) : int option =
	st.mar <- st.cur;
	let yych = Char.code str.(st.cur) in
	match yych with
		| 0x88 ->
			st.cur <- st.cur + 1;
			(yy4 [@tailcall]) st str
		| _ -> (yy2 [@tailcall]) st str

and yy4 (st : state) (str : char array) : int option =
	let yych = Char.code str.(st.cur) in
	match yych with
		| 0x80 ->
			st.cur <- st.cur + 1;
			(yy6 [@tailcall]) st str
		| _ -> (yy5 [@tailcall]) st str

and yy5 (st : state) (str : char array) : int option =
	st.cur <- st.mar;
	(yy2 [@tailcall]) st str

and yy6 (st : state) (str : char array) : int option =
	let yych = Char.code str.(st.cur) in
	match yych with
		| 0x78 ->
			st.cur <- st.cur + 1;
			(yy7 [@tailcall]) st str
		| _ -> (yy5 [@tailcall]) st str

and yy7 (st : state) (str : char array) : int option =
	let yych = Char.code str.(st.cur) in
	match yych with
		| 0x20 ->
			st.cur <- st.cur + 1;
			(yy8 [@tailcall]) st str
		| _ -> (yy5 [@tailcall]) st str

and yy8 (st : state) (str : char array) : int option =
	let yych = Char.code str.(st.cur) in
	match yych with
		| 0xE2 ->
			st.cur <- st.cur + 1;
			(yy9 [@tailcall]) st str
		| _ -> (yy5 [@tailcall]) st str

and yy9 (st : state) (str : char array) : int option =
	let yych = Char.code str.(st.cur) in
	match yych with
		| 0x88 ->
			st.cur <- st.cur + 1;
			(yy10 [@tailcall]) st str
		| _ -> (yy5 [@tailcall]) st str

and yy10 (st : state) (str : char array) : int option =
	let yych = Char.code str.(st.cur) in
	match yych with
		| 0x83 ->
			st.cur <- st.cur + 1;
			(yy11 [@tailcall]) st str
		| _ -> (yy5 [@tailcall]) st str

and yy11 (st : state) (str : char array) : int option =
	let yych = Char.code str.(st.cur) in
	match yych with
		| 0x79 ->
			st.cur <- st.cur + 1;
			(yy12 [@tailcall]) st str
		| _ -> (yy5 [@tailcall]) st str

and yy12 (st : state) (str : char array) : int option =
#20 "ocaml/reuse/reuse.re"
	Some st.cur
#107 "ocaml/reuse/reuse.ml"

and lex8 (st : state) (str : char array) : int option =
	(yy0 [@tailcall]) st str

#28 "ocaml/reuse/reuse.re"



#116 "ocaml/reuse/reuse.ml"
let rec yy13 (st : state) (str : int array) : int option =
	let yych = str.(st.cur) in
	st.cur <- st.cur + 1;
	if (yych == 0x00002200) then (yy16 [@tailcall]) st str
	else (yy14 [@tailcall]) st str

and yy14 (st : state) (str : int array) : int option =
	(yy15 [@tailcall]) st str

and yy15 (st : state) (str : int array) : int option =
#21 "ocaml/reuse/reuse.re"
	None
#129 "ocaml/reuse/reuse.ml"

and yy16 (st : state) (str : int array) : int option =
	st.mar <- st.cur;
	let yych = str.(st.cur) in
	if (yych == 0x00000078) then (
		st.cur <- st.cur + 1;
		(yy17 [@tailcall]) st str
	) else (
		(yy15 [@tailcall]) st str
	)

and yy17 (st : state) (str : int array) : int option =
	let yych = str.(st.cur) in
	if (yych == 0x00000020) then (
		st.cur <- st.cur + 1;
		(yy19 [@tailcall]) st str
	) else (
		(yy18 [@tailcall]) st str
	)

and yy18 (st : state) (str : int array) : int option =
	st.cur <- st.mar;
	(yy15 [@tailcall]) st str

and yy19 (st : state) (str : int array) : int option =
	let yych = str.(st.cur) in
	if (yych == 0x00002203) then (
		st.cur <- st.cur + 1;
		(yy20 [@tailcall]) st str
	) else (
		(yy18 [@tailcall]) st str
	)

and yy20 (st : state) (str : int array) : int option =
	let yych = str.(st.cur) in
	if (yych == 0x00000079) then (
		st.cur <- st.cur + 1;
		(yy21 [@tailcall]) st str
	) else (
		(yy18 [@tailcall]) st str
	)

and yy21 (st : state) (str : int array) : int option =
#20 "ocaml/reuse/reuse.re"
	Some st.cur
#175 "ocaml/reuse/reuse.ml"

and lex32 (st : state) (str : int array) : int option =
	(yy13 [@tailcall]) st str

#34 "ocaml/reuse/reuse.re"


let main() =
    let st = {cur = 0; mar = 0} in
    let str = [|'\xe2'; '\x08'; '\x80'; '\x78'; '\x20'; '\xe2'; '\x88'; '\x83'; '\x79'|] in
    if not (lex8 st str = Some (Array.length str)) then raise (Failure "error");

    let st = {cur = 0; mar = 0} in
    let str = [|0x2200; 0x78; 0x20; 0x2203; 0x79|] in
    if not (lex32 st str = Some (Array.length str)) then raise (Failure "error");

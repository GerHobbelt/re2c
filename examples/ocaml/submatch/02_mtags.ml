(* Generated by re2c *)
#1 "ocaml/submatch/02_mtags.re"
(* re2ocaml $INPUT -o $OUTPUT *)

let none = max_int;

type state = {
    str: string;
    mutable cur: int;
    mutable mar: int;
    
#13 "ocaml/submatch/02_mtags.ml"

	mutable yyt1: int;
	mutable yyt2: int;
#9 "ocaml/submatch/02_mtags.re"

    mutable t1: int;
    mutable t2: int;
    
#22 "ocaml/submatch/02_mtags.ml"

	mutable yytm3: int list;
	mutable yytm4: int list;
#12 "ocaml/submatch/02_mtags.re"

    mutable t3: int list;
    mutable t4: int list;
}

let s2n (str: string) (i1: int) (i2: int) : int =
    let rec f s i j n =
        if i >= j then n else f s (i + 1) j (n * 10 + Char.code s.[i] - 48)
    in f str i1 i2 0


#38 "ocaml/submatch/02_mtags.ml"
let rec yy0 (st : state) : (int list) option =
	let yych = Char.code st.str.[st.cur] in
	match yych with
		| 0x30|0x31|0x32|0x33|0x34|0x35|0x36|0x37|0x38|0x39 ->
			st.yyt1 <- st.cur;
			st.cur <- st.cur + 1;
			(yy3 [@tailcall]) st
		| _ ->
			st.cur <- st.cur + 1;
			(yy1 [@tailcall]) st

and yy1 (st : state) : (int list) option =
	(yy2 [@tailcall]) st

and yy2 (st : state) : (int list) option =
#44 "ocaml/submatch/02_mtags.re"
	None
#56 "ocaml/submatch/02_mtags.ml"

and yy3 (st : state) : (int list) option =
	st.mar <- st.cur;
	let yych = Char.code st.str.[st.cur] in
	match yych with
		| 0x00 ->
			st.yytm4 <- [];
			st.yytm3 <- [];
			st.yyt2 <- st.cur;
			st.cur <- st.cur + 1;
			(yy4 [@tailcall]) st
		| 0x2E ->
			st.yyt2 <- st.cur;
			st.cur <- st.cur + 1;
			(yy5 [@tailcall]) st
		| 0x30|0x31|0x32|0x33|0x34|0x35|0x36|0x37|0x38|0x39 ->
			st.cur <- st.cur + 1;
			(yy7 [@tailcall]) st
		| _ -> (yy2 [@tailcall]) st

and yy4 (st : state) : (int list) option =
	st.t1 <- st.yyt1;
	st.t2 <- st.yyt2;
	st.t3 <- st.yytm3;
	st.t4 <- st.yytm4;
#39 "ocaml/submatch/02_mtags.re"
	
        let x = s2n st.str st.t1 st.t2 in
        let xs = List.rev (List.map2 (fun x y -> s2n st.str x y) st.t3 st.t4) in
        Some (x :: xs)

#88 "ocaml/submatch/02_mtags.ml"

and yy5 (st : state) : (int list) option =
	let yych = Char.code st.str.[st.cur] in
	match yych with
		| 0x30|0x31|0x32|0x33|0x34|0x35|0x36|0x37|0x38|0x39 ->
			st.yytm3 <- st.cur :: st.yytm3;
			st.cur <- st.cur + 1;
			(yy8 [@tailcall]) st
		| _ -> (yy6 [@tailcall]) st

and yy6 (st : state) : (int list) option =
	st.cur <- st.mar;
	(yy2 [@tailcall]) st

and yy7 (st : state) : (int list) option =
	let yych = Char.code st.str.[st.cur] in
	match yych with
		| 0x00 ->
			st.yytm4 <- [];
			st.yytm3 <- [];
			st.yyt2 <- st.cur;
			st.cur <- st.cur + 1;
			(yy4 [@tailcall]) st
		| 0x2E ->
			st.yyt2 <- st.cur;
			st.cur <- st.cur + 1;
			(yy5 [@tailcall]) st
		| 0x30|0x31|0x32|0x33|0x34|0x35|0x36|0x37|0x38|0x39 ->
			st.cur <- st.cur + 1;
			(yy7 [@tailcall]) st
		| _ -> (yy6 [@tailcall]) st

and yy8 (st : state) : (int list) option =
	let yych = Char.code st.str.[st.cur] in
	match yych with
		| 0x00 ->
			st.yytm4 <- st.cur :: st.yytm4;
			st.cur <- st.cur + 1;
			(yy4 [@tailcall]) st
		| 0x2E ->
			st.yytm4 <- st.cur :: st.yytm4;
			st.cur <- st.cur + 1;
			(yy5 [@tailcall]) st
		| 0x30|0x31|0x32|0x33|0x34|0x35|0x36|0x37|0x38|0x39 ->
			st.cur <- st.cur + 1;
			(yy8 [@tailcall]) st
		| _ -> (yy6 [@tailcall]) st

and parse (st : state) : (int list) option =
	(yy0 [@tailcall]) st

#45 "ocaml/submatch/02_mtags.re"


let test (str: string) (result: (int list) option) =
    let st = {
        str = str;
        cur = 0;
        mar = 0;
        
#149 "ocaml/submatch/02_mtags.ml"

		yyt1 = none;
		yyt2 = none;
#52 "ocaml/submatch/02_mtags.re"

        t1 = none;
        t2 = none;
        
#158 "ocaml/submatch/02_mtags.ml"

		yytm3 = [];
		yytm4 = [];
#55 "ocaml/submatch/02_mtags.re"

        t3 = [];
        t4 = [];
    }
    in if not (parse st = result) then raise (Failure "error")

let main () =
    test "1\x00" (Some [1]);
    test "1.2.3.4.5.6.7\x00" (Some [1; 2; 3; 4; 5; 6; 7;]);
    test "1.2.\x00" None

let _ = main ()

(* Generated by re2c *)
(* re2ocaml $INPUT -o $OUTPUT -ci *)

open Int64
open Option

type yycondtype = YYC_init | YYC_bin | YYC_oct | YYC_dec | YYC_hex


type state = {
    str: string;
    mutable cur: int;
    mutable mar: int;
    mutable cond: yycondtype;
} 

let add (num: int option) (dgt: int) (base: int) : int option =
    match num with
        | None -> None
        | Some n ->
            let n' = add (mul (of_int n) (of_int base)) (of_int dgt)
            in if n' > (of_int32 Int32.max_int) then None else Some (to_int n')


let rec yy1 (st : state) (num : int option) : int option =
	let yych = Char.code st.str.[st.cur] in
	st.cur <- st.cur + 1;
	match yych with
		| 0x30 -> (yy3 [@tailcall]) st num
		| 0x31|0x32|0x33|0x34|0x35|0x36|0x37|0x38|0x39 -> (yy5 [@tailcall]) st num
		| _ -> (yy2 [@tailcall]) st num

and yy2 (st : state) (num : int option) : int option =
	None

and yy3 (st : state) (num : int option) : int option =
	st.mar <- st.cur;
	let yych = Char.code st.str.[st.cur] in
	match yych with
		| 0x42
		| 0x62 ->
			st.cur <- st.cur + 1;
			(yy6 [@tailcall]) st num
		| 0x58
		| 0x78 ->
			st.cur <- st.cur + 1;
			(yy8 [@tailcall]) st num
		| _ -> (yy4 [@tailcall]) st num

and yy4 (st : state) (num : int option) : int option =
	st.cond <- YYC_oct;
	(yyfnoct [@tailcall]) st num

and yy5 (st : state) (num : int option) : int option =
	st.cur <- st.cur + -1;
	st.cond <- YYC_dec;
	(yyfndec [@tailcall]) st num

and yy6 (st : state) (num : int option) : int option =
	let yych = Char.code st.str.[st.cur] in
	match yych with
		| 0x30|0x31 ->
			st.cur <- st.cur + 1;
			(yy9 [@tailcall]) st num
		| _ -> (yy7 [@tailcall]) st num

and yy7 (st : state) (num : int option) : int option =
	st.cur <- st.mar;
	(yy4 [@tailcall]) st num

and yy8 (st : state) (num : int option) : int option =
	let yych = Char.code st.str.[st.cur] in
	match yych with
		| 0x30|0x31|0x32|0x33|0x34|0x35|0x36|0x37|0x38|0x39
		| 0x41|0x42|0x43|0x44|0x45|0x46
		| 0x61|0x62|0x63|0x64|0x65|0x66 ->
			st.cur <- st.cur + 1;
			(yy10 [@tailcall]) st num
		| _ -> (yy7 [@tailcall]) st num

and yy9 (st : state) (num : int option) : int option =
	st.cur <- st.cur + -1;
	st.cond <- YYC_bin;
	(yyfnbin [@tailcall]) st num

and yy10 (st : state) (num : int option) : int option =
	st.cur <- st.cur + -1;
	st.cond <- YYC_hex;
	(yyfnhex [@tailcall]) st num

and yyfninit (st : state) (num : int option) : int option =
	(yy1 [@tailcall]) st num

and yy11 (st : state) (num : int option) : int option =
	let yych = Char.code st.str.[st.cur] in
	st.cur <- st.cur + 1;
	match yych with
		| 0x30|0x31 -> (yy13 [@tailcall]) st num
		| _ -> (yy12 [@tailcall]) st num

and yy12 (st : state) (num : int option) : int option =
	num

and yy13 (st : state) (num : int option) : int option =
	yyfnbin st (add num (Char.code st.str.[st.cur - 1] - 48) 2)

and yyfnbin (st : state) (num : int option) : int option =
	(yy11 [@tailcall]) st num

and yy14 (st : state) (num : int option) : int option =
	let yych = Char.code st.str.[st.cur] in
	st.cur <- st.cur + 1;
	match yych with
		| 0x30|0x31|0x32|0x33|0x34|0x35|0x36|0x37 -> (yy16 [@tailcall]) st num
		| _ -> (yy15 [@tailcall]) st num

and yy15 (st : state) (num : int option) : int option =
	num

and yy16 (st : state) (num : int option) : int option =
	yyfnoct st (add num (Char.code st.str.[st.cur - 1] - 48) 8)

and yyfnoct (st : state) (num : int option) : int option =
	(yy14 [@tailcall]) st num

and yy17 (st : state) (num : int option) : int option =
	let yych = Char.code st.str.[st.cur] in
	st.cur <- st.cur + 1;
	match yych with
		| 0x30|0x31|0x32|0x33|0x34|0x35|0x36|0x37|0x38|0x39 -> (yy19 [@tailcall]) st num
		| _ -> (yy18 [@tailcall]) st num

and yy18 (st : state) (num : int option) : int option =
	num

and yy19 (st : state) (num : int option) : int option =
	yyfndec st (add num (Char.code st.str.[st.cur - 1] - 48) 10)

and yyfndec (st : state) (num : int option) : int option =
	(yy17 [@tailcall]) st num

and yy20 (st : state) (num : int option) : int option =
	let yych = Char.code st.str.[st.cur] in
	st.cur <- st.cur + 1;
	match yych with
		| 0x30|0x31|0x32|0x33|0x34|0x35|0x36|0x37|0x38|0x39 -> (yy22 [@tailcall]) st num
		| 0x41|0x42|0x43|0x44|0x45|0x46 -> (yy23 [@tailcall]) st num
		| 0x61|0x62|0x63|0x64|0x65|0x66 -> (yy24 [@tailcall]) st num
		| _ -> (yy21 [@tailcall]) st num

and yy21 (st : state) (num : int option) : int option =
	num

and yy22 (st : state) (num : int option) : int option =
	yyfnhex st (add num (Char.code st.str.[st.cur - 1] - 48) 16)

and yy23 (st : state) (num : int option) : int option =
	yyfnhex st (add num (Char.code st.str.[st.cur - 1] - 55) 16)

and yy24 (st : state) (num : int option) : int option =
	yyfnhex st (add num (Char.code st.str.[st.cur - 1] - 87) 16)

and yyfnhex (st : state) (num : int option) : int option =
	(yy20 [@tailcall]) st num

and yy0 (st : state) (num : int option) : int option =
	match st.cond with
		| YYC_init -> (yyfninit [@tailcall]) st num
		| YYC_bin -> (yyfnbin [@tailcall]) st num
		| YYC_oct -> (yyfnoct [@tailcall]) st num
		| YYC_dec -> (yyfndec [@tailcall]) st num
		| YYC_hex -> (yyfnhex [@tailcall]) st num

and parse (st : state) (num : int option) : int option =
	(yy0 [@tailcall]) st num



let test (str: string) (result: int option) =
    let st = {str = str; cur = 0; mar = 0; cond = YYC_init} in
    if not (parse st (Some 0) = result) then raise (Failure "error")

let main () =
    test "\x00" None;
    test "1234567890\x00" (Some 1234567890);
    test "0b1101\x00" (Some 13);
    test "0x7Fe\x00" (Some 2046);
    test "0644\x00" (Some 420);
    test "9999999999\x00" None

let _ = main ()

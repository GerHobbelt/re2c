(* Generated by re2c *)
(* re2ocaml $INPUT -o $OUTPUT -i *)

type number = Int | Float | NaN




type state = {
    str: string;
    mutable cur: int;
    mutable mar: int;
    mutable accept: int;
}


let rec yy0 (st : state) : number =
	let yych = st.str.[st.cur] in
	st.cur <- st.cur + 1;
	match yych with
		| '.' -> (yy3 [@tailcall]) st
		| '0' -> (yy4 [@tailcall]) st
		| '1'|'2'|'3'|'4'|'5'|'6'|'7'|'8'|'9' -> (yy5 [@tailcall]) st
		| _ -> (yy1 [@tailcall]) st

and yy1 (st : state) : number =
	(yy2 [@tailcall]) st

and yy2 (st : state) : number =
	NaN

and yy3 (st : state) : number =
	let yych = st.str.[st.cur] in
	match yych with
		| '0'|'1'|'2'|'3'|'4'|'5'|'6'|'7'|'8'|'9' ->
			st.cur <- st.cur + 1;
			(yy7 [@tailcall]) st
		| _ -> (yy2 [@tailcall]) st

and yy4 (st : state) : number =
	st.accept <- 0;
	st.mar <- st.cur;
	let yych = st.str.[st.cur] in
	match yych with
		| '.' ->
			st.cur <- st.cur + 1;
			(yy7 [@tailcall]) st
		| '0'|'1'|'2'|'3'|'4'|'5'|'6'|'7'|'8'|'9' ->
			st.cur <- st.cur + 1;
			(yy9 [@tailcall]) st
		| 'E'
		| 'e' ->
			st.cur <- st.cur + 1;
			(yy11 [@tailcall]) st
		| _ -> (yy2 [@tailcall]) st

and yy5 (st : state) : number =
	st.accept <- 1;
	st.mar <- st.cur;
	let yych = st.str.[st.cur] in
	match yych with
		| '.' ->
			st.cur <- st.cur + 1;
			(yy7 [@tailcall]) st
		| '0'|'1'|'2'|'3'|'4'|'5'|'6'|'7'|'8'|'9' ->
			st.cur <- st.cur + 1;
			(yy5 [@tailcall]) st
		| 'E'
		| 'e' ->
			st.cur <- st.cur + 1;
			(yy11 [@tailcall]) st
		| _ -> (yy6 [@tailcall]) st

and yy6 (st : state) : number =
	Int

and yy7 (st : state) : number =
	st.accept <- 2;
	st.mar <- st.cur;
	let yych = st.str.[st.cur] in
	match yych with
		| '0'|'1'|'2'|'3'|'4'|'5'|'6'|'7'|'8'|'9' ->
			st.cur <- st.cur + 1;
			(yy7 [@tailcall]) st
		| 'E'
		| 'e' ->
			st.cur <- st.cur + 1;
			(yy11 [@tailcall]) st
		| _ -> (yy8 [@tailcall]) st

and yy8 (st : state) : number =
	Float

and yy9 (st : state) : number =
	let yych = st.str.[st.cur] in
	match yych with
		| '.' ->
			st.cur <- st.cur + 1;
			(yy7 [@tailcall]) st
		| '0'|'1'|'2'|'3'|'4'|'5'|'6'|'7'|'8'|'9' ->
			st.cur <- st.cur + 1;
			(yy9 [@tailcall]) st
		| 'E'
		| 'e' ->
			st.cur <- st.cur + 1;
			(yy11 [@tailcall]) st
		| _ -> (yy10 [@tailcall]) st

and yy10 (st : state) : number =
	st.cur <- st.mar;
	match st.accept with
		| 0 -> (yy2 [@tailcall]) st
		| 1 -> (yy6 [@tailcall]) st
		| _ -> (yy8 [@tailcall]) st

and yy11 (st : state) : number =
	let yych = st.str.[st.cur] in
	match yych with
		| '+'
		| '-' ->
			st.cur <- st.cur + 1;
			(yy12 [@tailcall]) st
		| '0'|'1'|'2'|'3'|'4'|'5'|'6'|'7'|'8'|'9' ->
			st.cur <- st.cur + 1;
			(yy13 [@tailcall]) st
		| _ -> (yy10 [@tailcall]) st

and yy12 (st : state) : number =
	let yych = st.str.[st.cur] in
	match yych with
		| '0'|'1'|'2'|'3'|'4'|'5'|'6'|'7'|'8'|'9' ->
			st.cur <- st.cur + 1;
			(yy13 [@tailcall]) st
		| _ -> (yy10 [@tailcall]) st

and yy13 (st : state) : number =
	let yych = st.str.[st.cur] in
	match yych with
		| '0'|'1'|'2'|'3'|'4'|'5'|'6'|'7'|'8'|'9' ->
			st.cur <- st.cur + 1;
			(yy13 [@tailcall]) st
		| _ -> (yy8 [@tailcall]) st

and lex (st : state) : number =
	(yy0 [@tailcall]) st



let test(str, num) =
    let st = {str = str; cur = 0; mar = 0; accept = 0}
    in if not (lex st = num) then raise (Failure "error")

let main () =
    test("123\x00", Int);
    test("123.4567\x00", Float)

let _ = main ()

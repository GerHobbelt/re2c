(* Generated by re2c *)
#1 "ocaml/eof/03_eof_rule.re"
(* re2ocaml $INPUT -o $OUTPUT *)

type state = {
    str: string;
    mutable cur: int;
    mutable mar: int;
    lim: int;
}

(* expect a null-terminated string *)

#15 "ocaml/eof/03_eof_rule.ml"
let rec yy0 (st : state) (count : int) : int =
	let yych = Char.code st.str.[st.cur] in
	match yych with
		| 0x20 ->
			st.cur <- st.cur + 1;
			(yy3 [@tailcall]) st count
		| 0x27 ->
			st.cur <- st.cur + 1;
			(yy5 [@tailcall]) st count
		| _ ->
			if (st.cur >= st.lim) then (
				(yy10 [@tailcall]) st count
			) else (
				st.cur <- st.cur + 1;
				(yy1 [@tailcall]) st count
			)

and yy1 (st : state) (count : int) : int =
	(yy2 [@tailcall]) st count

and yy2 (st : state) (count : int) : int =
#24 "ocaml/eof/03_eof_rule.re"
	-1
#39 "ocaml/eof/03_eof_rule.ml"

and yy3 (st : state) (count : int) : int =
	let yych = Char.code st.str.[st.cur] in
	match yych with
		| 0x20 ->
			st.cur <- st.cur + 1;
			(yy3 [@tailcall]) st count
		| _ -> (yy4 [@tailcall]) st count

and yy4 (st : state) (count : int) : int =
#27 "ocaml/eof/03_eof_rule.re"
	lex st count
#52 "ocaml/eof/03_eof_rule.ml"

and yy5 (st : state) (count : int) : int =
	st.mar <- st.cur;
	let yych = Char.code st.str.[st.cur] in
	if (yych <= 0x00) then (
		if (st.cur >= st.lim) then (
			(yy2 [@tailcall]) st count
		) else (
			st.cur <- st.cur + 1;
			(yy6 [@tailcall]) st count
		)
	) else (
		(yy7 [@tailcall]) st count yych
	)

and yy6 (st : state) (count : int) : int =
	let yych = Char.code st.str.[st.cur] in
	(yy7 [@tailcall]) st count yych

and yy7 (st : state) (count : int) (yych : int) : int =
	match yych with
		| 0x27 ->
			st.cur <- st.cur + 1;
			(yy8 [@tailcall]) st count
		| 0x5C ->
			st.cur <- st.cur + 1;
			(yy9 [@tailcall]) st count
		| _ ->
			if (st.cur >= st.lim) then (
				(yy11 [@tailcall]) st count
			) else (
				st.cur <- st.cur + 1;
				(yy6 [@tailcall]) st count
			)

and yy8 (st : state) (count : int) : int =
#26 "ocaml/eof/03_eof_rule.re"
	lex st (count + 1)
#91 "ocaml/eof/03_eof_rule.ml"

and yy9 (st : state) (count : int) : int =
	let yych = Char.code st.str.[st.cur] in
	if (yych <= 0x00) then (
		if (st.cur >= st.lim) then (
			(yy11 [@tailcall]) st count
		) else (
			st.cur <- st.cur + 1;
			(yy6 [@tailcall]) st count
		)
	) else (
		st.cur <- st.cur + 1;
		(yy6 [@tailcall]) st count
	)

and yy10 (st : state) (count : int) : int =
#25 "ocaml/eof/03_eof_rule.re"
	count
#110 "ocaml/eof/03_eof_rule.ml"

and yy11 (st : state) (count : int) : int =
	st.cur <- st.mar;
	(yy2 [@tailcall]) st count

and lex (st : state) (count : int) : int =
	(yy0 [@tailcall]) st count

#28 "ocaml/eof/03_eof_rule.re"


let test(str, count) =
    let st = {
        str = str;
        cur = 0;
        mar = 0;
        lim = String.length str - 1; (* termunating null not included *)
    }
    in if not (lex st 0 = count) then raise (Failure "error")

let main () =
    test("\x00", 0);
    test("'qu\x00tes' 'are' 'fine: \\'' \x00", 3);
    test("'unterminated\\'\x00", -1)

let _ = main ()

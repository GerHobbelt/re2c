(* Generated by re2c *)
#1 "ocaml/eof/01_sentinel.re"
(* re2ocaml $INPUT -o $OUTPUT *)

type state = {
    str: string;
    mutable cur: int;
}

(* expect a null-terminated string *)

#13 "ocaml/eof/01_sentinel.ml"
let rec yy0 (st : state) (count : int) : int =
	let yych = Char.code st.str.[st.cur] in
	st.cur <- st.cur + 1;
	match yych with
		| 0x00 -> (yy1 [@tailcall]) st count
		| 0x20 -> (yy3 [@tailcall]) st count
		| 0x61|0x62|0x63|0x64|0x65|0x66|0x67|0x68|0x69|0x6A|0x6B|0x6C|0x6D|0x6E|0x6F|0x70|0x71|0x72|0x73|0x74|0x75|0x76|0x77|0x78|0x79|0x7A -> (yy5 [@tailcall]) st count
		| _ -> (yy2 [@tailcall]) st count

and yy1 (st : state) (count : int) : int =
#17 "ocaml/eof/01_sentinel.re"
	count
#26 "ocaml/eof/01_sentinel.ml"

and yy2 (st : state) (count : int) : int =
#16 "ocaml/eof/01_sentinel.re"
	-1
#31 "ocaml/eof/01_sentinel.ml"

and yy3 (st : state) (count : int) : int =
	let yych = Char.code st.str.[st.cur] in
	match yych with
		| 0x20 ->
			st.cur <- st.cur + 1;
			(yy3 [@tailcall]) st count
		| _ -> (yy4 [@tailcall]) st count

and yy4 (st : state) (count : int) : int =
#19 "ocaml/eof/01_sentinel.re"
	lex st count
#44 "ocaml/eof/01_sentinel.ml"

and yy5 (st : state) (count : int) : int =
	let yych = Char.code st.str.[st.cur] in
	match yych with
		| 0x61|0x62|0x63|0x64|0x65|0x66|0x67|0x68|0x69|0x6A|0x6B|0x6C|0x6D|0x6E|0x6F|0x70|0x71|0x72|0x73|0x74|0x75|0x76|0x77|0x78|0x79|0x7A ->
			st.cur <- st.cur + 1;
			(yy5 [@tailcall]) st count
		| _ -> (yy6 [@tailcall]) st count

and yy6 (st : state) (count : int) : int =
#18 "ocaml/eof/01_sentinel.re"
	lex st (count + 1)
#57 "ocaml/eof/01_sentinel.ml"

and lex (st : state) (count : int) : int =
	(yy0 [@tailcall]) st count

#20 "ocaml/eof/01_sentinel.re"


let test(str, count) =
    let st = {str = str; cur = 0}
    in if not (lex st 0 = count) then raise (Failure "error")

let main () =
    test("\x00", 0);
    test("one two three\x00", 3);
    test("f0ur\x00", -1)

let _ = main ()

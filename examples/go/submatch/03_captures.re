//go:generate re2go $INPUT -o $OUTPUT
package main

import "reflect"

type SemVer struct { major, minor, patch int }

func s2n(s string) int { // convert pre-parsed string to a number
	n := 0
	for _, c := range s { n = n*10 + int(c-'0') }
	return n
}

func parse(yyinput string) *SemVer {
	var yycursor, yymarker int
	var yytl0, yytr0, yytl1, yytr1, yytl2, yytr2, yytl3, yytr3 int;

	// Autogenerated tag variables used by the lexer to track tag values.
	/*!stags:re2c format = '\tvar @@ int\n'; */

	/*!re2c
		re2c:yyfill:enable = 0;
		re2c:api = default;
		re2c:define:YYCTYPE = byte;
		re2c:captvars = 1;

		num = [0-9]+;

		(num) "." (num) ("." num)? [\x00] {
			_ = yytl0; _ = yytr0; // some variables are unused
			major := s2n(yyinput[yytl1:yytr1])
			minor := s2n(yyinput[yytl2:yytr2])
			patch := 0
			if yytl3 != -1 { patch = s2n(yyinput[yytl3+1:yytr3]) }

			return &SemVer{major, minor, patch}
		}
		* { return nil }
	*/
}

func main() {
	assert_eq := func(x, y *SemVer) {
		if !reflect.DeepEqual(x, y) { panic("error") }
	}
	assert_eq(parse("23.34\000"), &SemVer{23, 34, 0})
	assert_eq(parse("1.2.9999\000"), &SemVer{1, 2, 9999})
	assert_eq(parse("1.a\000"), nil)
}

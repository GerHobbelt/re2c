/* Generated by re2c */
#include "re2c/base.h"

namespace re2c_submatch_05__datetime {





#define YYMAXFILL 26


struct input_t {
    FILE* file;
    char *buf;
    char *lim;
    char *cur;
    char *mar;
    char *tok;
    char *yyt1;
char *yyt2;

    
    taglistpool_t tlp;
    int eof;
};

static inline void free_input(input_t *in) {
    free(in->buf);
    taglistpool_free(&in->tlp);
    if (in->file) fclose(in->file);
}

static inline int fill_buffered_eof(input_t *in) {
    size_t free;
    if (in->eof) return 1;

    free = in->tok - in->buf;
    assert(free > 0);

    memmove(in->buf, in->tok, in->lim - in->tok);
    in->lim -= free;
    in->cur -= free;
    in->mar -= free;
    in->tok -= free;
    if (in->yyt1) in->yyt1 -= free;
if (in->yyt2) in->yyt2 -= free;


    in->lim += fread(in->lim, 1, free, in->file);
    in->lim[0] = 0;

    if (in->lim < in->buf + SIZE) {
        in->eof = 1;
    }

    return 0;
}

static inline int fill_buffered_scc(input_t *in, size_t need) {
    size_t free;
    if (in->eof) return 1;

    free = in->tok - in->buf;
    assert(free >= need);

    memmove(in->buf, in->tok, in->lim - in->tok);
    in->lim -= free;
    in->cur -= free;
    in->mar -= free;
    in->tok -= free;
    if (in->yyt1) in->yyt1 -= free;
if (in->yyt2) in->yyt2 -= free;


    in->lim += fread(in->lim, 1, free, in->file);

    if (in->lim < in->buf + SIZE) {
        in->eof = 1;
        memset(in->lim, 0, YYMAXFILL);
        in->lim += YYMAXFILL;
    }

    return 0;
}

static inline void init_input_simple(input_t *in, const char* fname) {
    FILE* f = fopen(fname, "rb");

    fseek(f, 0, SEEK_END);
    size_t flen = (size_t) ftell(f);
    fseek(f, 0, SEEK_SET);

    in->file = nullptr; // unused
    in->buf = (char*) malloc(flen + 1);
    in->lim = nullptr; // unused
    in->cur = in->mar = in->tok = in->buf;
    in->yyt1 = 0;
in->yyt2 = 0;

    
    taglistpool_init(&in->tlp);
    in->eof = 0; // unused

    fread(in->buf, 1, flen, f);
    in->buf[flen] = 0;

    fclose(f);
}

static inline void init_input_buffered_eof(input_t *in, const char* fname) {
    in->file = fopen(fname, "rb");
    in->buf = (char*) malloc(SIZE + 1);
    in->lim = in->buf + SIZE;
    in->cur = in->lim;
    in->mar = in->lim;
    in->tok = in->lim;
    in->yyt1 = 0;
in->yyt2 = 0;

    
    taglistpool_init(&in->tlp);
    in->eof = 0;
    fill_buffered_eof(in);
}

static inline void init_input_buffered_scc(input_t *in, const char* fname) {
    in->file = fopen(fname, "rb");
    in->buf = (char*) malloc(SIZE + YYMAXFILL);
    in->lim = in->buf + SIZE;
    in->cur = in->lim;
    in->mar = in->lim;
    in->tok = in->lim;
    in->yyt1 = 0;
in->yyt2 = 0;

    
    taglistpool_init(&in->tlp);
    in->eof = 0;
}

#define YYCURSOR cur
#define YYMARKER mar
#define YYTOKEN tok
#define TLP_CLEAR() do { \
    in->tlp.next = in->tlp.head; \
     \
} while (0)

int lex_simple(input_t *in) {
    char *cur = in->buf, *mar, *tok;
    (void) tok; // may be unused
    char *yyt1;
char *yyt2;

    
    const char* M1;const char* M2;const char* d1;const char* d2;const char* h1;const char* h2;const char* m1;const char* m2;const char* s1;const char* s2;const char* y1;const char* y2;const char* z1;const char* z2;
    
    long count = 0;
loop:
    tok = cur;
    
{
	char yych;
	static const unsigned char yybm[256] = {
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		128, 128, 128, 128, 128, 128, 128, 128,
		128, 128,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0
	};
	yych = *YYCURSOR;
	if (yych <= 0x00) goto yy1;
	if (yych <= '/') goto yy2;
	if (yych <= '0') {
		yyt1 = YYCURSOR;
		goto yy4;
	}
	if (yych <= '9') {
		yyt1 = YYCURSOR;
		goto yy5;
	}
	goto yy2;
yy1:
	++YYCURSOR;
	{ return count; }
yy2:
	++YYCURSOR;
yy3:
	{ return -1; }
yy4:
	yych = *(YYMARKER = ++YYCURSOR);
	if (yych <= '/') goto yy3;
	if (yych <= '9') goto yy6;
	goto yy3;
yy5:
	yych = *(YYMARKER = ++YYCURSOR);
	if (yych <= '/') goto yy3;
	if (yych <= '9') goto yy8;
	goto yy3;
yy6:
	yych = *++YYCURSOR;
	if (yych <= '/') goto yy7;
	if (yych <= '9') goto yy9;
yy7:
	YYCURSOR = YYMARKER;
	goto yy3;
yy8:
	yych = *++YYCURSOR;
	if (yych <= '/') goto yy7;
	if (yych <= '9') goto yy10;
	goto yy7;
yy9:
	yych = *++YYCURSOR;
	if (yych <= '/') goto yy7;
	if (yych <= '9') goto yy11;
	goto yy7;
yy10:
	yych = *++YYCURSOR;
	if (yybm[0+yych] & 128) goto yy12;
	goto yy7;
yy11:
	yych = *++YYCURSOR;
	if (yych == '-') goto yy13;
	goto yy7;
yy12:
	yych = *++YYCURSOR;
	if (yybm[0+yych] & 128) goto yy12;
	if (yych != '-') goto yy7;
yy13:
	yych = *++YYCURSOR;
	if (yych <= '/') goto yy7;
	if (yych <= '0') goto yy14;
	if (yych <= '1') goto yy15;
	goto yy7;
yy14:
	yych = *++YYCURSOR;
	if (yych <= '0') goto yy7;
	if (yych <= '9') goto yy16;
	goto yy7;
yy15:
	yych = *++YYCURSOR;
	if (yych <= '/') goto yy7;
	if (yych >= '3') goto yy7;
yy16:
	yych = *++YYCURSOR;
	if (yych != '-') goto yy7;
	yych = *++YYCURSOR;
	if (yych <= '/') goto yy7;
	if (yych <= '0') goto yy17;
	if (yych <= '2') goto yy18;
	if (yych <= '3') goto yy19;
	goto yy7;
yy17:
	yych = *++YYCURSOR;
	if (yych <= '0') goto yy7;
	if (yych <= '9') goto yy20;
	goto yy7;
yy18:
	yych = *++YYCURSOR;
	if (yych <= '/') goto yy7;
	if (yych <= '9') goto yy20;
	goto yy7;
yy19:
	yych = *++YYCURSOR;
	if (yych <= '/') goto yy7;
	if (yych >= '2') goto yy7;
yy20:
	yych = *++YYCURSOR;
	if (yych != 'T') goto yy7;
	yych = *++YYCURSOR;
	if (yych <= '/') goto yy7;
	if (yych <= '1') goto yy21;
	if (yych <= '2') goto yy22;
	goto yy7;
yy21:
	yych = *++YYCURSOR;
	if (yych <= '/') goto yy7;
	if (yych <= '9') goto yy23;
	goto yy7;
yy22:
	yych = *++YYCURSOR;
	if (yych <= '/') goto yy7;
	if (yych >= '4') goto yy7;
yy23:
	yych = *++YYCURSOR;
	if (yych != ':') goto yy7;
	yych = *++YYCURSOR;
	if (yych <= '/') goto yy7;
	if (yych >= '6') goto yy7;
	yych = *++YYCURSOR;
	if (yych <= '/') goto yy7;
	if (yych >= ':') goto yy7;
	yych = *++YYCURSOR;
	if (yych != ':') goto yy7;
	yych = *++YYCURSOR;
	if (yych <= '/') goto yy7;
	if (yych >= '6') goto yy7;
	yych = *++YYCURSOR;
	if (yych <= '/') goto yy7;
	if (yych >= ':') goto yy7;
	yych = *++YYCURSOR;
	if (yych <= ',') {
		if (yych != '+') goto yy7;
		yyt2 = YYCURSOR;
	} else {
		if (yych <= '-') {
			yyt2 = YYCURSOR;
			goto yy24;
		}
		if (yych == 'Z') {
			yyt2 = YYCURSOR;
			goto yy25;
		}
		goto yy7;
	}
yy24:
	yych = *++YYCURSOR;
	if (yych <= '/') goto yy7;
	if (yych <= '1') goto yy26;
	if (yych <= '2') goto yy27;
	goto yy7;
yy25:
	yych = *++YYCURSOR;
	if (yych == '\n') goto yy28;
	goto yy7;
yy26:
	yych = *++YYCURSOR;
	if (yych <= '/') goto yy7;
	if (yych <= '9') goto yy29;
	goto yy7;
yy27:
	yych = *++YYCURSOR;
	if (yych <= '/') goto yy7;
	if (yych <= '3') goto yy29;
	goto yy7;
yy28:
	++YYCURSOR;
	y1 = yyt1;
	z1 = yyt2;
	y2 = yyt2;
	y2 -= 15;
	m1 = yyt2;
	m1 -= 14;
	m2 = yyt2;
	m2 -= 12;
	d1 = yyt2;
	d1 -= 11;
	d2 = yyt2;
	d2 -= 9;
	h1 = yyt2;
	h1 -= 8;
	h2 = yyt2;
	h2 -= 6;
	M1 = yyt2;
	M1 -= 5;
	M2 = yyt2;
	M2 -= 3;
	s1 = yyt2;
	s1 -= 2;
	s2 = yyt2;
	z2 = YYCURSOR;
	z2 -= 1;
	{
        OUT("year: ",    y1, y2);
        OUT("month: ",   m1, m2);
        OUT("day: ",     d1, d2);
        OUT("hours: ",   h1, h2);
        OUT("minutes: ", M1, M2);
        OUT("seconds: ", s1, s2);
        OUT("tz: ",      z1, z2);
        OUTC('\n');
        goto loop;
    }
yy29:
	yych = *++YYCURSOR;
	if (yych != ':') goto yy7;
	yych = *++YYCURSOR;
	if (yych <= '/') goto yy7;
	if (yych >= '6') goto yy7;
	yych = *++YYCURSOR;
	if (yych <= '/') goto yy7;
	if (yych <= '9') goto yy25;
	goto yy7;
}

}

#undef YYCURSOR
#undef YYMARKER
#undef YYTOKEN
#undef TLP_CLEAR

#define YYCURSOR in->cur
#define YYMARKER in->mar
#define YYLIMIT in->lim
#define YYTOKEN in->tok
#define TLP_CLEAR() do { \
    in->tlp.next = in->tlp.head; \
     \
} while (0)

int lex_buffered_eof(input_t *in) {
    const char* M1;const char* M2;const char* d1;const char* d2;const char* h1;const char* h2;const char* m1;const char* m2;const char* s1;const char* s2;const char* y1;const char* y2;const char* z1;const char* z2;
    
    long count = 0;
loop:
    in->tok = in->cur;
    
{
	char yych;
yyFillLabel0:
	yych = *YYCURSOR;
	switch (yych) {
		case '0':
			in->yyt1 = YYCURSOR;
			goto yy33;
		case '1':
		case '2':
		case '3':
		case '4':
		case '5':
		case '6':
		case '7':
		case '8':
		case '9':
			in->yyt1 = YYCURSOR;
			goto yy34;
		default:
			if (YYLIMIT <= YYCURSOR) {
				if (fill_buffered_eof(in) == 0) goto yyFillLabel0;
				goto yy69;
			}
			goto yy31;
	}
yy31:
	++YYCURSOR;
yy32:
	{ return -1; }
yy33:
	YYMARKER = ++YYCURSOR;
yyFillLabel1:
	yych = *YYCURSOR;
	switch (yych) {
		case '0':
		case '1':
		case '2':
		case '3':
		case '4':
		case '5':
		case '6':
		case '7':
		case '8':
		case '9': goto yy35;
		default:
			if (YYLIMIT <= YYCURSOR) {
				if (fill_buffered_eof(in) == 0) goto yyFillLabel1;
			}
			goto yy32;
	}
yy34:
	YYMARKER = ++YYCURSOR;
yyFillLabel2:
	yych = *YYCURSOR;
	switch (yych) {
		case '0':
		case '1':
		case '2':
		case '3':
		case '4':
		case '5':
		case '6':
		case '7':
		case '8':
		case '9': goto yy37;
		default:
			if (YYLIMIT <= YYCURSOR) {
				if (fill_buffered_eof(in) == 0) goto yyFillLabel2;
			}
			goto yy32;
	}
yy35:
	++YYCURSOR;
yyFillLabel3:
	yych = *YYCURSOR;
	switch (yych) {
		case '0':
		case '1':
		case '2':
		case '3':
		case '4':
		case '5':
		case '6':
		case '7':
		case '8':
		case '9': goto yy38;
		default:
			if (YYLIMIT <= YYCURSOR) {
				if (fill_buffered_eof(in) == 0) goto yyFillLabel3;
			}
			goto yy36;
	}
yy36:
	YYCURSOR = YYMARKER;
	goto yy32;
yy37:
	++YYCURSOR;
yyFillLabel4:
	yych = *YYCURSOR;
	switch (yych) {
		case '0':
		case '1':
		case '2':
		case '3':
		case '4':
		case '5':
		case '6':
		case '7':
		case '8':
		case '9': goto yy39;
		default:
			if (YYLIMIT <= YYCURSOR) {
				if (fill_buffered_eof(in) == 0) goto yyFillLabel4;
			}
			goto yy36;
	}
yy38:
	++YYCURSOR;
yyFillLabel5:
	yych = *YYCURSOR;
	switch (yych) {
		case '0':
		case '1':
		case '2':
		case '3':
		case '4':
		case '5':
		case '6':
		case '7':
		case '8':
		case '9': goto yy40;
		default:
			if (YYLIMIT <= YYCURSOR) {
				if (fill_buffered_eof(in) == 0) goto yyFillLabel5;
			}
			goto yy36;
	}
yy39:
	++YYCURSOR;
yyFillLabel6:
	yych = *YYCURSOR;
	switch (yych) {
		case '0':
		case '1':
		case '2':
		case '3':
		case '4':
		case '5':
		case '6':
		case '7':
		case '8':
		case '9': goto yy41;
		default:
			if (YYLIMIT <= YYCURSOR) {
				if (fill_buffered_eof(in) == 0) goto yyFillLabel6;
			}
			goto yy36;
	}
yy40:
	++YYCURSOR;
yyFillLabel7:
	yych = *YYCURSOR;
	switch (yych) {
		case '-': goto yy42;
		default:
			if (YYLIMIT <= YYCURSOR) {
				if (fill_buffered_eof(in) == 0) goto yyFillLabel7;
			}
			goto yy36;
	}
yy41:
	++YYCURSOR;
yyFillLabel8:
	yych = *YYCURSOR;
	switch (yych) {
		case '-': goto yy42;
		case '0':
		case '1':
		case '2':
		case '3':
		case '4':
		case '5':
		case '6':
		case '7':
		case '8':
		case '9': goto yy41;
		default:
			if (YYLIMIT <= YYCURSOR) {
				if (fill_buffered_eof(in) == 0) goto yyFillLabel8;
			}
			goto yy36;
	}
yy42:
	++YYCURSOR;
yyFillLabel9:
	yych = *YYCURSOR;
	switch (yych) {
		case '0': goto yy43;
		case '1': goto yy44;
		default:
			if (YYLIMIT <= YYCURSOR) {
				if (fill_buffered_eof(in) == 0) goto yyFillLabel9;
			}
			goto yy36;
	}
yy43:
	++YYCURSOR;
yyFillLabel10:
	yych = *YYCURSOR;
	switch (yych) {
		case '1':
		case '2':
		case '3':
		case '4':
		case '5':
		case '6':
		case '7':
		case '8':
		case '9': goto yy45;
		default:
			if (YYLIMIT <= YYCURSOR) {
				if (fill_buffered_eof(in) == 0) goto yyFillLabel10;
			}
			goto yy36;
	}
yy44:
	++YYCURSOR;
yyFillLabel11:
	yych = *YYCURSOR;
	switch (yych) {
		case '0':
		case '1':
		case '2': goto yy45;
		default:
			if (YYLIMIT <= YYCURSOR) {
				if (fill_buffered_eof(in) == 0) goto yyFillLabel11;
			}
			goto yy36;
	}
yy45:
	++YYCURSOR;
yyFillLabel12:
	yych = *YYCURSOR;
	switch (yych) {
		case '-': goto yy46;
		default:
			if (YYLIMIT <= YYCURSOR) {
				if (fill_buffered_eof(in) == 0) goto yyFillLabel12;
			}
			goto yy36;
	}
yy46:
	++YYCURSOR;
yyFillLabel13:
	yych = *YYCURSOR;
	switch (yych) {
		case '0': goto yy47;
		case '1':
		case '2': goto yy48;
		case '3': goto yy49;
		default:
			if (YYLIMIT <= YYCURSOR) {
				if (fill_buffered_eof(in) == 0) goto yyFillLabel13;
			}
			goto yy36;
	}
yy47:
	++YYCURSOR;
yyFillLabel14:
	yych = *YYCURSOR;
	switch (yych) {
		case '1':
		case '2':
		case '3':
		case '4':
		case '5':
		case '6':
		case '7':
		case '8':
		case '9': goto yy50;
		default:
			if (YYLIMIT <= YYCURSOR) {
				if (fill_buffered_eof(in) == 0) goto yyFillLabel14;
			}
			goto yy36;
	}
yy48:
	++YYCURSOR;
yyFillLabel15:
	yych = *YYCURSOR;
	switch (yych) {
		case '0':
		case '1':
		case '2':
		case '3':
		case '4':
		case '5':
		case '6':
		case '7':
		case '8':
		case '9': goto yy50;
		default:
			if (YYLIMIT <= YYCURSOR) {
				if (fill_buffered_eof(in) == 0) goto yyFillLabel15;
			}
			goto yy36;
	}
yy49:
	++YYCURSOR;
yyFillLabel16:
	yych = *YYCURSOR;
	switch (yych) {
		case '0':
		case '1': goto yy50;
		default:
			if (YYLIMIT <= YYCURSOR) {
				if (fill_buffered_eof(in) == 0) goto yyFillLabel16;
			}
			goto yy36;
	}
yy50:
	++YYCURSOR;
yyFillLabel17:
	yych = *YYCURSOR;
	switch (yych) {
		case 'T': goto yy51;
		default:
			if (YYLIMIT <= YYCURSOR) {
				if (fill_buffered_eof(in) == 0) goto yyFillLabel17;
			}
			goto yy36;
	}
yy51:
	++YYCURSOR;
yyFillLabel18:
	yych = *YYCURSOR;
	switch (yych) {
		case '0':
		case '1': goto yy52;
		case '2': goto yy53;
		default:
			if (YYLIMIT <= YYCURSOR) {
				if (fill_buffered_eof(in) == 0) goto yyFillLabel18;
			}
			goto yy36;
	}
yy52:
	++YYCURSOR;
yyFillLabel19:
	yych = *YYCURSOR;
	switch (yych) {
		case '0':
		case '1':
		case '2':
		case '3':
		case '4':
		case '5':
		case '6':
		case '7':
		case '8':
		case '9': goto yy54;
		default:
			if (YYLIMIT <= YYCURSOR) {
				if (fill_buffered_eof(in) == 0) goto yyFillLabel19;
			}
			goto yy36;
	}
yy53:
	++YYCURSOR;
yyFillLabel20:
	yych = *YYCURSOR;
	switch (yych) {
		case '0':
		case '1':
		case '2':
		case '3': goto yy54;
		default:
			if (YYLIMIT <= YYCURSOR) {
				if (fill_buffered_eof(in) == 0) goto yyFillLabel20;
			}
			goto yy36;
	}
yy54:
	++YYCURSOR;
yyFillLabel21:
	yych = *YYCURSOR;
	switch (yych) {
		case ':': goto yy55;
		default:
			if (YYLIMIT <= YYCURSOR) {
				if (fill_buffered_eof(in) == 0) goto yyFillLabel21;
			}
			goto yy36;
	}
yy55:
	++YYCURSOR;
yyFillLabel22:
	yych = *YYCURSOR;
	switch (yych) {
		case '0':
		case '1':
		case '2':
		case '3':
		case '4':
		case '5': goto yy56;
		default:
			if (YYLIMIT <= YYCURSOR) {
				if (fill_buffered_eof(in) == 0) goto yyFillLabel22;
			}
			goto yy36;
	}
yy56:
	++YYCURSOR;
yyFillLabel23:
	yych = *YYCURSOR;
	switch (yych) {
		case '0':
		case '1':
		case '2':
		case '3':
		case '4':
		case '5':
		case '6':
		case '7':
		case '8':
		case '9': goto yy57;
		default:
			if (YYLIMIT <= YYCURSOR) {
				if (fill_buffered_eof(in) == 0) goto yyFillLabel23;
			}
			goto yy36;
	}
yy57:
	++YYCURSOR;
yyFillLabel24:
	yych = *YYCURSOR;
	switch (yych) {
		case ':': goto yy58;
		default:
			if (YYLIMIT <= YYCURSOR) {
				if (fill_buffered_eof(in) == 0) goto yyFillLabel24;
			}
			goto yy36;
	}
yy58:
	++YYCURSOR;
yyFillLabel25:
	yych = *YYCURSOR;
	switch (yych) {
		case '0':
		case '1':
		case '2':
		case '3':
		case '4':
		case '5': goto yy59;
		default:
			if (YYLIMIT <= YYCURSOR) {
				if (fill_buffered_eof(in) == 0) goto yyFillLabel25;
			}
			goto yy36;
	}
yy59:
	++YYCURSOR;
yyFillLabel26:
	yych = *YYCURSOR;
	switch (yych) {
		case '0':
		case '1':
		case '2':
		case '3':
		case '4':
		case '5':
		case '6':
		case '7':
		case '8':
		case '9': goto yy60;
		default:
			if (YYLIMIT <= YYCURSOR) {
				if (fill_buffered_eof(in) == 0) goto yyFillLabel26;
			}
			goto yy36;
	}
yy60:
	++YYCURSOR;
yyFillLabel27:
	yych = *YYCURSOR;
	switch (yych) {
		case '+':
		case '-':
			in->yyt2 = YYCURSOR;
			goto yy61;
		case 'Z':
			in->yyt2 = YYCURSOR;
			goto yy62;
		default:
			if (YYLIMIT <= YYCURSOR) {
				if (fill_buffered_eof(in) == 0) goto yyFillLabel27;
			}
			goto yy36;
	}
yy61:
	++YYCURSOR;
yyFillLabel28:
	yych = *YYCURSOR;
	switch (yych) {
		case '0':
		case '1': goto yy63;
		case '2': goto yy64;
		default:
			if (YYLIMIT <= YYCURSOR) {
				if (fill_buffered_eof(in) == 0) goto yyFillLabel28;
			}
			goto yy36;
	}
yy62:
	++YYCURSOR;
yyFillLabel29:
	yych = *YYCURSOR;
	switch (yych) {
		case '\n': goto yy65;
		default:
			if (YYLIMIT <= YYCURSOR) {
				if (fill_buffered_eof(in) == 0) goto yyFillLabel29;
			}
			goto yy36;
	}
yy63:
	++YYCURSOR;
yyFillLabel30:
	yych = *YYCURSOR;
	switch (yych) {
		case '0':
		case '1':
		case '2':
		case '3':
		case '4':
		case '5':
		case '6':
		case '7':
		case '8':
		case '9': goto yy66;
		default:
			if (YYLIMIT <= YYCURSOR) {
				if (fill_buffered_eof(in) == 0) goto yyFillLabel30;
			}
			goto yy36;
	}
yy64:
	++YYCURSOR;
yyFillLabel31:
	yych = *YYCURSOR;
	switch (yych) {
		case '0':
		case '1':
		case '2':
		case '3': goto yy66;
		default:
			if (YYLIMIT <= YYCURSOR) {
				if (fill_buffered_eof(in) == 0) goto yyFillLabel31;
			}
			goto yy36;
	}
yy65:
	++YYCURSOR;
	y1 = in->yyt1;
	z1 = in->yyt2;
	y2 = in->yyt2;
	y2 -= 15;
	m1 = in->yyt2;
	m1 -= 14;
	m2 = in->yyt2;
	m2 -= 12;
	d1 = in->yyt2;
	d1 -= 11;
	d2 = in->yyt2;
	d2 -= 9;
	h1 = in->yyt2;
	h1 -= 8;
	h2 = in->yyt2;
	h2 -= 6;
	M1 = in->yyt2;
	M1 -= 5;
	M2 = in->yyt2;
	M2 -= 3;
	s1 = in->yyt2;
	s1 -= 2;
	s2 = in->yyt2;
	z2 = YYCURSOR;
	z2 -= 1;
	{
        OUT("year: ",    y1, y2);
        OUT("month: ",   m1, m2);
        OUT("day: ",     d1, d2);
        OUT("hours: ",   h1, h2);
        OUT("minutes: ", M1, M2);
        OUT("seconds: ", s1, s2);
        OUT("tz: ",      z1, z2);
        OUTC('\n');
        goto loop;
    }
yy66:
	++YYCURSOR;
yyFillLabel32:
	yych = *YYCURSOR;
	switch (yych) {
		case ':': goto yy67;
		default:
			if (YYLIMIT <= YYCURSOR) {
				if (fill_buffered_eof(in) == 0) goto yyFillLabel32;
			}
			goto yy36;
	}
yy67:
	++YYCURSOR;
yyFillLabel33:
	yych = *YYCURSOR;
	switch (yych) {
		case '0':
		case '1':
		case '2':
		case '3':
		case '4':
		case '5': goto yy68;
		default:
			if (YYLIMIT <= YYCURSOR) {
				if (fill_buffered_eof(in) == 0) goto yyFillLabel33;
			}
			goto yy36;
	}
yy68:
	++YYCURSOR;
yyFillLabel34:
	yych = *YYCURSOR;
	switch (yych) {
		case '0':
		case '1':
		case '2':
		case '3':
		case '4':
		case '5':
		case '6':
		case '7':
		case '8':
		case '9': goto yy62;
		default:
			if (YYLIMIT <= YYCURSOR) {
				if (fill_buffered_eof(in) == 0) goto yyFillLabel34;
			}
			goto yy36;
	}
yy69:
	{ return count; }
}

}

int lex_buffered_scc(input_t *in) {
    const char* M1;const char* M2;const char* d1;const char* d2;const char* h1;const char* h2;const char* m1;const char* m2;const char* s1;const char* s2;const char* y1;const char* y2;const char* z1;const char* z2;
    
    long count = 0;
loop:
    in->tok = in->cur;
    
{
	char yych;
	static const unsigned char yybm[256] = {
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		128, 128, 128, 128, 128, 128, 128, 128,
		128, 128,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0
	};
	if ((YYLIMIT - YYCURSOR) < 26) if (fill_buffered_scc(in, 26) != 0) return -2;
	yych = *YYCURSOR;
	if (yych <= 0x00) goto yy71;
	if (yych <= '/') goto yy72;
	if (yych <= '0') {
		in->yyt1 = YYCURSOR;
		goto yy74;
	}
	if (yych <= '9') {
		in->yyt1 = YYCURSOR;
		goto yy75;
	}
	goto yy72;
yy71:
	++YYCURSOR;
	{ return count; }
yy72:
	++YYCURSOR;
yy73:
	{ return -1; }
yy74:
	yych = *(YYMARKER = ++YYCURSOR);
	if (yych <= '/') goto yy73;
	if (yych <= '9') goto yy76;
	goto yy73;
yy75:
	yych = *(YYMARKER = ++YYCURSOR);
	if (yych <= '/') goto yy73;
	if (yych <= '9') goto yy78;
	goto yy73;
yy76:
	yych = *++YYCURSOR;
	if (yych <= '/') goto yy77;
	if (yych <= '9') goto yy79;
yy77:
	YYCURSOR = YYMARKER;
	goto yy73;
yy78:
	yych = *++YYCURSOR;
	if (yych <= '/') goto yy77;
	if (yych <= '9') goto yy80;
	goto yy77;
yy79:
	yych = *++YYCURSOR;
	if (yych <= '/') goto yy77;
	if (yych <= '9') goto yy81;
	goto yy77;
yy80:
	yych = *++YYCURSOR;
	if (yybm[0+yych] & 128) goto yy82;
	goto yy77;
yy81:
	yych = *++YYCURSOR;
	if (yych == '-') goto yy83;
	goto yy77;
yy82:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 22) if (fill_buffered_scc(in, 22) != 0) return -2;
	yych = *YYCURSOR;
	if (yybm[0+yych] & 128) goto yy82;
	if (yych != '-') goto yy77;
yy83:
	yych = *++YYCURSOR;
	if (yych <= '/') goto yy77;
	if (yych <= '0') goto yy84;
	if (yych <= '1') goto yy85;
	goto yy77;
yy84:
	yych = *++YYCURSOR;
	if (yych <= '0') goto yy77;
	if (yych <= '9') goto yy86;
	goto yy77;
yy85:
	yych = *++YYCURSOR;
	if (yych <= '/') goto yy77;
	if (yych >= '3') goto yy77;
yy86:
	yych = *++YYCURSOR;
	if (yych != '-') goto yy77;
	yych = *++YYCURSOR;
	if (yych <= '/') goto yy77;
	if (yych <= '0') goto yy87;
	if (yych <= '2') goto yy88;
	if (yych <= '3') goto yy89;
	goto yy77;
yy87:
	yych = *++YYCURSOR;
	if (yych <= '0') goto yy77;
	if (yych <= '9') goto yy90;
	goto yy77;
yy88:
	yych = *++YYCURSOR;
	if (yych <= '/') goto yy77;
	if (yych <= '9') goto yy90;
	goto yy77;
yy89:
	yych = *++YYCURSOR;
	if (yych <= '/') goto yy77;
	if (yych >= '2') goto yy77;
yy90:
	yych = *++YYCURSOR;
	if (yych != 'T') goto yy77;
	yych = *++YYCURSOR;
	if (yych <= '/') goto yy77;
	if (yych <= '1') goto yy91;
	if (yych <= '2') goto yy92;
	goto yy77;
yy91:
	yych = *++YYCURSOR;
	if (yych <= '/') goto yy77;
	if (yych <= '9') goto yy93;
	goto yy77;
yy92:
	yych = *++YYCURSOR;
	if (yych <= '/') goto yy77;
	if (yych >= '4') goto yy77;
yy93:
	yych = *++YYCURSOR;
	if (yych != ':') goto yy77;
	yych = *++YYCURSOR;
	if (yych <= '/') goto yy77;
	if (yych >= '6') goto yy77;
	yych = *++YYCURSOR;
	if (yych <= '/') goto yy77;
	if (yych >= ':') goto yy77;
	yych = *++YYCURSOR;
	if (yych != ':') goto yy77;
	yych = *++YYCURSOR;
	if (yych <= '/') goto yy77;
	if (yych >= '6') goto yy77;
	yych = *++YYCURSOR;
	if (yych <= '/') goto yy77;
	if (yych >= ':') goto yy77;
	yych = *++YYCURSOR;
	if (yych <= ',') {
		if (yych != '+') goto yy77;
		in->yyt2 = YYCURSOR;
	} else {
		if (yych <= '-') {
			in->yyt2 = YYCURSOR;
			goto yy94;
		}
		if (yych == 'Z') {
			in->yyt2 = YYCURSOR;
			goto yy95;
		}
		goto yy77;
	}
yy94:
	yych = *++YYCURSOR;
	if (yych <= '/') goto yy77;
	if (yych <= '1') goto yy96;
	if (yych <= '2') goto yy97;
	goto yy77;
yy95:
	yych = *++YYCURSOR;
	if (yych == '\n') goto yy98;
	goto yy77;
yy96:
	yych = *++YYCURSOR;
	if (yych <= '/') goto yy77;
	if (yych <= '9') goto yy99;
	goto yy77;
yy97:
	yych = *++YYCURSOR;
	if (yych <= '/') goto yy77;
	if (yych <= '3') goto yy99;
	goto yy77;
yy98:
	++YYCURSOR;
	y1 = in->yyt1;
	z1 = in->yyt2;
	y2 = in->yyt2;
	y2 -= 15;
	m1 = in->yyt2;
	m1 -= 14;
	m2 = in->yyt2;
	m2 -= 12;
	d1 = in->yyt2;
	d1 -= 11;
	d2 = in->yyt2;
	d2 -= 9;
	h1 = in->yyt2;
	h1 -= 8;
	h2 = in->yyt2;
	h2 -= 6;
	M1 = in->yyt2;
	M1 -= 5;
	M2 = in->yyt2;
	M2 -= 3;
	s1 = in->yyt2;
	s1 -= 2;
	s2 = in->yyt2;
	z2 = YYCURSOR;
	z2 -= 1;
	{
        OUT("year: ",    y1, y2);
        OUT("month: ",   m1, m2);
        OUT("day: ",     d1, d2);
        OUT("hours: ",   h1, h2);
        OUT("minutes: ", M1, M2);
        OUT("seconds: ", s1, s2);
        OUT("tz: ",      z1, z2);
        OUTC('\n');
        goto loop;
    }
yy99:
	yych = *++YYCURSOR;
	if (yych != ':') goto yy77;
	yych = *++YYCURSOR;
	if (yych <= '/') goto yy77;
	if (yych >= '6') goto yy77;
	yych = *++YYCURSOR;
	if (yych <= '/') goto yy77;
	if (yych <= '9') goto yy95;
	goto yy77;
}

}

#undef YYCURSOR
#undef YYMARKER
#undef YYLIMIT
#undef YYTOKEN
#undef TLP_CLEAR

#define FN_BENCH(suffix) \
void bench_##suffix::operator()( \
        benchmark::State &state, const char* input, long expected) const { \
    long count = 0; \
    for (auto _ : state) { \
        input_t in; \
        init_input_##suffix(&in, input); \
        count = lex_##suffix(&in); \
        free_input(&in); \
    } \
    if (count != expected) state.SkipWithError("error"); \
}
FN_BENCH(simple)
FN_BENCH(buffered_eof)
FN_BENCH(buffered_scc)
#undef FN_BENCH

#define FN_TEST(suffix) \
bool test_##suffix(const char* input, long expected) { \
    input_t in; \
    init_input_##suffix(&in, input); \
    long count = lex_##suffix(&in); \
    switch (count) { \
    default: \
        if (count != expected) { \
            fprintf(stderr, "wrong count, expected %ld, got %ld\n", expected, count); \
        } \
        break; \
    case -1: \
        fprintf(stderr, "syntax error\n"); \
        break; \
    case -2: \
        fprintf(stderr, "yyfill error\n"); \
        break; \
    } \
    free_input(&in); \
    return count == expected; \
}
FN_TEST(simple)
FN_TEST(buffered_eof)
FN_TEST(buffered_scc)
#undef FN_TEST


} // namespace re2c_submatch_05__datetime

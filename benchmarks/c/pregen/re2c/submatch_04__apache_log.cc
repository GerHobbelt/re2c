/* Generated by re2c */
#include "re2c/base.h"

namespace re2c_submatch_04__apache_log {





#define YYMAXFILL 2


struct input_t {
    FILE* file;
    char *buf;
    char *lim;
    char *cur;
    char *mar;
    char *tok;
    char *yyt1;
char *yyt10;
char *yyt11;
char *yyt12;
char *yyt13;
char *yyt14;
char *yyt15;
char *yyt2;
char *yyt3;
char *yyt4;
char *yyt5;
char *yyt6;
char *yyt7;
char *yyt8;
char *yyt9;

    
    taglistpool_t tlp;
    int eof;
};

static inline void free_input(input_t *in) {
    free(in->buf);
    taglistpool_free(&in->tlp);
    if (in->file) fclose(in->file);
}

static inline int fill_buffered_eof(input_t *in) {
    size_t free;
    if (in->eof) return 1;

    free = in->tok - in->buf;
    assert(free > 0);

    memmove(in->buf, in->tok, in->lim - in->tok);
    in->lim -= free;
    in->cur -= free;
    in->mar -= free;
    in->tok -= free;
    if (in->yyt1) in->yyt1 -= free;
if (in->yyt10) in->yyt10 -= free;
if (in->yyt11) in->yyt11 -= free;
if (in->yyt12) in->yyt12 -= free;
if (in->yyt13) in->yyt13 -= free;
if (in->yyt14) in->yyt14 -= free;
if (in->yyt15) in->yyt15 -= free;
if (in->yyt2) in->yyt2 -= free;
if (in->yyt3) in->yyt3 -= free;
if (in->yyt4) in->yyt4 -= free;
if (in->yyt5) in->yyt5 -= free;
if (in->yyt6) in->yyt6 -= free;
if (in->yyt7) in->yyt7 -= free;
if (in->yyt8) in->yyt8 -= free;
if (in->yyt9) in->yyt9 -= free;


    in->lim += fread(in->lim, 1, free, in->file);
    in->lim[0] = 0;

    if (in->lim < in->buf + SIZE) {
        in->eof = 1;
    }

    return 0;
}

static inline int fill_buffered_scc(input_t *in, size_t need) {
    size_t free;
    if (in->eof) return 1;

    free = in->tok - in->buf;
    assert(free >= need);

    memmove(in->buf, in->tok, in->lim - in->tok);
    in->lim -= free;
    in->cur -= free;
    in->mar -= free;
    in->tok -= free;
    if (in->yyt1) in->yyt1 -= free;
if (in->yyt10) in->yyt10 -= free;
if (in->yyt11) in->yyt11 -= free;
if (in->yyt12) in->yyt12 -= free;
if (in->yyt13) in->yyt13 -= free;
if (in->yyt14) in->yyt14 -= free;
if (in->yyt15) in->yyt15 -= free;
if (in->yyt2) in->yyt2 -= free;
if (in->yyt3) in->yyt3 -= free;
if (in->yyt4) in->yyt4 -= free;
if (in->yyt5) in->yyt5 -= free;
if (in->yyt6) in->yyt6 -= free;
if (in->yyt7) in->yyt7 -= free;
if (in->yyt8) in->yyt8 -= free;
if (in->yyt9) in->yyt9 -= free;


    in->lim += fread(in->lim, 1, free, in->file);

    if (in->lim < in->buf + SIZE) {
        in->eof = 1;
        memset(in->lim, 0, YYMAXFILL);
        in->lim += YYMAXFILL;
    }

    return 0;
}

static inline void init_input_simple(input_t *in, const char* fname) {
    FILE* f = fopen(fname, "rb");

    fseek(f, 0, SEEK_END);
    size_t flen = (size_t) ftell(f);
    fseek(f, 0, SEEK_SET);

    in->file = nullptr; // unused
    in->buf = (char*) malloc(flen + 1);
    in->lim = nullptr; // unused
    in->cur = in->mar = in->tok = in->buf;
    in->yyt1 = 0;
in->yyt10 = 0;
in->yyt11 = 0;
in->yyt12 = 0;
in->yyt13 = 0;
in->yyt14 = 0;
in->yyt15 = 0;
in->yyt2 = 0;
in->yyt3 = 0;
in->yyt4 = 0;
in->yyt5 = 0;
in->yyt6 = 0;
in->yyt7 = 0;
in->yyt8 = 0;
in->yyt9 = 0;

    
    taglistpool_init(&in->tlp);
    in->eof = 0; // unused

    fread(in->buf, 1, flen, f);
    in->buf[flen] = 0;

    fclose(f);
}

static inline void init_input_buffered_eof(input_t *in, const char* fname) {
    in->file = fopen(fname, "rb");
    in->buf = (char*) malloc(SIZE + 1);
    in->lim = in->buf + SIZE;
    in->cur = in->lim;
    in->mar = in->lim;
    in->tok = in->lim;
    in->yyt1 = 0;
in->yyt10 = 0;
in->yyt11 = 0;
in->yyt12 = 0;
in->yyt13 = 0;
in->yyt14 = 0;
in->yyt15 = 0;
in->yyt2 = 0;
in->yyt3 = 0;
in->yyt4 = 0;
in->yyt5 = 0;
in->yyt6 = 0;
in->yyt7 = 0;
in->yyt8 = 0;
in->yyt9 = 0;

    
    taglistpool_init(&in->tlp);
    in->eof = 0;
    fill_buffered_eof(in);
}

static inline void init_input_buffered_scc(input_t *in, const char* fname) {
    in->file = fopen(fname, "rb");
    in->buf = (char*) malloc(SIZE + YYMAXFILL);
    in->lim = in->buf + SIZE;
    in->cur = in->lim;
    in->mar = in->lim;
    in->tok = in->lim;
    in->yyt1 = 0;
in->yyt10 = 0;
in->yyt11 = 0;
in->yyt12 = 0;
in->yyt13 = 0;
in->yyt14 = 0;
in->yyt15 = 0;
in->yyt2 = 0;
in->yyt3 = 0;
in->yyt4 = 0;
in->yyt5 = 0;
in->yyt6 = 0;
in->yyt7 = 0;
in->yyt8 = 0;
in->yyt9 = 0;

    
    taglistpool_init(&in->tlp);
    in->eof = 0;
}

#define YYCURSOR cur
#define YYMARKER mar
#define YYTOKEN tok
#define TLP_CLEAR() do { \
    in->tlp.next = in->tlp.head; \
     \
} while (0)

int lex_simple(input_t *in) {
    char *cur = in->buf, *mar, *tok;
    (void) tok; // may be unused
    char *yyt1;
char *yyt10;
char *yyt11;
char *yyt12;
char *yyt13;
char *yyt14;
char *yyt15;
char *yyt2;
char *yyt3;
char *yyt4;
char *yyt5;
char *yyt6;
char *yyt7;
char *yyt8;
char *yyt9;

    
    const char* a1;const char* a2;const char* d1;const char* d2;const char* g1;const char* g2;const char* h1;const char* h2;const char* i1;const char* i2;const char* r1;const char* r2;const char* s1;const char* s2;const char* u1;const char* u2;const char* z1;const char* z2;
    
    long count = 0;
loop:
    tok = cur;
    
{
	char yych;
	static const unsigned char yybm[256] = {
		  0,  96,  96,  96,  96,  96,  96,  96,
		 96, 104,   0,  96,  96,  96,  96,  96,
		 96,  96,  96,  96,  96,  96,  96,  96,
		 96,  96,  96,  96,  96,  96,  96,  96,
		104,  96,  32,  96,  96,  96,  96,  96,
		 96,  96,  96,  96,  96,  96, 112,  96,
		240, 240, 240, 240, 240, 240, 240, 240,
		240, 240,  96,  96,  96,  96,  96,  96,
		 96,  96,  96,  96,  96,  96,  96,  96,
		 96,  96,  96,  96,  96,  96,  96,  96,
		 96,  96,  96,  96,  96,  96,  96,  96,
		 96,  96,  96,  96,  96,  64,  96,  96,
		 96,  96,  96,  96,  96,  96,  96,  96,
		 96,  96,  96,  96,  96,  96,  96,  96,
		 96,  96,  96,  96,  96,  96,  96,  96,
		 96,  96,  96,  96,  96,  96,  96,  96,
		 96,  96,  96,  96,  96,  96,  96,  96,
		 96,  96,  96,  96,  96,  96,  96,  96,
		 96,  96,  96,  96,  96,  96,  96,  96,
		 96,  96,  96,  96,  96,  96,  96,  96,
		 96,  96,  96,  96,  96,  96,  96,  96,
		 96,  96,  96,  96,  96,  96,  96,  96,
		 96,  96,  96,  96,  96,  96,  96,  96,
		 96,  96,  96,  96,  96,  96,  96,  96,
		 96,  96,  96,  96,  96,  96,  96,  96,
		 96,  96,  96,  96,  96,  96,  96,  96,
		 96,  96,  96,  96,  96,  96,  96,  96,
		 96,  96,  96,  96,  96,  96,  96,  96,
		 96,  96,  96,  96,  96,  96,  96,  96,
		 96,  96,  96,  96,  96,  96,  96,  96,
		 96,  96,  96,  96,  96,  96,  96,  96,
		 96,  96,  96,  96,  96,  96,  96,  96
	};
	yych = *YYCURSOR;
	if (yych <= '.') {
		if (yych <= 0x00) goto yy1;
		if (yych <= '-') goto yy2;
		yyt1 = YYCURSOR;
		goto yy4;
	} else {
		if (yych <= '/') goto yy2;
		if (yych <= '9') {
			yyt1 = YYCURSOR;
			goto yy4;
		}
		goto yy2;
	}
yy1:
	++YYCURSOR;
	{ return count; }
yy2:
	++YYCURSOR;
yy3:
	{ return -1; }
yy4:
	yych = *(YYMARKER = ++YYCURSOR);
	if (yybm[0+yych] & 16) goto yy7;
	if (yych == '\t') {
		yyt2 = YYCURSOR;
		goto yy5;
	}
	if (yych != ' ') goto yy3;
	yyt2 = YYCURSOR;
yy5:
	yych = *++YYCURSOR;
	if (yybm[0+yych] & 8) goto yy5;
	if (yych == '-') goto yy8;
yy6:
	YYCURSOR = YYMARKER;
	goto yy3;
yy7:
	yych = *++YYCURSOR;
	if (yybm[0+yych] & 16) goto yy7;
	if (yych == '\t') {
		yyt2 = YYCURSOR;
		goto yy5;
	}
	if (yych == ' ') {
		yyt2 = YYCURSOR;
		goto yy5;
	}
	goto yy6;
yy8:
	yych = *++YYCURSOR;
	if (yych == '\t') {
		yyt3 = YYCURSOR;
		goto yy9;
	}
	if (yych != ' ') goto yy6;
	yyt3 = YYCURSOR;
yy9:
	yych = *++YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy9;
		goto yy6;
	} else {
		if (yych <= ' ') goto yy9;
		if (yych != '-') goto yy6;
	}
	yych = *++YYCURSOR;
	if (yych == '\t') {
		yyt4 = YYCURSOR;
		goto yy10;
	}
	if (yych != ' ') goto yy6;
	yyt4 = YYCURSOR;
yy10:
	yych = *++YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy10;
		goto yy6;
	} else {
		if (yych <= ' ') goto yy10;
		if (yych != '[') goto yy6;
		yyt5 = YYCURSOR;
	}
	yych = *++YYCURSOR;
	if (yych == ']') goto yy6;
	goto yy12;
yy11:
	yych = *++YYCURSOR;
yy12:
	if (yybm[0+yych] & 32) goto yy11;
	if (yych <= '\n') goto yy6;
	yych = *++YYCURSOR;
	if (yych == '\t') {
		yyt6 = YYCURSOR;
		goto yy13;
	}
	if (yych != ' ') goto yy6;
	yyt6 = YYCURSOR;
yy13:
	yych = *++YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy13;
		goto yy6;
	} else {
		if (yych <= ' ') goto yy13;
		if (yych != '"') goto yy6;
		yyt7 = YYCURSOR;
	}
	yych = *++YYCURSOR;
	if (yych == '"') goto yy6;
	goto yy15;
yy14:
	yych = *++YYCURSOR;
yy15:
	if (yybm[0+yych] & 64) goto yy14;
	if (yych <= '\n') goto yy6;
	yych = *++YYCURSOR;
	if (yych == '\t') {
		yyt8 = YYCURSOR;
		goto yy16;
	}
	if (yych != ' ') goto yy6;
	yyt8 = YYCURSOR;
yy16:
	yych = *++YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy16;
		goto yy6;
	} else {
		if (yych <= ' ') goto yy16;
		if (yych <= '/') goto yy6;
		if (yych >= ':') goto yy6;
		yyt9 = YYCURSOR;
	}
yy17:
	yych = *++YYCURSOR;
	if (yybm[0+yych] & 128) goto yy17;
	if (yych == '\t') {
		yyt10 = YYCURSOR;
		goto yy18;
	}
	if (yych != ' ') goto yy6;
	yyt10 = YYCURSOR;
yy18:
	yych = *++YYCURSOR;
	if (yych <= ' ') {
		if (yych == '\t') goto yy18;
		if (yych <= 0x1F) goto yy6;
		goto yy18;
	} else {
		if (yych <= '-') {
			if (yych <= ',') goto yy6;
			yyt11 = YYCURSOR;
		} else {
			if (yych <= '/') goto yy6;
			if (yych <= '9') {
				yyt11 = YYCURSOR;
				goto yy19;
			}
			goto yy6;
		}
	}
	yych = *++YYCURSOR;
	if (yych == '\t') {
		yyt12 = YYCURSOR;
		goto yy20;
	}
	if (yych == ' ') {
		yyt12 = YYCURSOR;
		goto yy20;
	}
	goto yy6;
yy19:
	yych = *++YYCURSOR;
	if (yych <= 0x1F) {
		if (yych != '\t') goto yy6;
		yyt12 = YYCURSOR;
	} else {
		if (yych <= ' ') {
			yyt12 = YYCURSOR;
			goto yy20;
		}
		if (yych <= '/') goto yy6;
		if (yych <= '9') goto yy19;
		goto yy6;
	}
yy20:
	yych = *++YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy20;
		goto yy6;
	} else {
		if (yych <= ' ') goto yy20;
		if (yych != '"') goto yy6;
		yyt13 = YYCURSOR;
	}
yy21:
	yych = *++YYCURSOR;
	if (yych <= '\n') {
		if (yych <= 0x00) goto yy6;
		if (yych <= '\t') goto yy21;
		goto yy6;
	} else {
		if (yych != '"') goto yy21;
	}
	yych = *++YYCURSOR;
	if (yych == '\t') {
		yyt14 = YYCURSOR;
		goto yy22;
	}
	if (yych != ' ') goto yy6;
	yyt14 = YYCURSOR;
yy22:
	yych = *++YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy22;
		goto yy6;
	} else {
		if (yych <= ' ') goto yy22;
		if (yych != '"') goto yy6;
		yyt15 = YYCURSOR;
	}
yy23:
	yych = *++YYCURSOR;
	if (yych <= '\n') {
		if (yych <= 0x00) goto yy6;
		if (yych <= '\t') goto yy23;
		goto yy6;
	} else {
		if (yych != '"') goto yy23;
	}
	yych = *++YYCURSOR;
	if (yych != '\n') goto yy6;
	++YYCURSOR;
	h1 = yyt1;
	h2 = yyt2;
	i2 = yyt3;
	a2 = yyt4;
	d1 = yyt5;
	d2 = yyt6;
	r1 = yyt7;
	r2 = yyt8;
	s1 = yyt9;
	s2 = yyt10;
	z1 = yyt11;
	z2 = yyt12;
	u1 = yyt13;
	u2 = yyt14;
	g1 = yyt15;
	i1 = yyt3;
	i1 -= 1;
	a1 = yyt4;
	a1 -= 1;
	g2 = YYCURSOR;
	g2 -= 1;
	{
        OUT("host: ",     h1, h2);
        OUT("userid: ",   i1, i2);
        OUT("authuser: ", a1, a2);
        OUT("date: ",     d1, d2);
        OUT("request: ",  r1, r2);
        OUT("status: ",   s1, s2);
        OUT("size: ",     z1, z2);
        OUT("url: ",      u1, u2);
        OUT("agent: ",    g1, g2);
        OUTC('\n');
        goto loop;
    }
}

}

#undef YYCURSOR
#undef YYMARKER
#undef YYTOKEN
#undef TLP_CLEAR

#define YYCURSOR in->cur
#define YYMARKER in->mar
#define YYLIMIT in->lim
#define YYTOKEN in->tok
#define TLP_CLEAR() do { \
    in->tlp.next = in->tlp.head; \
     \
} while (0)

int lex_buffered_eof(input_t *in) {
    const char* a1;const char* a2;const char* d1;const char* d2;const char* g1;const char* g2;const char* h1;const char* h2;const char* i1;const char* i2;const char* r1;const char* r2;const char* s1;const char* s2;const char* u1;const char* u2;const char* z1;const char* z2;
    
    long count = 0;
loop:
    in->tok = in->cur;
    
{
	char yych;
yyFillLabel0:
	yych = *YYCURSOR;
	switch (yych) {
		case '.':
		case '0':
		case '1':
		case '2':
		case '3':
		case '4':
		case '5':
		case '6':
		case '7':
		case '8':
		case '9':
			in->yyt1 = YYCURSOR;
			goto yy27;
		default:
			if (YYLIMIT <= YYCURSOR) {
				if (fill_buffered_eof(in) == 0) goto yyFillLabel0;
				goto yy56;
			}
			goto yy25;
	}
yy25:
	++YYCURSOR;
yy26:
	{ return -1; }
yy27:
	YYMARKER = ++YYCURSOR;
yyFillLabel1:
	yych = *YYCURSOR;
	switch (yych) {
		case '\t':
		case ' ':
			in->yyt2 = YYCURSOR;
			goto yy28;
		case '.':
		case '0':
		case '1':
		case '2':
		case '3':
		case '4':
		case '5':
		case '6':
		case '7':
		case '8':
		case '9': goto yy30;
		default:
			if (YYLIMIT <= YYCURSOR) {
				if (fill_buffered_eof(in) == 0) goto yyFillLabel1;
			}
			goto yy26;
	}
yy28:
	++YYCURSOR;
yyFillLabel2:
	yych = *YYCURSOR;
	switch (yych) {
		case '\t':
		case ' ': goto yy28;
		case '-': goto yy31;
		default:
			if (YYLIMIT <= YYCURSOR) {
				if (fill_buffered_eof(in) == 0) goto yyFillLabel2;
			}
			goto yy29;
	}
yy29:
	YYCURSOR = YYMARKER;
	goto yy26;
yy30:
	++YYCURSOR;
yyFillLabel3:
	yych = *YYCURSOR;
	switch (yych) {
		case '\t':
		case ' ':
			in->yyt2 = YYCURSOR;
			goto yy28;
		case '.':
		case '0':
		case '1':
		case '2':
		case '3':
		case '4':
		case '5':
		case '6':
		case '7':
		case '8':
		case '9': goto yy30;
		default:
			if (YYLIMIT <= YYCURSOR) {
				if (fill_buffered_eof(in) == 0) goto yyFillLabel3;
			}
			goto yy29;
	}
yy31:
	++YYCURSOR;
yyFillLabel4:
	yych = *YYCURSOR;
	switch (yych) {
		case '\t':
		case ' ':
			in->yyt3 = YYCURSOR;
			goto yy32;
		default:
			if (YYLIMIT <= YYCURSOR) {
				if (fill_buffered_eof(in) == 0) goto yyFillLabel4;
			}
			goto yy29;
	}
yy32:
	++YYCURSOR;
yyFillLabel5:
	yych = *YYCURSOR;
	switch (yych) {
		case '\t':
		case ' ': goto yy32;
		case '-': goto yy33;
		default:
			if (YYLIMIT <= YYCURSOR) {
				if (fill_buffered_eof(in) == 0) goto yyFillLabel5;
			}
			goto yy29;
	}
yy33:
	++YYCURSOR;
yyFillLabel6:
	yych = *YYCURSOR;
	switch (yych) {
		case '\t':
		case ' ':
			in->yyt4 = YYCURSOR;
			goto yy34;
		default:
			if (YYLIMIT <= YYCURSOR) {
				if (fill_buffered_eof(in) == 0) goto yyFillLabel6;
			}
			goto yy29;
	}
yy34:
	++YYCURSOR;
yyFillLabel7:
	yych = *YYCURSOR;
	switch (yych) {
		case '\t':
		case ' ': goto yy34;
		case '[':
			in->yyt5 = YYCURSOR;
			goto yy35;
		default:
			if (YYLIMIT <= YYCURSOR) {
				if (fill_buffered_eof(in) == 0) goto yyFillLabel7;
			}
			goto yy29;
	}
yy35:
	++YYCURSOR;
yyFillLabel8:
	yych = *YYCURSOR;
	switch (yych) {
		case 0x00:
		case ']':
			if (YYLIMIT <= YYCURSOR) {
				if (fill_buffered_eof(in) == 0) goto yyFillLabel8;
			}
			goto yy29;
		default: goto yy37;
	}
yy36:
	++YYCURSOR;
yyFillLabel9:
	yych = *YYCURSOR;
yy37:
	switch (yych) {
		case 0x00:
		case '\n':
			if (YYLIMIT <= YYCURSOR) {
				if (fill_buffered_eof(in) == 0) goto yyFillLabel9;
			}
			goto yy29;
		case ']': goto yy38;
		default: goto yy36;
	}
yy38:
	++YYCURSOR;
yyFillLabel10:
	yych = *YYCURSOR;
	switch (yych) {
		case '\t':
		case ' ':
			in->yyt6 = YYCURSOR;
			goto yy39;
		default:
			if (YYLIMIT <= YYCURSOR) {
				if (fill_buffered_eof(in) == 0) goto yyFillLabel10;
			}
			goto yy29;
	}
yy39:
	++YYCURSOR;
yyFillLabel11:
	yych = *YYCURSOR;
	switch (yych) {
		case '\t':
		case ' ': goto yy39;
		case '"':
			in->yyt7 = YYCURSOR;
			goto yy40;
		default:
			if (YYLIMIT <= YYCURSOR) {
				if (fill_buffered_eof(in) == 0) goto yyFillLabel11;
			}
			goto yy29;
	}
yy40:
	++YYCURSOR;
yyFillLabel12:
	yych = *YYCURSOR;
	switch (yych) {
		case 0x00:
		case '"':
			if (YYLIMIT <= YYCURSOR) {
				if (fill_buffered_eof(in) == 0) goto yyFillLabel12;
			}
			goto yy29;
		default: goto yy42;
	}
yy41:
	++YYCURSOR;
yyFillLabel13:
	yych = *YYCURSOR;
yy42:
	switch (yych) {
		case 0x00:
		case '\n':
			if (YYLIMIT <= YYCURSOR) {
				if (fill_buffered_eof(in) == 0) goto yyFillLabel13;
			}
			goto yy29;
		case '"': goto yy43;
		default: goto yy41;
	}
yy43:
	++YYCURSOR;
yyFillLabel14:
	yych = *YYCURSOR;
	switch (yych) {
		case '\t':
		case ' ':
			in->yyt8 = YYCURSOR;
			goto yy44;
		default:
			if (YYLIMIT <= YYCURSOR) {
				if (fill_buffered_eof(in) == 0) goto yyFillLabel14;
			}
			goto yy29;
	}
yy44:
	++YYCURSOR;
yyFillLabel15:
	yych = *YYCURSOR;
	switch (yych) {
		case '\t':
		case ' ': goto yy44;
		case '0':
		case '1':
		case '2':
		case '3':
		case '4':
		case '5':
		case '6':
		case '7':
		case '8':
		case '9':
			in->yyt9 = YYCURSOR;
			goto yy45;
		default:
			if (YYLIMIT <= YYCURSOR) {
				if (fill_buffered_eof(in) == 0) goto yyFillLabel15;
			}
			goto yy29;
	}
yy45:
	++YYCURSOR;
yyFillLabel16:
	yych = *YYCURSOR;
	switch (yych) {
		case '\t':
		case ' ':
			in->yyt10 = YYCURSOR;
			goto yy46;
		case '0':
		case '1':
		case '2':
		case '3':
		case '4':
		case '5':
		case '6':
		case '7':
		case '8':
		case '9': goto yy45;
		default:
			if (YYLIMIT <= YYCURSOR) {
				if (fill_buffered_eof(in) == 0) goto yyFillLabel16;
			}
			goto yy29;
	}
yy46:
	++YYCURSOR;
yyFillLabel17:
	yych = *YYCURSOR;
	switch (yych) {
		case '\t':
		case ' ': goto yy46;
		case '-':
			in->yyt11 = YYCURSOR;
			goto yy47;
		case '0':
		case '1':
		case '2':
		case '3':
		case '4':
		case '5':
		case '6':
		case '7':
		case '8':
		case '9':
			in->yyt11 = YYCURSOR;
			goto yy48;
		default:
			if (YYLIMIT <= YYCURSOR) {
				if (fill_buffered_eof(in) == 0) goto yyFillLabel17;
			}
			goto yy29;
	}
yy47:
	++YYCURSOR;
yyFillLabel18:
	yych = *YYCURSOR;
	switch (yych) {
		case '\t':
		case ' ':
			in->yyt12 = YYCURSOR;
			goto yy49;
		default:
			if (YYLIMIT <= YYCURSOR) {
				if (fill_buffered_eof(in) == 0) goto yyFillLabel18;
			}
			goto yy29;
	}
yy48:
	++YYCURSOR;
yyFillLabel19:
	yych = *YYCURSOR;
	switch (yych) {
		case '\t':
		case ' ':
			in->yyt12 = YYCURSOR;
			goto yy49;
		case '0':
		case '1':
		case '2':
		case '3':
		case '4':
		case '5':
		case '6':
		case '7':
		case '8':
		case '9': goto yy48;
		default:
			if (YYLIMIT <= YYCURSOR) {
				if (fill_buffered_eof(in) == 0) goto yyFillLabel19;
			}
			goto yy29;
	}
yy49:
	++YYCURSOR;
yyFillLabel20:
	yych = *YYCURSOR;
	switch (yych) {
		case '\t':
		case ' ': goto yy49;
		case '"':
			in->yyt13 = YYCURSOR;
			goto yy50;
		default:
			if (YYLIMIT <= YYCURSOR) {
				if (fill_buffered_eof(in) == 0) goto yyFillLabel20;
			}
			goto yy29;
	}
yy50:
	++YYCURSOR;
yyFillLabel21:
	yych = *YYCURSOR;
	switch (yych) {
		case 0x00:
		case '\n':
			if (YYLIMIT <= YYCURSOR) {
				if (fill_buffered_eof(in) == 0) goto yyFillLabel21;
			}
			goto yy29;
		case '"': goto yy51;
		default: goto yy50;
	}
yy51:
	++YYCURSOR;
yyFillLabel22:
	yych = *YYCURSOR;
	switch (yych) {
		case '\t':
		case ' ':
			in->yyt14 = YYCURSOR;
			goto yy52;
		default:
			if (YYLIMIT <= YYCURSOR) {
				if (fill_buffered_eof(in) == 0) goto yyFillLabel22;
			}
			goto yy29;
	}
yy52:
	++YYCURSOR;
yyFillLabel23:
	yych = *YYCURSOR;
	switch (yych) {
		case '\t':
		case ' ': goto yy52;
		case '"':
			in->yyt15 = YYCURSOR;
			goto yy53;
		default:
			if (YYLIMIT <= YYCURSOR) {
				if (fill_buffered_eof(in) == 0) goto yyFillLabel23;
			}
			goto yy29;
	}
yy53:
	++YYCURSOR;
yyFillLabel24:
	yych = *YYCURSOR;
	switch (yych) {
		case 0x00:
		case '\n':
			if (YYLIMIT <= YYCURSOR) {
				if (fill_buffered_eof(in) == 0) goto yyFillLabel24;
			}
			goto yy29;
		case '"': goto yy54;
		default: goto yy53;
	}
yy54:
	++YYCURSOR;
yyFillLabel25:
	yych = *YYCURSOR;
	switch (yych) {
		case '\n': goto yy55;
		default:
			if (YYLIMIT <= YYCURSOR) {
				if (fill_buffered_eof(in) == 0) goto yyFillLabel25;
			}
			goto yy29;
	}
yy55:
	++YYCURSOR;
	h1 = in->yyt1;
	h2 = in->yyt2;
	i2 = in->yyt3;
	a2 = in->yyt4;
	d1 = in->yyt5;
	d2 = in->yyt6;
	r1 = in->yyt7;
	r2 = in->yyt8;
	s1 = in->yyt9;
	s2 = in->yyt10;
	z1 = in->yyt11;
	z2 = in->yyt12;
	u1 = in->yyt13;
	u2 = in->yyt14;
	g1 = in->yyt15;
	i1 = in->yyt3;
	i1 -= 1;
	a1 = in->yyt4;
	a1 -= 1;
	g2 = YYCURSOR;
	g2 -= 1;
	{
        OUT("host: ",     h1, h2);
        OUT("userid: ",   i1, i2);
        OUT("authuser: ", a1, a2);
        OUT("date: ",     d1, d2);
        OUT("request: ",  r1, r2);
        OUT("status: ",   s1, s2);
        OUT("size: ",     z1, z2);
        OUT("url: ",      u1, u2);
        OUT("agent: ",    g1, g2);
        OUTC('\n');
        goto loop;
    }
yy56:
	{ return count; }
}

}

int lex_buffered_scc(input_t *in) {
    const char* a1;const char* a2;const char* d1;const char* d2;const char* g1;const char* g2;const char* h1;const char* h2;const char* i1;const char* i2;const char* r1;const char* r2;const char* s1;const char* s2;const char* u1;const char* u2;const char* z1;const char* z2;
    
    long count = 0;
loop:
    in->tok = in->cur;
    
{
	char yych;
	static const unsigned char yybm[256] = {
		  0,  96,  96,  96,  96,  96,  96,  96,
		 96, 104,   0,  96,  96,  96,  96,  96,
		 96,  96,  96,  96,  96,  96,  96,  96,
		 96,  96,  96,  96,  96,  96,  96,  96,
		104,  96,  32,  96,  96,  96,  96,  96,
		 96,  96,  96,  96,  96,  96, 112,  96,
		240, 240, 240, 240, 240, 240, 240, 240,
		240, 240,  96,  96,  96,  96,  96,  96,
		 96,  96,  96,  96,  96,  96,  96,  96,
		 96,  96,  96,  96,  96,  96,  96,  96,
		 96,  96,  96,  96,  96,  96,  96,  96,
		 96,  96,  96,  96,  96,  64,  96,  96,
		 96,  96,  96,  96,  96,  96,  96,  96,
		 96,  96,  96,  96,  96,  96,  96,  96,
		 96,  96,  96,  96,  96,  96,  96,  96,
		 96,  96,  96,  96,  96,  96,  96,  96,
		 96,  96,  96,  96,  96,  96,  96,  96,
		 96,  96,  96,  96,  96,  96,  96,  96,
		 96,  96,  96,  96,  96,  96,  96,  96,
		 96,  96,  96,  96,  96,  96,  96,  96,
		 96,  96,  96,  96,  96,  96,  96,  96,
		 96,  96,  96,  96,  96,  96,  96,  96,
		 96,  96,  96,  96,  96,  96,  96,  96,
		 96,  96,  96,  96,  96,  96,  96,  96,
		 96,  96,  96,  96,  96,  96,  96,  96,
		 96,  96,  96,  96,  96,  96,  96,  96,
		 96,  96,  96,  96,  96,  96,  96,  96,
		 96,  96,  96,  96,  96,  96,  96,  96,
		 96,  96,  96,  96,  96,  96,  96,  96,
		 96,  96,  96,  96,  96,  96,  96,  96,
		 96,  96,  96,  96,  96,  96,  96,  96,
		 96,  96,  96,  96,  96,  96,  96,  96
	};
	if ((YYLIMIT - YYCURSOR) < 2) if (fill_buffered_scc(in, 2) != 0) return -2;
	yych = *YYCURSOR;
	if (yych <= '.') {
		if (yych <= 0x00) goto yy58;
		if (yych <= '-') goto yy59;
		in->yyt1 = YYCURSOR;
		goto yy61;
	} else {
		if (yych <= '/') goto yy59;
		if (yych <= '9') {
			in->yyt1 = YYCURSOR;
			goto yy61;
		}
		goto yy59;
	}
yy58:
	++YYCURSOR;
	{ return count; }
yy59:
	++YYCURSOR;
yy60:
	{ return -1; }
yy61:
	yych = *(YYMARKER = ++YYCURSOR);
	if (yybm[0+yych] & 16) goto yy64;
	if (yych == '\t') {
		in->yyt2 = YYCURSOR;
		goto yy62;
	}
	if (yych != ' ') goto yy60;
	in->yyt2 = YYCURSOR;
yy62:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 2) if (fill_buffered_scc(in, 2) != 0) return -2;
	yych = *YYCURSOR;
	if (yybm[0+yych] & 8) goto yy62;
	if (yych == '-') goto yy65;
yy63:
	YYCURSOR = YYMARKER;
	goto yy60;
yy64:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) if (fill_buffered_scc(in, 1) != 0) return -2;
	yych = *YYCURSOR;
	if (yybm[0+yych] & 16) goto yy64;
	if (yych == '\t') {
		in->yyt2 = YYCURSOR;
		goto yy62;
	}
	if (yych == ' ') {
		in->yyt2 = YYCURSOR;
		goto yy62;
	}
	goto yy63;
yy65:
	yych = *++YYCURSOR;
	if (yych == '\t') {
		in->yyt3 = YYCURSOR;
		goto yy66;
	}
	if (yych != ' ') goto yy63;
	in->yyt3 = YYCURSOR;
yy66:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 2) if (fill_buffered_scc(in, 2) != 0) return -2;
	yych = *YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy66;
		goto yy63;
	} else {
		if (yych <= ' ') goto yy66;
		if (yych != '-') goto yy63;
	}
	yych = *++YYCURSOR;
	if (yych == '\t') {
		in->yyt4 = YYCURSOR;
		goto yy67;
	}
	if (yych != ' ') goto yy63;
	in->yyt4 = YYCURSOR;
yy67:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 2) if (fill_buffered_scc(in, 2) != 0) return -2;
	yych = *YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy67;
		goto yy63;
	} else {
		if (yych <= ' ') goto yy67;
		if (yych != '[') goto yy63;
		in->yyt5 = YYCURSOR;
	}
	yych = *++YYCURSOR;
	if (yych == ']') goto yy63;
	goto yy69;
yy68:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 2) if (fill_buffered_scc(in, 2) != 0) return -2;
	yych = *YYCURSOR;
yy69:
	if (yybm[0+yych] & 32) goto yy68;
	if (yych <= '\n') goto yy63;
	yych = *++YYCURSOR;
	if (yych == '\t') {
		in->yyt6 = YYCURSOR;
		goto yy70;
	}
	if (yych != ' ') goto yy63;
	in->yyt6 = YYCURSOR;
yy70:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 2) if (fill_buffered_scc(in, 2) != 0) return -2;
	yych = *YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy70;
		goto yy63;
	} else {
		if (yych <= ' ') goto yy70;
		if (yych != '"') goto yy63;
		in->yyt7 = YYCURSOR;
	}
	yych = *++YYCURSOR;
	if (yych == '"') goto yy63;
	goto yy72;
yy71:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 2) if (fill_buffered_scc(in, 2) != 0) return -2;
	yych = *YYCURSOR;
yy72:
	if (yybm[0+yych] & 64) goto yy71;
	if (yych <= '\n') goto yy63;
	yych = *++YYCURSOR;
	if (yych == '\t') {
		in->yyt8 = YYCURSOR;
		goto yy73;
	}
	if (yych != ' ') goto yy63;
	in->yyt8 = YYCURSOR;
yy73:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) if (fill_buffered_scc(in, 1) != 0) return -2;
	yych = *YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy73;
		goto yy63;
	} else {
		if (yych <= ' ') goto yy73;
		if (yych <= '/') goto yy63;
		if (yych >= ':') goto yy63;
		in->yyt9 = YYCURSOR;
	}
yy74:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) if (fill_buffered_scc(in, 1) != 0) return -2;
	yych = *YYCURSOR;
	if (yybm[0+yych] & 128) goto yy74;
	if (yych == '\t') {
		in->yyt10 = YYCURSOR;
		goto yy75;
	}
	if (yych != ' ') goto yy63;
	in->yyt10 = YYCURSOR;
yy75:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 2) if (fill_buffered_scc(in, 2) != 0) return -2;
	yych = *YYCURSOR;
	if (yych <= ' ') {
		if (yych == '\t') goto yy75;
		if (yych <= 0x1F) goto yy63;
		goto yy75;
	} else {
		if (yych <= '-') {
			if (yych <= ',') goto yy63;
			in->yyt11 = YYCURSOR;
		} else {
			if (yych <= '/') goto yy63;
			if (yych <= '9') {
				in->yyt11 = YYCURSOR;
				goto yy76;
			}
			goto yy63;
		}
	}
	yych = *++YYCURSOR;
	if (yych == '\t') {
		in->yyt12 = YYCURSOR;
		goto yy77;
	}
	if (yych == ' ') {
		in->yyt12 = YYCURSOR;
		goto yy77;
	}
	goto yy63;
yy76:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) if (fill_buffered_scc(in, 1) != 0) return -2;
	yych = *YYCURSOR;
	if (yych <= 0x1F) {
		if (yych != '\t') goto yy63;
		in->yyt12 = YYCURSOR;
	} else {
		if (yych <= ' ') {
			in->yyt12 = YYCURSOR;
			goto yy77;
		}
		if (yych <= '/') goto yy63;
		if (yych <= '9') goto yy76;
		goto yy63;
	}
yy77:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) if (fill_buffered_scc(in, 1) != 0) return -2;
	yych = *YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy77;
		goto yy63;
	} else {
		if (yych <= ' ') goto yy77;
		if (yych != '"') goto yy63;
		in->yyt13 = YYCURSOR;
	}
yy78:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 2) if (fill_buffered_scc(in, 2) != 0) return -2;
	yych = *YYCURSOR;
	if (yych <= '\n') {
		if (yych <= 0x00) goto yy63;
		if (yych <= '\t') goto yy78;
		goto yy63;
	} else {
		if (yych != '"') goto yy78;
	}
	yych = *++YYCURSOR;
	if (yych == '\t') {
		in->yyt14 = YYCURSOR;
		goto yy79;
	}
	if (yych != ' ') goto yy63;
	in->yyt14 = YYCURSOR;
yy79:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) if (fill_buffered_scc(in, 1) != 0) return -2;
	yych = *YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy79;
		goto yy63;
	} else {
		if (yych <= ' ') goto yy79;
		if (yych != '"') goto yy63;
		in->yyt15 = YYCURSOR;
	}
yy80:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 2) if (fill_buffered_scc(in, 2) != 0) return -2;
	yych = *YYCURSOR;
	if (yych <= '\n') {
		if (yych <= 0x00) goto yy63;
		if (yych <= '\t') goto yy80;
		goto yy63;
	} else {
		if (yych != '"') goto yy80;
	}
	yych = *++YYCURSOR;
	if (yych != '\n') goto yy63;
	++YYCURSOR;
	h1 = in->yyt1;
	h2 = in->yyt2;
	i2 = in->yyt3;
	a2 = in->yyt4;
	d1 = in->yyt5;
	d2 = in->yyt6;
	r1 = in->yyt7;
	r2 = in->yyt8;
	s1 = in->yyt9;
	s2 = in->yyt10;
	z1 = in->yyt11;
	z2 = in->yyt12;
	u1 = in->yyt13;
	u2 = in->yyt14;
	g1 = in->yyt15;
	i1 = in->yyt3;
	i1 -= 1;
	a1 = in->yyt4;
	a1 -= 1;
	g2 = YYCURSOR;
	g2 -= 1;
	{
        OUT("host: ",     h1, h2);
        OUT("userid: ",   i1, i2);
        OUT("authuser: ", a1, a2);
        OUT("date: ",     d1, d2);
        OUT("request: ",  r1, r2);
        OUT("status: ",   s1, s2);
        OUT("size: ",     z1, z2);
        OUT("url: ",      u1, u2);
        OUT("agent: ",    g1, g2);
        OUTC('\n');
        goto loop;
    }
}

}

#undef YYCURSOR
#undef YYMARKER
#undef YYLIMIT
#undef YYTOKEN
#undef TLP_CLEAR

#define FN_BENCH(suffix) \
void bench_##suffix::operator()( \
        benchmark::State &state, const char* input, long expected) const { \
    long count = 0; \
    for (auto _ : state) { \
        input_t in; \
        init_input_##suffix(&in, input); \
        count = lex_##suffix(&in); \
        free_input(&in); \
    } \
    if (count != expected) state.SkipWithError("error"); \
}
FN_BENCH(simple)
FN_BENCH(buffered_eof)
FN_BENCH(buffered_scc)
#undef FN_BENCH

#define FN_TEST(suffix) \
bool test_##suffix(const char* input, long expected) { \
    input_t in; \
    init_input_##suffix(&in, input); \
    long count = lex_##suffix(&in); \
    switch (count) { \
    default: \
        if (count != expected) { \
            fprintf(stderr, "wrong count, expected %ld, got %ld\n", expected, count); \
        } \
        break; \
    case -1: \
        fprintf(stderr, "syntax error\n"); \
        break; \
    case -2: \
        fprintf(stderr, "yyfill error\n"); \
        break; \
    } \
    free_input(&in); \
    return count == expected; \
}
FN_TEST(simple)
FN_TEST(buffered_eof)
FN_TEST(buffered_scc)
#undef FN_TEST


} // namespace re2c_submatch_04__apache_log

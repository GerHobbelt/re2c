/* Generated by re2c */
#line 1 "../../../benchmarks/c/src/re2c/submatch_07__ipv4.re"
#include "re2c/base.h"

namespace re2c_submatch_07__ipv4 {

#line 22 "../../../benchmarks/c/src/re2c/submatch_07__ipv4.re"


#line 1 "../../../benchmarks/c/src/re2c/base.re"
#line 11 "../../../benchmarks/c/src/re2c/base.re"


struct input_t {
    FILE* file;
    char *buf;
    char *lim;
    char *cur;
    char *mar;
    char *tok;
    
#line 23 "gen/re2c/submatch_07__ipv4.cc"
char *yyt1;
char *yyt2;
char *yyt3;
char *yyt4;
#line 20 "../../../benchmarks/c/src/re2c/base.re"

    
#line 31 "gen/re2c/submatch_07__ipv4.cc"
#line 21 "../../../benchmarks/c/src/re2c/base.re"

    taglistpool_t tlp;
    int eof;
};

static inline void taglistpool_clear(taglistpool_t *tlp, input_t *in) {
    tlp->next = tlp->head;
    
#line 41 "gen/re2c/submatch_07__ipv4.cc"
#line 28 "../../../benchmarks/c/src/re2c/base.re"

}

static inline void taglistpool_init(taglistpool_t *tlp) {
    static const unsigned size = 1024 * 1024;
    tlp->head = (taglist_t*)malloc(size * sizeof(taglist_t));
    tlp->next = tlp->head;
    tlp->last = tlp->head + size;
}

static inline void taglistpool_free(taglistpool_t *tlp) {
    free(tlp->head);
    tlp->head = tlp->next = tlp->last = NULL;
}

static inline void taglist(taglist_t **ptl, const char *b, const char *t, taglistpool_t *tlp) {
#ifdef GROW_MTAG_LIST
    if (tlp->next >= tlp->last) {
        const unsigned size = tlp->last - tlp->head;
        taglist_t *head = (taglist_t*)malloc(2 * size * sizeof(taglist_t));
        memcpy(head, tlp->head, size * sizeof(taglist_t));
        free(tlp->head);
        tlp->head = head;
        tlp->next = head + size;
        tlp->last = head + size * 2;
    }
#else
    assert(tlp->next < tlp->last);
#endif
    taglist_t *tl = tlp->next++;
    tl->pred = *ptl;
    tl->dist = t - b;
    *ptl = tl;
}

static inline void free_input(input_t *in) {
    free(in->buf);
    taglistpool_free(&in->tlp);
    fclose(in->file);
}

#line 74 "../../../benchmarks/c/src/re2c/base.re"


#line 79 "../../../benchmarks/c/src/re2c/base.re"


#line 90 "gen/re2c/submatch_07__ipv4.cc"
#define YYMAXFILL 16
#line 81 "../../../benchmarks/c/src/re2c/base.re"


static inline int fill_eofrule(input_t *in) {
    size_t free;
    if (in->eof) return 1;

    free = in->tok - in->buf;
    assert(free > 0);

    memmove(in->buf, in->tok, in->lim - in->tok);
    in->lim -= free;
    in->cur -= free;
    in->mar -= free;
    in->tok -= free;
    
#line 108 "gen/re2c/submatch_07__ipv4.cc"
if (in->yyt1) in->yyt1 -= free;
if (in->yyt2) in->yyt2 -= free;
if (in->yyt3) in->yyt3 -= free;
if (in->yyt4) in->yyt4 -= free;
#line 95 "../../../benchmarks/c/src/re2c/base.re"


    in->lim += fread(in->lim, 1, free, in->file);
    in->lim[0] = 0;

    if (in->lim < in->buf + SIZE) {
        in->eof = 1;
    }

    return 0;
}

static inline int fill_padding(input_t *in, size_t need) {
    size_t free;
    if (in->eof) return 1;

    free = in->tok - in->buf;
    assert(free >= need);

    memmove(in->buf, in->tok, in->lim - in->tok);
    in->lim -= free;
    in->cur -= free;
    in->mar -= free;
    in->tok -= free;
    
#line 139 "gen/re2c/submatch_07__ipv4.cc"
if (in->yyt1) in->yyt1 -= free;
if (in->yyt2) in->yyt2 -= free;
if (in->yyt3) in->yyt3 -= free;
if (in->yyt4) in->yyt4 -= free;
#line 119 "../../../benchmarks/c/src/re2c/base.re"


    in->lim += fread(in->lim, 1, free, in->file);

    if (in->lim < in->buf + SIZE) {
        in->eof = 1;
        memset(in->lim, 0, YYMAXFILL);
        in->lim += YYMAXFILL;
    }

    return 0;
}

static inline void init_input_eofrule(input_t *in, const char* fname) {
    in->file = fopen(fname, "rb");
    in->buf = (char*) malloc(SIZE + 1);
    in->lim = in->buf + SIZE;
    in->cur = in->lim;
    in->mar = in->lim;
    in->tok = in->lim;
    
#line 166 "gen/re2c/submatch_07__ipv4.cc"
in->yyt1 = 0;
in->yyt2 = 0;
in->yyt3 = 0;
in->yyt4 = 0;
#line 139 "../../../benchmarks/c/src/re2c/base.re"

    
#line 174 "gen/re2c/submatch_07__ipv4.cc"
#line 140 "../../../benchmarks/c/src/re2c/base.re"

    taglistpool_init(&in->tlp);
    in->eof = 0;
    fill_eofrule(in);
}

static inline void init_input_padding(input_t *in, const char* fname) {
    in->file = fopen(fname, "rb");
    in->buf = (char*) malloc(SIZE + YYMAXFILL);
    in->lim = in->buf + SIZE;
    in->cur = in->lim;
    in->mar = in->lim;
    in->tok = in->lim;
    
#line 190 "gen/re2c/submatch_07__ipv4.cc"
in->yyt1 = 0;
in->yyt2 = 0;
in->yyt3 = 0;
in->yyt4 = 0;
#line 153 "../../../benchmarks/c/src/re2c/base.re"

    
#line 198 "gen/re2c/submatch_07__ipv4.cc"
#line 154 "../../../benchmarks/c/src/re2c/base.re"

    taglistpool_init(&in->tlp);
    in->eof = 0;
}

int lex_yyfill_eofrule(input_t *in) {
    long count = 0;
    
#line 208 "gen/re2c/submatch_07__ipv4.cc"
const char* p1;const char* p2;const char* p3;const char* p4;
#line 161 "../../../benchmarks/c/src/re2c/base.re"

    
#line 213 "gen/re2c/submatch_07__ipv4.cc"
#line 162 "../../../benchmarks/c/src/re2c/base.re"

loop:
    in->tok = in->cur;
    
#line 219 "gen/re2c/submatch_07__ipv4.cc"
{
	char yych;
yyFillLabel0:
	yych = *in->cur;
	switch (yych) {
		case '0':
		case '1':
		case '2':
		case '3':
		case '4':
		case '5':
		case '6':
		case '7':
		case '8':
		case '9':
			in->yyt1 = in->cur;
			goto yy3;
		default:
			if (in->lim <= in->cur) {
				if (fill_eofrule(in) == 0) goto yyFillLabel0;
				goto yy20;
			}
			goto yy1;
	}
yy1:
	++in->cur;
yy2:
#line 10 "../../../benchmarks/c/src/re2c/submatch_07__ipv4.re"
	{ return -1; }
#line 249 "gen/re2c/submatch_07__ipv4.cc"
yy3:
	in->mar = ++in->cur;
yyFillLabel1:
	yych = *in->cur;
	switch (yych) {
		case '.': goto yy4;
		case '0':
		case '1':
		case '2':
		case '3':
		case '4':
		case '5':
		case '6':
		case '7':
		case '8':
		case '9': goto yy6;
		default:
			if (in->lim <= in->cur) {
				if (fill_eofrule(in) == 0) goto yyFillLabel1;
			}
			goto yy2;
	}
yy4:
	++in->cur;
yyFillLabel2:
	yych = *in->cur;
	switch (yych) {
		case '0':
		case '1':
		case '2':
		case '3':
		case '4':
		case '5':
		case '6':
		case '7':
		case '8':
		case '9':
			in->yyt2 = in->cur;
			goto yy7;
		default:
			if (in->lim <= in->cur) {
				if (fill_eofrule(in) == 0) goto yyFillLabel2;
			}
			goto yy5;
	}
yy5:
	in->cur = in->mar;
	goto yy2;
yy6:
	++in->cur;
yyFillLabel3:
	yych = *in->cur;
	switch (yych) {
		case '.': goto yy4;
		case '0':
		case '1':
		case '2':
		case '3':
		case '4':
		case '5':
		case '6':
		case '7':
		case '8':
		case '9': goto yy8;
		default:
			if (in->lim <= in->cur) {
				if (fill_eofrule(in) == 0) goto yyFillLabel3;
			}
			goto yy5;
	}
yy7:
	++in->cur;
yyFillLabel4:
	yych = *in->cur;
	switch (yych) {
		case '.': goto yy9;
		case '0':
		case '1':
		case '2':
		case '3':
		case '4':
		case '5':
		case '6':
		case '7':
		case '8':
		case '9': goto yy10;
		default:
			if (in->lim <= in->cur) {
				if (fill_eofrule(in) == 0) goto yyFillLabel4;
			}
			goto yy5;
	}
yy8:
	++in->cur;
yyFillLabel5:
	yych = *in->cur;
	switch (yych) {
		case '.': goto yy4;
		default:
			if (in->lim <= in->cur) {
				if (fill_eofrule(in) == 0) goto yyFillLabel5;
			}
			goto yy5;
	}
yy9:
	++in->cur;
yyFillLabel6:
	yych = *in->cur;
	switch (yych) {
		case '0':
		case '1':
		case '2':
		case '3':
		case '4':
		case '5':
		case '6':
		case '7':
		case '8':
		case '9':
			in->yyt3 = in->cur;
			goto yy11;
		default:
			if (in->lim <= in->cur) {
				if (fill_eofrule(in) == 0) goto yyFillLabel6;
			}
			goto yy5;
	}
yy10:
	++in->cur;
yyFillLabel7:
	yych = *in->cur;
	switch (yych) {
		case '.': goto yy9;
		case '0':
		case '1':
		case '2':
		case '3':
		case '4':
		case '5':
		case '6':
		case '7':
		case '8':
		case '9': goto yy12;
		default:
			if (in->lim <= in->cur) {
				if (fill_eofrule(in) == 0) goto yyFillLabel7;
			}
			goto yy5;
	}
yy11:
	++in->cur;
yyFillLabel8:
	yych = *in->cur;
	switch (yych) {
		case '.': goto yy13;
		case '0':
		case '1':
		case '2':
		case '3':
		case '4':
		case '5':
		case '6':
		case '7':
		case '8':
		case '9': goto yy14;
		default:
			if (in->lim <= in->cur) {
				if (fill_eofrule(in) == 0) goto yyFillLabel8;
			}
			goto yy5;
	}
yy12:
	++in->cur;
yyFillLabel9:
	yych = *in->cur;
	switch (yych) {
		case '.': goto yy9;
		default:
			if (in->lim <= in->cur) {
				if (fill_eofrule(in) == 0) goto yyFillLabel9;
			}
			goto yy5;
	}
yy13:
	++in->cur;
yyFillLabel10:
	yych = *in->cur;
	switch (yych) {
		case '0':
		case '1':
		case '2':
		case '3':
		case '4':
		case '5':
		case '6':
		case '7':
		case '8':
		case '9':
			in->yyt4 = in->cur;
			goto yy15;
		default:
			if (in->lim <= in->cur) {
				if (fill_eofrule(in) == 0) goto yyFillLabel10;
			}
			goto yy5;
	}
yy14:
	++in->cur;
yyFillLabel11:
	yych = *in->cur;
	switch (yych) {
		case '.': goto yy13;
		case '0':
		case '1':
		case '2':
		case '3':
		case '4':
		case '5':
		case '6':
		case '7':
		case '8':
		case '9': goto yy16;
		default:
			if (in->lim <= in->cur) {
				if (fill_eofrule(in) == 0) goto yyFillLabel11;
			}
			goto yy5;
	}
yy15:
	++in->cur;
yyFillLabel12:
	yych = *in->cur;
	switch (yych) {
		case '\n': goto yy17;
		case '0':
		case '1':
		case '2':
		case '3':
		case '4':
		case '5':
		case '6':
		case '7':
		case '8':
		case '9': goto yy18;
		default:
			if (in->lim <= in->cur) {
				if (fill_eofrule(in) == 0) goto yyFillLabel12;
			}
			goto yy5;
	}
yy16:
	++in->cur;
yyFillLabel13:
	yych = *in->cur;
	switch (yych) {
		case '.': goto yy13;
		default:
			if (in->lim <= in->cur) {
				if (fill_eofrule(in) == 0) goto yyFillLabel13;
			}
			goto yy5;
	}
yy17:
	++in->cur;
	p1 = in->yyt1;
	p2 = in->yyt2;
	p3 = in->yyt3;
	p4 = in->yyt4;
#line 11 "../../../benchmarks/c/src/re2c/submatch_07__ipv4.re"
	{
        OUTS(p1, p2 - 1);
        OUTC(',');
        OUTS(p2, p3 - 1);
        OUTC(',');
        OUTS(p3, p4 - 1);
        OUTC(',');
        OUTS(p4, in->cur - 1);
        OUTC('\n');
        goto loop;
    }
#line 530 "gen/re2c/submatch_07__ipv4.cc"
yy18:
	++in->cur;
yyFillLabel14:
	yych = *in->cur;
	switch (yych) {
		case '\n': goto yy17;
		case '0':
		case '1':
		case '2':
		case '3':
		case '4':
		case '5':
		case '6':
		case '7':
		case '8':
		case '9': goto yy19;
		default:
			if (in->lim <= in->cur) {
				if (fill_eofrule(in) == 0) goto yyFillLabel14;
			}
			goto yy5;
	}
yy19:
	++in->cur;
yyFillLabel15:
	yych = *in->cur;
	switch (yych) {
		case '\n': goto yy17;
		default:
			if (in->lim <= in->cur) {
				if (fill_eofrule(in) == 0) goto yyFillLabel15;
			}
			goto yy5;
	}
yy20:
#line 73 "../../../benchmarks/c/src/re2c/base.re"
	{ return count; }
#line 568 "gen/re2c/submatch_07__ipv4.cc"
}
#line 169 "../../../benchmarks/c/src/re2c/base.re"

}

int lex_yyfill_padding(input_t *in) {
    long count = 0;
    
#line 577 "gen/re2c/submatch_07__ipv4.cc"
const char* p1;const char* p2;const char* p3;const char* p4;
#line 174 "../../../benchmarks/c/src/re2c/base.re"

    
#line 582 "gen/re2c/submatch_07__ipv4.cc"
#line 175 "../../../benchmarks/c/src/re2c/base.re"

loop:
    in->tok = in->cur;
    
#line 588 "gen/re2c/submatch_07__ipv4.cc"
{
	char yych;
	if ((in->lim - in->cur) < 16) if (fill_padding(in, 16) != 0) return -2;
	yych = *in->cur;
	if (yych <= 0x00) goto yy22;
	if (yych <= '/') goto yy23;
	if (yych <= '9') {
		in->yyt1 = in->cur;
		goto yy25;
	}
	goto yy23;
yy22:
	++in->cur;
#line 78 "../../../benchmarks/c/src/re2c/base.re"
	{ return count; }
#line 604 "gen/re2c/submatch_07__ipv4.cc"
yy23:
	++in->cur;
yy24:
#line 10 "../../../benchmarks/c/src/re2c/submatch_07__ipv4.re"
	{ return -1; }
#line 610 "gen/re2c/submatch_07__ipv4.cc"
yy25:
	yych = *(in->mar = ++in->cur);
	if (yych == '.') goto yy26;
	if (yych <= '/') goto yy24;
	if (yych <= '9') goto yy28;
	goto yy24;
yy26:
	yych = *++in->cur;
	if (yych <= '/') goto yy27;
	if (yych <= '9') {
		in->yyt2 = in->cur;
		goto yy29;
	}
yy27:
	in->cur = in->mar;
	goto yy24;
yy28:
	yych = *++in->cur;
	if (yych == '.') goto yy26;
	if (yych <= '/') goto yy27;
	if (yych <= '9') goto yy30;
	goto yy27;
yy29:
	yych = *++in->cur;
	if (yych == '.') goto yy31;
	if (yych <= '/') goto yy27;
	if (yych <= '9') goto yy32;
	goto yy27;
yy30:
	yych = *++in->cur;
	if (yych == '.') goto yy26;
	goto yy27;
yy31:
	yych = *++in->cur;
	if (yych <= '/') goto yy27;
	if (yych <= '9') {
		in->yyt3 = in->cur;
		goto yy33;
	}
	goto yy27;
yy32:
	yych = *++in->cur;
	if (yych == '.') goto yy31;
	if (yych <= '/') goto yy27;
	if (yych <= '9') goto yy34;
	goto yy27;
yy33:
	yych = *++in->cur;
	if (yych == '.') goto yy35;
	if (yych <= '/') goto yy27;
	if (yych <= '9') goto yy36;
	goto yy27;
yy34:
	yych = *++in->cur;
	if (yych == '.') goto yy31;
	goto yy27;
yy35:
	yych = *++in->cur;
	if (yych <= '/') goto yy27;
	if (yych <= '9') {
		in->yyt4 = in->cur;
		goto yy37;
	}
	goto yy27;
yy36:
	yych = *++in->cur;
	if (yych == '.') goto yy35;
	if (yych <= '/') goto yy27;
	if (yych <= '9') goto yy38;
	goto yy27;
yy37:
	yych = *++in->cur;
	if (yych == '\n') goto yy39;
	if (yych <= '/') goto yy27;
	if (yych <= '9') goto yy40;
	goto yy27;
yy38:
	yych = *++in->cur;
	if (yych == '.') goto yy35;
	goto yy27;
yy39:
	++in->cur;
	p1 = in->yyt1;
	p2 = in->yyt2;
	p3 = in->yyt3;
	p4 = in->yyt4;
#line 11 "../../../benchmarks/c/src/re2c/submatch_07__ipv4.re"
	{
        OUTS(p1, p2 - 1);
        OUTC(',');
        OUTS(p2, p3 - 1);
        OUTC(',');
        OUTS(p3, p4 - 1);
        OUTC(',');
        OUTS(p4, in->cur - 1);
        OUTC('\n');
        goto loop;
    }
#line 709 "gen/re2c/submatch_07__ipv4.cc"
yy40:
	yych = *++in->cur;
	if (yych == '\n') goto yy39;
	if (yych <= '/') goto yy27;
	if (yych >= ':') goto yy27;
	yych = *++in->cur;
	if (yych == '\n') goto yy39;
	goto yy27;
}
#line 183 "../../../benchmarks/c/src/re2c/base.re"

}

#define FN_BENCH(suffix) \
void bench_yyfill_##suffix::operator()( \
        benchmark::State &state, const char* input, long expected) const { \
    long count; \
    for (auto _ : state) { \
        input_t in; \
        init_input_##suffix(&in, input); \
        count = lex_yyfill_##suffix(&in); \
        free_input(&in); \
    } \
    if (count != expected) state.SkipWithError("error"); \
}
FN_BENCH(eofrule)
FN_BENCH(padding)
#undef FN_BENCH

#define FN_TEST(suffix) \
bool test_yyfill_##suffix(const char* input, long expected) { \
    input_t in; \
    init_input_##suffix(&in, input); \
    \
    long count = lex_yyfill_##suffix(&in); \
    switch (count) { \
    default: \
        if (count != expected) { \
            fprintf(stderr, "wrong count, expected %ld, got %ld\n", expected, count); \
        } \
        break; \
    case -1: \
        fprintf(stderr, "syntax error\n"); \
        break; \
    case -2: \
        fprintf(stderr, "yyfill error\n"); \
        break; \
    } \
    \
    free_input(&in); \
    return count == expected; \
}
FN_TEST(eofrule)
FN_TEST(padding)
#undef FN_TEST
#line 24 "../../../benchmarks/c/src/re2c/submatch_07__ipv4.re"


} // namespace re2c_submatch_07__ipv4


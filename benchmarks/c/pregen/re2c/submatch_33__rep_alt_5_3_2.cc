/* Generated by re2c */
#line 1 "../../../benchmarks/c/src/re2c/submatch_33__rep_alt_5_3_2.re"
#include "re2c/base.h"

namespace re2c_submatch_33__rep_alt_5_3_2 {

#line 15 "../../../benchmarks/c/src/re2c/submatch_33__rep_alt_5_3_2.re"


static const char *print(long& count, const char *tok, const taglist_t *t) {
    if (!t) return tok;

    const char *s = print(count, tok, t->pred);
    const char *e = tok + t->dist;
    OUTS(s, e);
    OUTC('.');
    return e;
}

#line 1 "../../../benchmarks/c/src/re2c/base.re"
#line 11 "../../../benchmarks/c/src/re2c/base.re"


struct input_t {
    FILE* file;
    char *buf;
    char *lim;
    char *cur;
    char *mar;
    char *tok;
    
#line 33 "gen/re2c/submatch_33__rep_alt_5_3_2.cc"
#line 20 "../../../benchmarks/c/src/re2c/base.re"

    
#line 37 "gen/re2c/submatch_33__rep_alt_5_3_2.cc"
taglist_t *yytm1;
taglist_t *yytm2;
taglist_t *yytm3;
#line 21 "../../../benchmarks/c/src/re2c/base.re"

    taglistpool_t tlp;
    int eof;
};

static inline void taglistpool_clear(taglistpool_t *tlp, input_t *in) {
    tlp->next = tlp->head;
    
#line 50 "gen/re2c/submatch_33__rep_alt_5_3_2.cc"
in->yytm1 = 0;
in->yytm2 = 0;
in->yytm3 = 0;
#line 28 "../../../benchmarks/c/src/re2c/base.re"

}

static inline void taglistpool_init(taglistpool_t *tlp) {
    static const unsigned size = 1024 * 1024;
    tlp->head = (taglist_t*)malloc(size * sizeof(taglist_t));
    tlp->next = tlp->head;
    tlp->last = tlp->head + size;
}

static inline void taglistpool_free(taglistpool_t *tlp) {
    free(tlp->head);
    tlp->head = tlp->next = tlp->last = NULL;
}

static inline void taglist(taglist_t **ptl, const char *b, const char *t, taglistpool_t *tlp) {
#ifdef GROW_MTAG_LIST
    if (tlp->next >= tlp->last) {
        const unsigned size = tlp->last - tlp->head;
        taglist_t *head = (taglist_t*)malloc(2 * size * sizeof(taglist_t));
        memcpy(head, tlp->head, size * sizeof(taglist_t));
        free(tlp->head);
        tlp->head = head;
        tlp->next = head + size;
        tlp->last = head + size * 2;
    }
#else
    assert(tlp->next < tlp->last);
#endif
    taglist_t *tl = tlp->next++;
    tl->pred = *ptl;
    tl->dist = t - b;
    *ptl = tl;
}

static inline void free_input(input_t *in) {
    free(in->buf);
    taglistpool_free(&in->tlp);
    fclose(in->file);
}

#line 74 "../../../benchmarks/c/src/re2c/base.re"


#line 79 "../../../benchmarks/c/src/re2c/base.re"


#line 102 "gen/re2c/submatch_33__rep_alt_5_3_2.cc"
#define YYMAXFILL 2
#line 81 "../../../benchmarks/c/src/re2c/base.re"


static inline int fill_eofrule(input_t *in) {
    size_t free;
    if (in->eof) return 1;

    free = in->tok - in->buf;
    assert(free > 0);

    memmove(in->buf, in->tok, in->lim - in->tok);
    in->lim -= free;
    in->cur -= free;
    in->mar -= free;
    in->tok -= free;
    
#line 120 "gen/re2c/submatch_33__rep_alt_5_3_2.cc"
#line 95 "../../../benchmarks/c/src/re2c/base.re"


    in->lim += fread(in->lim, 1, free, in->file);
    in->lim[0] = 0;

    if (in->lim < in->buf + SIZE) {
        in->eof = 1;
    }

    return 0;
}

static inline int fill_padding(input_t *in, size_t need) {
    size_t free;
    if (in->eof) return 1;

    free = in->tok - in->buf;
    assert(free >= need);

    memmove(in->buf, in->tok, in->lim - in->tok);
    in->lim -= free;
    in->cur -= free;
    in->mar -= free;
    in->tok -= free;
    
#line 147 "gen/re2c/submatch_33__rep_alt_5_3_2.cc"
#line 119 "../../../benchmarks/c/src/re2c/base.re"


    in->lim += fread(in->lim, 1, free, in->file);

    if (in->lim < in->buf + SIZE) {
        in->eof = 1;
        memset(in->lim, 0, YYMAXFILL);
        in->lim += YYMAXFILL;
    }

    return 0;
}

static inline void init_input_eofrule(input_t *in, const char* fname) {
    in->file = fopen(fname, "rb");
    in->buf = (char*) malloc(SIZE + 1);
    in->lim = in->buf + SIZE;
    in->cur = in->lim;
    in->mar = in->lim;
    in->tok = in->lim;
    
#line 170 "gen/re2c/submatch_33__rep_alt_5_3_2.cc"
#line 139 "../../../benchmarks/c/src/re2c/base.re"

    
#line 174 "gen/re2c/submatch_33__rep_alt_5_3_2.cc"
in->yytm1 = 0;
in->yytm2 = 0;
in->yytm3 = 0;
#line 140 "../../../benchmarks/c/src/re2c/base.re"

    taglistpool_init(&in->tlp);
    in->eof = 0;
    fill_eofrule(in);
}

static inline void init_input_padding(input_t *in, const char* fname) {
    in->file = fopen(fname, "rb");
    in->buf = (char*) malloc(SIZE + YYMAXFILL);
    in->lim = in->buf + SIZE;
    in->cur = in->lim;
    in->mar = in->lim;
    in->tok = in->lim;
    
#line 193 "gen/re2c/submatch_33__rep_alt_5_3_2.cc"
#line 153 "../../../benchmarks/c/src/re2c/base.re"

    
#line 197 "gen/re2c/submatch_33__rep_alt_5_3_2.cc"
in->yytm1 = 0;
in->yytm2 = 0;
in->yytm3 = 0;
#line 154 "../../../benchmarks/c/src/re2c/base.re"

    taglistpool_init(&in->tlp);
    in->eof = 0;
}

int lex_yyfill_eofrule(input_t *in) {
    long count = 0;
    
#line 210 "gen/re2c/submatch_33__rep_alt_5_3_2.cc"
#line 161 "../../../benchmarks/c/src/re2c/base.re"

    
#line 214 "gen/re2c/submatch_33__rep_alt_5_3_2.cc"
taglist_t* t;
#line 162 "../../../benchmarks/c/src/re2c/base.re"

loop:
    in->tok = in->cur;
    
#line 221 "gen/re2c/submatch_33__rep_alt_5_3_2.cc"
{
	char yych;
yyFillLabel0:
	yych = *in->cur;
	switch (yych) {
		case '\n':
			taglist(&in->yytm1, in->tok, in->tok - 1, &in->tlp);
			goto yy3;
		case 'a': goto yy4;
		default:
			if (in->lim <= in->cur) {
				if (fill_eofrule(in) == 0) goto yyFillLabel0;
				goto yy11;
			}
			goto yy1;
	}
yy1:
	++in->cur;
yy2:
#line 8 "../../../benchmarks/c/src/re2c/submatch_33__rep_alt_5_3_2.re"
	{ return -1; }
#line 243 "gen/re2c/submatch_33__rep_alt_5_3_2.cc"
yy3:
	++in->cur;
	t = in->yytm1;
#line 9 "../../../benchmarks/c/src/re2c/submatch_33__rep_alt_5_3_2.re"
	{
        print(count, in->tok, t);
        OUTC('\n');
        taglistpool_clear(&in->tlp, in);
        goto loop;
    }
#line 254 "gen/re2c/submatch_33__rep_alt_5_3_2.cc"
yy4:
	in->mar = ++in->cur;
yyFillLabel1:
	yych = *in->cur;
	switch (yych) {
		case 'a': goto yy5;
		default:
			if (in->lim <= in->cur) {
				if (fill_eofrule(in) == 0) goto yyFillLabel1;
			}
			goto yy2;
	}
yy5:
	++in->cur;
yyFillLabel2:
	yych = *in->cur;
	switch (yych) {
		case '\n':
			taglist(&in->yytm1, in->tok, in->cur, &in->tlp);
			goto yy3;
		case 'a':
			in->yytm2 = in->yytm1;
			taglist(&in->yytm2, in->tok, in->cur, &in->tlp);
			goto yy7;
		default:
			if (in->lim <= in->cur) {
				if (fill_eofrule(in) == 0) goto yyFillLabel2;
			}
			goto yy6;
	}
yy6:
	in->cur = in->mar;
	goto yy2;
yy7:
	++in->cur;
yyFillLabel3:
	yych = *in->cur;
	switch (yych) {
		case '\n':
			taglist(&in->yytm1, in->tok, in->cur, &in->tlp);
			goto yy3;
		case 'a':
			in->yytm3 = in->yytm1;
			taglist(&in->yytm3, in->tok, in->cur, &in->tlp);
			goto yy8;
		default:
			if (in->lim <= in->cur) {
				if (fill_eofrule(in) == 0) goto yyFillLabel3;
			}
			goto yy6;
	}
yy8:
	++in->cur;
yyFillLabel4:
	yych = *in->cur;
	switch (yych) {
		case '\n':
			in->yytm1 = in->yytm2;
			taglist(&in->yytm1, in->tok, in->cur, &in->tlp);
			goto yy3;
		case 'a': goto yy9;
		default:
			if (in->lim <= in->cur) {
				if (fill_eofrule(in) == 0) goto yyFillLabel4;
			}
			goto yy6;
	}
yy9:
	++in->cur;
yyFillLabel5:
	yych = *in->cur;
	switch (yych) {
		case '\n':
			taglist(&in->yytm1, in->tok, in->cur, &in->tlp);
			goto yy3;
		case 'a':
			taglist(&in->yytm1, in->tok, in->cur, &in->tlp);
			goto yy10;
		default:
			if (in->lim <= in->cur) {
				if (fill_eofrule(in) == 0) goto yyFillLabel5;
			}
			goto yy6;
	}
yy10:
	++in->cur;
yyFillLabel6:
	yych = *in->cur;
	switch (yych) {
		case '\n':
			in->yytm1 = in->yytm3;
			taglist(&in->yytm1, in->tok, in->cur, &in->tlp);
			goto yy3;
		case 'a': goto yy5;
		default:
			if (in->lim <= in->cur) {
				if (fill_eofrule(in) == 0) goto yyFillLabel6;
			}
			goto yy6;
	}
yy11:
#line 73 "../../../benchmarks/c/src/re2c/base.re"
	{ return count; }
#line 358 "gen/re2c/submatch_33__rep_alt_5_3_2.cc"
}
#line 169 "../../../benchmarks/c/src/re2c/base.re"

}

int lex_yyfill_padding(input_t *in) {
    long count = 0;
    
#line 367 "gen/re2c/submatch_33__rep_alt_5_3_2.cc"
#line 174 "../../../benchmarks/c/src/re2c/base.re"

    
#line 371 "gen/re2c/submatch_33__rep_alt_5_3_2.cc"
taglist_t* t;
#line 175 "../../../benchmarks/c/src/re2c/base.re"

loop:
    in->tok = in->cur;
    
#line 378 "gen/re2c/submatch_33__rep_alt_5_3_2.cc"
{
	char yych;
	if ((in->lim - in->cur) < 2) if (fill_padding(in, 2) != 0) return -2;
	yych = *in->cur;
	if (yych <= '\n') {
		if (yych <= 0x00) goto yy13;
		if (yych <= '\t') goto yy14;
		taglist(&in->yytm1, in->tok, in->tok - 1, &in->tlp);
		goto yy16;
	} else {
		if (yych == 'a') goto yy17;
		goto yy14;
	}
yy13:
	++in->cur;
#line 78 "../../../benchmarks/c/src/re2c/base.re"
	{ return count; }
#line 396 "gen/re2c/submatch_33__rep_alt_5_3_2.cc"
yy14:
	++in->cur;
yy15:
#line 8 "../../../benchmarks/c/src/re2c/submatch_33__rep_alt_5_3_2.re"
	{ return -1; }
#line 402 "gen/re2c/submatch_33__rep_alt_5_3_2.cc"
yy16:
	++in->cur;
	t = in->yytm1;
#line 9 "../../../benchmarks/c/src/re2c/submatch_33__rep_alt_5_3_2.re"
	{
        print(count, in->tok, t);
        OUTC('\n');
        taglistpool_clear(&in->tlp, in);
        goto loop;
    }
#line 413 "gen/re2c/submatch_33__rep_alt_5_3_2.cc"
yy17:
	yych = *(in->mar = ++in->cur);
	if (yych != 'a') goto yy15;
yy18:
	++in->cur;
	if (in->lim <= in->cur) if (fill_padding(in, 1) != 0) return -2;
	yych = *in->cur;
	if (yych == '\n') {
		taglist(&in->yytm1, in->tok, in->cur, &in->tlp);
		goto yy16;
	}
	if (yych == 'a') {
		in->yytm2 = in->yytm1;
		taglist(&in->yytm2, in->tok, in->cur, &in->tlp);
		goto yy20;
	}
yy19:
	in->cur = in->mar;
	goto yy15;
yy20:
	++in->cur;
	if (in->lim <= in->cur) if (fill_padding(in, 1) != 0) return -2;
	yych = *in->cur;
	if (yych == '\n') {
		taglist(&in->yytm1, in->tok, in->cur, &in->tlp);
		goto yy16;
	}
	if (yych != 'a') goto yy19;
	in->yytm3 = in->yytm1;
	taglist(&in->yytm3, in->tok, in->cur, &in->tlp);
	++in->cur;
	if (in->lim <= in->cur) if (fill_padding(in, 1) != 0) return -2;
	yych = *in->cur;
	if (yych == '\n') {
		in->yytm1 = in->yytm2;
		taglist(&in->yytm1, in->tok, in->cur, &in->tlp);
		goto yy16;
	}
	if (yych != 'a') goto yy19;
	++in->cur;
	if (in->lim <= in->cur) if (fill_padding(in, 1) != 0) return -2;
	yych = *in->cur;
	if (yych == '\n') {
		taglist(&in->yytm1, in->tok, in->cur, &in->tlp);
		goto yy16;
	}
	if (yych != 'a') goto yy19;
	taglist(&in->yytm1, in->tok, in->cur, &in->tlp);
	++in->cur;
	if (in->lim <= in->cur) if (fill_padding(in, 1) != 0) return -2;
	yych = *in->cur;
	if (yych == '\n') {
		in->yytm1 = in->yytm3;
		taglist(&in->yytm1, in->tok, in->cur, &in->tlp);
		goto yy16;
	}
	if (yych == 'a') goto yy18;
	goto yy19;
}
#line 183 "../../../benchmarks/c/src/re2c/base.re"

}

#define FN_BENCH(suffix) \
void bench_yyfill_##suffix::operator()( \
        benchmark::State &state, const char* input, long expected) const { \
    long count; \
    for (auto _ : state) { \
        input_t in; \
        init_input_##suffix(&in, input); \
        count = lex_yyfill_##suffix(&in); \
        free_input(&in); \
    } \
    if (count != expected) state.SkipWithError("error"); \
}
FN_BENCH(eofrule)
FN_BENCH(padding)
#undef FN_BENCH

#define FN_TEST(suffix) \
bool test_yyfill_##suffix(const char* input, long expected) { \
    input_t in; \
    init_input_##suffix(&in, input); \
    \
    long count = lex_yyfill_##suffix(&in); \
    switch (count) { \
    default: \
        if (count != expected) { \
            fprintf(stderr, "wrong count, expected %ld, got %ld\n", expected, count); \
        } \
        break; \
    case -1: \
        fprintf(stderr, "syntax error\n"); \
        break; \
    case -2: \
        fprintf(stderr, "yyfill error\n"); \
        break; \
    } \
    \
    free_input(&in); \
    return count == expected; \
}
FN_TEST(eofrule)
FN_TEST(padding)
#undef FN_TEST
#line 27 "../../../benchmarks/c/src/re2c/submatch_33__rep_alt_5_3_2.re"


} // namespace re2c_submatch_33__rep_alt_5_3_2

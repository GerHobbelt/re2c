/* Generated by re2c */
#include "re2c/base.h"

namespace re2c_submatch_06__email {





#define YYMAXFILL 3


struct input_t {
    FILE* file;
    char *buf;
    char *lim;
    char *cur;
    char *mar;
    char *tok;
    char *yyt1;

    
    taglistpool_t tlp;
    int eof;
};

static inline void free_input(input_t *in) {
    free(in->buf);
    taglistpool_free(&in->tlp);
    if (in->file) fclose(in->file);
}

static inline int fill_buffered_eof(input_t *in) {
    size_t free;
    if (in->eof) return 1;

    free = in->tok - in->buf;
    assert(free > 0);

    memmove(in->buf, in->tok, in->lim - in->tok);
    in->lim -= free;
    in->cur -= free;
    in->mar -= free;
    in->tok -= free;
    if (in->yyt1) in->yyt1 -= free;


    in->lim += fread(in->lim, 1, free, in->file);
    in->lim[0] = 0;

    if (in->lim < in->buf + SIZE) {
        in->eof = 1;
    }

    return 0;
}

static inline int fill_buffered_scc(input_t *in, size_t need) {
    size_t free;
    if (in->eof) return 1;

    free = in->tok - in->buf;
    assert(free >= need);

    memmove(in->buf, in->tok, in->lim - in->tok);
    in->lim -= free;
    in->cur -= free;
    in->mar -= free;
    in->tok -= free;
    if (in->yyt1) in->yyt1 -= free;


    in->lim += fread(in->lim, 1, free, in->file);

    if (in->lim < in->buf + SIZE) {
        in->eof = 1;
        memset(in->lim, 0, YYMAXFILL);
        in->lim += YYMAXFILL;
    }

    return 0;
}

static inline void init_input_simple(input_t *in, const char* fname) {
    FILE* f = fopen(fname, "rb");

    fseek(f, 0, SEEK_END);
    size_t flen = (size_t) ftell(f);
    fseek(f, 0, SEEK_SET);

    in->file = nullptr; // unused
    in->buf = (char*) malloc(flen + 1);
    in->lim = nullptr; // unused
    in->cur = in->mar = in->tok = in->buf;
    in->yyt1 = 0;

    
    taglistpool_init(&in->tlp);
    in->eof = 0; // unused

    fread(in->buf, 1, flen, f);
    in->buf[flen] = 0;

    fclose(f);
}

static inline void init_input_buffered_eof(input_t *in, const char* fname) {
    in->file = fopen(fname, "rb");
    in->buf = (char*) malloc(SIZE + 1);
    in->lim = in->buf + SIZE;
    in->cur = in->lim;
    in->mar = in->lim;
    in->tok = in->lim;
    in->yyt1 = 0;

    
    taglistpool_init(&in->tlp);
    in->eof = 0;
    fill_buffered_eof(in);
}

static inline void init_input_buffered_scc(input_t *in, const char* fname) {
    in->file = fopen(fname, "rb");
    in->buf = (char*) malloc(SIZE + YYMAXFILL);
    in->lim = in->buf + SIZE;
    in->cur = in->lim;
    in->mar = in->lim;
    in->tok = in->lim;
    in->yyt1 = 0;

    
    taglistpool_init(&in->tlp);
    in->eof = 0;
}

#define YYCURSOR cur
#define YYMARKER mar
#define YYTOKEN tok
#define TLP_CLEAR() do { \
    in->tlp.next = in->tlp.head; \
     \
} while (0)

int lex_simple(input_t *in) {
    char *cur = in->buf, *mar, *tok;
    (void) tok; // may be unused
    char *yyt1;

    
    const char* p;
    
    long count = 0;
loop:
    tok = cur;
    
{
	char yych;
	static const unsigned char yybm[256] = {
		  0,  16,  16,  16,  16,  16,  16,  16,
		 16,  16,   0,  16,  16,  16,  16,  16,
		 16,  16,  16,  16,  16,  16,  16,  16,
		 16,  16,  16,  16,  16,  16,  16,  16,
		 16,  48,  16,  48,  48,  48,  48,  48,
		 16,  16,  48,  48,  16, 176,  16,  48,
		112, 112, 112, 112, 112, 112, 112, 112,
		112, 112,  16,  16,  16,  48,  16,  48,
		 16,  16,  16,  16,  16,  16,  16,  16,
		 16,  16,  16,  16,  16,  16,  16,  16,
		 16,  16,  16,  16,  16,  16,  16,  16,
		 16,  16,  16,  16,  16,  16,  48,  48,
		 48, 112, 112, 112, 112, 112, 112, 112,
		112, 112, 112, 112, 112, 112, 112, 112,
		112, 112, 112, 112, 112, 112, 112, 112,
		112, 112, 112,  48,  48,  48,  48,  16,
		 16,  16,  16,  16,  16,  16,  16,  16,
		 16,  16,  16,  16,  16,  16,  16,  16,
		 16,  16,  16,  16,  16,  16,  16,  16,
		 16,  16,  16,  16,  16,  16,  16,  16,
		 16,  16,  16,  16,  16,  16,  16,  16,
		 16,  16,  16,  16,  16,  16,  16,  16,
		 16,  16,  16,  16,  16,  16,  16,  16,
		 16,  16,  16,  16,  16,  16,  16,  16,
		 16,  16,  16,  16,  16,  16,  16,  16,
		 16,  16,  16,  16,  16,  16,  16,  16,
		 16,  16,  16,  16,  16,  16,  16,  16,
		 16,  16,  16,  16,  16,  16,  16,  16,
		 16,  16,  16,  16,  16,  16,  16,  16,
		 16,  16,  16,  16,  16,  16,  16,  16,
		 16,  16,  16,  16,  16,  16,  16,  16,
		 16,  16,  16,  16,  16,  16,  16,  16
	};
	yych = *YYCURSOR;
	if (yych <= ',') {
		if (yych <= '!') {
			if (yych <= '\t') {
				if (yych >= 0x01) goto yy1;
			} else {
				if (yych <= '\n') goto yy3;
				if (yych <= ' ') goto yy1;
				goto yy4;
			}
		} else {
			if (yych <= '\'') {
				if (yych <= '"') goto yy1;
				goto yy4;
			} else {
				if (yych <= ')') goto yy1;
				if (yych <= '+') goto yy4;
				goto yy1;
			}
		}
	} else {
		if (yych <= '=') {
			if (yych <= '.') {
				if (yych <= '-') goto yy4;
				goto yy1;
			} else {
				if (yych <= '9') goto yy4;
				if (yych <= '<') goto yy1;
				goto yy4;
			}
		} else {
			if (yych <= '?') {
				if (yych <= '>') goto yy1;
				goto yy4;
			} else {
				if (yych <= ']') goto yy1;
				if (yych <= '~') goto yy4;
				goto yy1;
			}
		}
	}
	++YYCURSOR;
	{ return count; }
yy1:
	yych = *(YYMARKER = ++YYCURSOR);
	if (yych >= 0x01) goto yy6;
yy2:
	{ return -1; }
yy3:
	++YYCURSOR;
	{ goto loop; }
yy4:
	yych = *(YYMARKER = ++YYCURSOR);
	if (yybm[0+yych] & 32) goto yy8;
	if (yych <= '.') {
		if (yych <= 0x00) goto yy2;
		if (yych <= ',') goto yy6;
		goto yy9;
	} else {
		if (yych <= '>') goto yy6;
		if (yych <= '@') goto yy10;
		goto yy6;
	}
yy5:
	yych = *++YYCURSOR;
yy6:
	if (yybm[0+yych] & 16) goto yy5;
	if (yych >= 0x01) goto yy3;
yy7:
	YYCURSOR = YYMARKER;
	goto yy2;
yy8:
	yych = *++YYCURSOR;
	if (yybm[0+yych] & 32) goto yy8;
	if (yych <= ',') {
		if (yych <= 0x00) goto yy7;
		if (yych == '\n') goto yy3;
		goto yy5;
	} else {
		if (yych <= '.') goto yy9;
		if (yych <= '>') goto yy5;
		if (yych <= '@') goto yy10;
		goto yy5;
	}
yy9:
	yych = *++YYCURSOR;
	if (yybm[0+yych] & 32) goto yy8;
	if (yych <= 0x00) goto yy7;
	if (yych == '\n') goto yy3;
	goto yy5;
yy10:
	yych = *++YYCURSOR;
	if (yych <= '/') goto yy6;
	if (yych <= '9') {
		yyt1 = YYCURSOR;
		goto yy11;
	}
	if (yych <= '`') goto yy6;
	if (yych >= '{') goto yy6;
	yyt1 = YYCURSOR;
yy11:
	yych = *++YYCURSOR;
	if (yybm[0+yych] & 128) goto yy12;
	if (yych <= '.') {
		if (yych <= '\t') {
			if (yych <= 0x00) goto yy7;
			goto yy5;
		} else {
			if (yych <= '\n') goto yy3;
			if (yych <= ',') goto yy5;
			goto yy13;
		}
	} else {
		if (yych <= '9') {
			if (yych <= '/') goto yy5;
			goto yy11;
		} else {
			if (yych <= '`') goto yy5;
			if (yych <= 'z') goto yy11;
			goto yy5;
		}
	}
yy12:
	yych = *++YYCURSOR;
	if (yybm[0+yych] & 128) goto yy12;
	if (yych <= '/') {
		if (yych <= 0x00) goto yy7;
		if (yych == '\n') goto yy3;
		goto yy5;
	} else {
		if (yych <= '9') goto yy11;
		if (yych <= '`') goto yy5;
		if (yych <= 'z') goto yy11;
		goto yy5;
	}
yy13:
	yych = *++YYCURSOR;
	if (yych <= '/') {
		if (yych <= 0x00) goto yy7;
		if (yych == '\n') goto yy3;
		goto yy5;
	} else {
		if (yych <= '9') goto yy14;
		if (yych <= '`') goto yy5;
		if (yych >= '{') goto yy5;
	}
yy14:
	yych = *++YYCURSOR;
	if (yych <= '-') {
		if (yych <= '\t') {
			if (yych <= 0x00) goto yy7;
			goto yy5;
		} else {
			if (yych <= '\n') goto yy15;
			if (yych <= ',') goto yy5;
			goto yy16;
		}
	} else {
		if (yych <= '9') {
			if (yych <= '.') goto yy13;
			if (yych <= '/') goto yy5;
			goto yy14;
		} else {
			if (yych <= '`') goto yy5;
			if (yych <= 'z') goto yy14;
			goto yy5;
		}
	}
yy15:
	++YYCURSOR;
	p = yyt1;
	{
        OUTC(' ');
        OUTS(YYTOKEN, p - 1);
        OUTC(' ');
        OUTS(p, YYCURSOR - 1);
        OUTC('\n');
        goto loop;
    }
yy16:
	yych = *++YYCURSOR;
	if (yych <= '-') {
		if (yych <= '\t') {
			if (yych <= 0x00) goto yy7;
			goto yy5;
		} else {
			if (yych <= '\n') goto yy3;
			if (yych <= ',') goto yy5;
			goto yy16;
		}
	} else {
		if (yych <= '9') {
			if (yych <= '/') goto yy5;
			goto yy14;
		} else {
			if (yych <= '`') goto yy5;
			if (yych <= 'z') goto yy14;
			goto yy5;
		}
	}
}

}

#undef YYCURSOR
#undef YYMARKER
#undef YYTOKEN
#undef TLP_CLEAR

#define YYCURSOR in->cur
#define YYMARKER in->mar
#define YYLIMIT in->lim
#define YYTOKEN in->tok
#define TLP_CLEAR() do { \
    in->tlp.next = in->tlp.head; \
     \
} while (0)

int lex_buffered_eof(input_t *in) {
    const char* p;
    
    long count = 0;
loop:
    in->tok = in->cur;
    
{
	char yych;
yyFillLabel0:
	yych = *YYCURSOR;
	switch (yych) {
		case 0x00:
			if (YYLIMIT <= YYCURSOR) {
				if (fill_buffered_eof(in) == 0) goto yyFillLabel0;
				goto yy35;
			}
			goto yy18;
		case '\n': goto yy21;
		case '!':
		case '#':
		case '$':
		case '%':
		case '&':
		case '\'':
		case '*':
		case '+':
		case '-':
		case '/':
		case '0':
		case '1':
		case '2':
		case '3':
		case '4':
		case '5':
		case '6':
		case '7':
		case '8':
		case '9':
		case '=':
		case '?':
		case '^':
		case '_':
		case '`':
		case 'a':
		case 'b':
		case 'c':
		case 'd':
		case 'e':
		case 'f':
		case 'g':
		case 'h':
		case 'i':
		case 'j':
		case 'k':
		case 'l':
		case 'm':
		case 'n':
		case 'o':
		case 'p':
		case 'q':
		case 'r':
		case 's':
		case 't':
		case 'u':
		case 'v':
		case 'w':
		case 'x':
		case 'y':
		case 'z':
		case '{':
		case '|':
		case '}':
		case '~': goto yy22;
		default: goto yy20;
	}
yy18:
	++YYCURSOR;
yy19:
	{ return -1; }
yy20:
	YYMARKER = ++YYCURSOR;
yyFillLabel1:
	yych = *YYCURSOR;
	if (yych <= 0x00) {
		if (YYLIMIT <= YYCURSOR) {
			if (fill_buffered_eof(in) == 0) goto yyFillLabel1;
		}
		goto yy19;
	}
	goto yy24;
yy21:
	++YYCURSOR;
	{ goto loop; }
yy22:
	YYMARKER = ++YYCURSOR;
yyFillLabel2:
	yych = *YYCURSOR;
	switch (yych) {
		case 0x00:
			if (YYLIMIT <= YYCURSOR) {
				if (fill_buffered_eof(in) == 0) goto yyFillLabel2;
			}
			goto yy19;
		case '!':
		case '#':
		case '$':
		case '%':
		case '&':
		case '\'':
		case '*':
		case '+':
		case '-':
		case '/':
		case '0':
		case '1':
		case '2':
		case '3':
		case '4':
		case '5':
		case '6':
		case '7':
		case '8':
		case '9':
		case '=':
		case '?':
		case '^':
		case '_':
		case '`':
		case 'a':
		case 'b':
		case 'c':
		case 'd':
		case 'e':
		case 'f':
		case 'g':
		case 'h':
		case 'i':
		case 'j':
		case 'k':
		case 'l':
		case 'm':
		case 'n':
		case 'o':
		case 'p':
		case 'q':
		case 'r':
		case 's':
		case 't':
		case 'u':
		case 'v':
		case 'w':
		case 'x':
		case 'y':
		case 'z':
		case '{':
		case '|':
		case '}':
		case '~': goto yy26;
		case '.': goto yy27;
		case '@': goto yy28;
		default: goto yy24;
	}
yy23:
	++YYCURSOR;
yyFillLabel3:
	yych = *YYCURSOR;
yy24:
	switch (yych) {
		case 0x00:
			if (YYLIMIT <= YYCURSOR) {
				if (fill_buffered_eof(in) == 0) goto yyFillLabel3;
			}
			goto yy25;
		case '\n': goto yy21;
		default: goto yy23;
	}
yy25:
	YYCURSOR = YYMARKER;
	goto yy19;
yy26:
	++YYCURSOR;
yyFillLabel4:
	yych = *YYCURSOR;
	switch (yych) {
		case 0x00:
			if (YYLIMIT <= YYCURSOR) {
				if (fill_buffered_eof(in) == 0) goto yyFillLabel4;
			}
			goto yy25;
		case '\n': goto yy21;
		case '!':
		case '#':
		case '$':
		case '%':
		case '&':
		case '\'':
		case '*':
		case '+':
		case '-':
		case '/':
		case '0':
		case '1':
		case '2':
		case '3':
		case '4':
		case '5':
		case '6':
		case '7':
		case '8':
		case '9':
		case '=':
		case '?':
		case '^':
		case '_':
		case '`':
		case 'a':
		case 'b':
		case 'c':
		case 'd':
		case 'e':
		case 'f':
		case 'g':
		case 'h':
		case 'i':
		case 'j':
		case 'k':
		case 'l':
		case 'm':
		case 'n':
		case 'o':
		case 'p':
		case 'q':
		case 'r':
		case 's':
		case 't':
		case 'u':
		case 'v':
		case 'w':
		case 'x':
		case 'y':
		case 'z':
		case '{':
		case '|':
		case '}':
		case '~': goto yy26;
		case '.': goto yy27;
		case '@': goto yy28;
		default: goto yy23;
	}
yy27:
	++YYCURSOR;
yyFillLabel5:
	yych = *YYCURSOR;
	switch (yych) {
		case 0x00:
			if (YYLIMIT <= YYCURSOR) {
				if (fill_buffered_eof(in) == 0) goto yyFillLabel5;
			}
			goto yy25;
		case '\n': goto yy21;
		case '!':
		case '#':
		case '$':
		case '%':
		case '&':
		case '\'':
		case '*':
		case '+':
		case '-':
		case '/':
		case '0':
		case '1':
		case '2':
		case '3':
		case '4':
		case '5':
		case '6':
		case '7':
		case '8':
		case '9':
		case '=':
		case '?':
		case '^':
		case '_':
		case '`':
		case 'a':
		case 'b':
		case 'c':
		case 'd':
		case 'e':
		case 'f':
		case 'g':
		case 'h':
		case 'i':
		case 'j':
		case 'k':
		case 'l':
		case 'm':
		case 'n':
		case 'o':
		case 'p':
		case 'q':
		case 'r':
		case 's':
		case 't':
		case 'u':
		case 'v':
		case 'w':
		case 'x':
		case 'y':
		case 'z':
		case '{':
		case '|':
		case '}':
		case '~': goto yy26;
		default: goto yy23;
	}
yy28:
	++YYCURSOR;
yyFillLabel6:
	yych = *YYCURSOR;
	switch (yych) {
		case 0x00:
			if (YYLIMIT <= YYCURSOR) {
				if (fill_buffered_eof(in) == 0) goto yyFillLabel6;
			}
			goto yy25;
		case '0':
		case '1':
		case '2':
		case '3':
		case '4':
		case '5':
		case '6':
		case '7':
		case '8':
		case '9':
		case 'a':
		case 'b':
		case 'c':
		case 'd':
		case 'e':
		case 'f':
		case 'g':
		case 'h':
		case 'i':
		case 'j':
		case 'k':
		case 'l':
		case 'm':
		case 'n':
		case 'o':
		case 'p':
		case 'q':
		case 'r':
		case 's':
		case 't':
		case 'u':
		case 'v':
		case 'w':
		case 'x':
		case 'y':
		case 'z':
			in->yyt1 = YYCURSOR;
			goto yy29;
		default: goto yy24;
	}
yy29:
	++YYCURSOR;
yyFillLabel7:
	yych = *YYCURSOR;
	switch (yych) {
		case 0x00:
			if (YYLIMIT <= YYCURSOR) {
				if (fill_buffered_eof(in) == 0) goto yyFillLabel7;
			}
			goto yy25;
		case '\n': goto yy21;
		case '-': goto yy30;
		case '.': goto yy31;
		case '0':
		case '1':
		case '2':
		case '3':
		case '4':
		case '5':
		case '6':
		case '7':
		case '8':
		case '9':
		case 'a':
		case 'b':
		case 'c':
		case 'd':
		case 'e':
		case 'f':
		case 'g':
		case 'h':
		case 'i':
		case 'j':
		case 'k':
		case 'l':
		case 'm':
		case 'n':
		case 'o':
		case 'p':
		case 'q':
		case 'r':
		case 's':
		case 't':
		case 'u':
		case 'v':
		case 'w':
		case 'x':
		case 'y':
		case 'z': goto yy29;
		default: goto yy23;
	}
yy30:
	++YYCURSOR;
yyFillLabel8:
	yych = *YYCURSOR;
	switch (yych) {
		case 0x00:
			if (YYLIMIT <= YYCURSOR) {
				if (fill_buffered_eof(in) == 0) goto yyFillLabel8;
			}
			goto yy25;
		case '\n': goto yy21;
		case '-': goto yy30;
		case '0':
		case '1':
		case '2':
		case '3':
		case '4':
		case '5':
		case '6':
		case '7':
		case '8':
		case '9':
		case 'a':
		case 'b':
		case 'c':
		case 'd':
		case 'e':
		case 'f':
		case 'g':
		case 'h':
		case 'i':
		case 'j':
		case 'k':
		case 'l':
		case 'm':
		case 'n':
		case 'o':
		case 'p':
		case 'q':
		case 'r':
		case 's':
		case 't':
		case 'u':
		case 'v':
		case 'w':
		case 'x':
		case 'y':
		case 'z': goto yy29;
		default: goto yy23;
	}
yy31:
	++YYCURSOR;
yyFillLabel9:
	yych = *YYCURSOR;
	switch (yych) {
		case 0x00:
			if (YYLIMIT <= YYCURSOR) {
				if (fill_buffered_eof(in) == 0) goto yyFillLabel9;
			}
			goto yy25;
		case '\n': goto yy21;
		case '0':
		case '1':
		case '2':
		case '3':
		case '4':
		case '5':
		case '6':
		case '7':
		case '8':
		case '9':
		case 'a':
		case 'b':
		case 'c':
		case 'd':
		case 'e':
		case 'f':
		case 'g':
		case 'h':
		case 'i':
		case 'j':
		case 'k':
		case 'l':
		case 'm':
		case 'n':
		case 'o':
		case 'p':
		case 'q':
		case 'r':
		case 's':
		case 't':
		case 'u':
		case 'v':
		case 'w':
		case 'x':
		case 'y':
		case 'z': goto yy32;
		default: goto yy23;
	}
yy32:
	++YYCURSOR;
yyFillLabel10:
	yych = *YYCURSOR;
	switch (yych) {
		case 0x00:
			if (YYLIMIT <= YYCURSOR) {
				if (fill_buffered_eof(in) == 0) goto yyFillLabel10;
			}
			goto yy25;
		case '\n': goto yy33;
		case '-': goto yy34;
		case '.': goto yy31;
		case '0':
		case '1':
		case '2':
		case '3':
		case '4':
		case '5':
		case '6':
		case '7':
		case '8':
		case '9':
		case 'a':
		case 'b':
		case 'c':
		case 'd':
		case 'e':
		case 'f':
		case 'g':
		case 'h':
		case 'i':
		case 'j':
		case 'k':
		case 'l':
		case 'm':
		case 'n':
		case 'o':
		case 'p':
		case 'q':
		case 'r':
		case 's':
		case 't':
		case 'u':
		case 'v':
		case 'w':
		case 'x':
		case 'y':
		case 'z': goto yy32;
		default: goto yy23;
	}
yy33:
	++YYCURSOR;
	p = in->yyt1;
	{
        OUTC(' ');
        OUTS(YYTOKEN, p - 1);
        OUTC(' ');
        OUTS(p, YYCURSOR - 1);
        OUTC('\n');
        goto loop;
    }
yy34:
	++YYCURSOR;
yyFillLabel11:
	yych = *YYCURSOR;
	switch (yych) {
		case 0x00:
			if (YYLIMIT <= YYCURSOR) {
				if (fill_buffered_eof(in) == 0) goto yyFillLabel11;
			}
			goto yy25;
		case '\n': goto yy21;
		case '-': goto yy34;
		case '0':
		case '1':
		case '2':
		case '3':
		case '4':
		case '5':
		case '6':
		case '7':
		case '8':
		case '9':
		case 'a':
		case 'b':
		case 'c':
		case 'd':
		case 'e':
		case 'f':
		case 'g':
		case 'h':
		case 'i':
		case 'j':
		case 'k':
		case 'l':
		case 'm':
		case 'n':
		case 'o':
		case 'p':
		case 'q':
		case 'r':
		case 's':
		case 't':
		case 'u':
		case 'v':
		case 'w':
		case 'x':
		case 'y':
		case 'z': goto yy32;
		default: goto yy23;
	}
yy35:
	{ return count; }
}

}

int lex_buffered_scc(input_t *in) {
    const char* p;
    
    long count = 0;
loop:
    in->tok = in->cur;
    
{
	char yych;
	static const unsigned char yybm[256] = {
		  0,  16,  16,  16,  16,  16,  16,  16,
		 16,  16,   0,  16,  16,  16,  16,  16,
		 16,  16,  16,  16,  16,  16,  16,  16,
		 16,  16,  16,  16,  16,  16,  16,  16,
		 16,  48,  16,  48,  48,  48,  48,  48,
		 16,  16,  48,  48,  16, 176,  16,  48,
		112, 112, 112, 112, 112, 112, 112, 112,
		112, 112,  16,  16,  16,  48,  16,  48,
		 16,  16,  16,  16,  16,  16,  16,  16,
		 16,  16,  16,  16,  16,  16,  16,  16,
		 16,  16,  16,  16,  16,  16,  16,  16,
		 16,  16,  16,  16,  16,  16,  48,  48,
		 48, 112, 112, 112, 112, 112, 112, 112,
		112, 112, 112, 112, 112, 112, 112, 112,
		112, 112, 112, 112, 112, 112, 112, 112,
		112, 112, 112,  48,  48,  48,  48,  16,
		 16,  16,  16,  16,  16,  16,  16,  16,
		 16,  16,  16,  16,  16,  16,  16,  16,
		 16,  16,  16,  16,  16,  16,  16,  16,
		 16,  16,  16,  16,  16,  16,  16,  16,
		 16,  16,  16,  16,  16,  16,  16,  16,
		 16,  16,  16,  16,  16,  16,  16,  16,
		 16,  16,  16,  16,  16,  16,  16,  16,
		 16,  16,  16,  16,  16,  16,  16,  16,
		 16,  16,  16,  16,  16,  16,  16,  16,
		 16,  16,  16,  16,  16,  16,  16,  16,
		 16,  16,  16,  16,  16,  16,  16,  16,
		 16,  16,  16,  16,  16,  16,  16,  16,
		 16,  16,  16,  16,  16,  16,  16,  16,
		 16,  16,  16,  16,  16,  16,  16,  16,
		 16,  16,  16,  16,  16,  16,  16,  16,
		 16,  16,  16,  16,  16,  16,  16,  16
	};
	if ((YYLIMIT - YYCURSOR) < 3) if (fill_buffered_scc(in, 3) != 0) return -2;
	yych = *YYCURSOR;
	if (yych <= ',') {
		if (yych <= '!') {
			if (yych <= '\t') {
				if (yych >= 0x01) goto yy37;
			} else {
				if (yych <= '\n') goto yy39;
				if (yych <= ' ') goto yy37;
				goto yy40;
			}
		} else {
			if (yych <= '\'') {
				if (yych <= '"') goto yy37;
				goto yy40;
			} else {
				if (yych <= ')') goto yy37;
				if (yych <= '+') goto yy40;
				goto yy37;
			}
		}
	} else {
		if (yych <= '=') {
			if (yych <= '.') {
				if (yych <= '-') goto yy40;
				goto yy37;
			} else {
				if (yych <= '9') goto yy40;
				if (yych <= '<') goto yy37;
				goto yy40;
			}
		} else {
			if (yych <= '?') {
				if (yych <= '>') goto yy37;
				goto yy40;
			} else {
				if (yych <= ']') goto yy37;
				if (yych <= '~') goto yy40;
				goto yy37;
			}
		}
	}
	++YYCURSOR;
	{ return count; }
yy37:
	yych = *(YYMARKER = ++YYCURSOR);
	if (yych >= 0x01) goto yy42;
yy38:
	{ return -1; }
yy39:
	++YYCURSOR;
	{ goto loop; }
yy40:
	yych = *(YYMARKER = ++YYCURSOR);
	if (yybm[0+yych] & 32) goto yy44;
	if (yych <= '.') {
		if (yych <= 0x00) goto yy38;
		if (yych <= ',') goto yy42;
		goto yy45;
	} else {
		if (yych <= '>') goto yy42;
		if (yych <= '@') goto yy46;
		goto yy42;
	}
yy41:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) if (fill_buffered_scc(in, 1) != 0) return -2;
	yych = *YYCURSOR;
yy42:
	if (yybm[0+yych] & 16) goto yy41;
	if (yych >= 0x01) goto yy39;
yy43:
	YYCURSOR = YYMARKER;
	goto yy38;
yy44:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 2) if (fill_buffered_scc(in, 2) != 0) return -2;
	yych = *YYCURSOR;
	if (yybm[0+yych] & 32) goto yy44;
	if (yych <= ',') {
		if (yych <= 0x00) goto yy43;
		if (yych == '\n') goto yy39;
		goto yy41;
	} else {
		if (yych <= '.') goto yy45;
		if (yych <= '>') goto yy41;
		if (yych <= '@') goto yy46;
		goto yy41;
	}
yy45:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) if (fill_buffered_scc(in, 1) != 0) return -2;
	yych = *YYCURSOR;
	if (yybm[0+yych] & 32) goto yy44;
	if (yych <= 0x00) goto yy43;
	if (yych == '\n') goto yy39;
	goto yy41;
yy46:
	yych = *++YYCURSOR;
	if (yych <= '/') goto yy42;
	if (yych <= '9') {
		in->yyt1 = YYCURSOR;
		goto yy47;
	}
	if (yych <= '`') goto yy42;
	if (yych >= '{') goto yy42;
	in->yyt1 = YYCURSOR;
yy47:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) if (fill_buffered_scc(in, 1) != 0) return -2;
	yych = *YYCURSOR;
	if (yybm[0+yych] & 128) goto yy48;
	if (yych <= '.') {
		if (yych <= '\t') {
			if (yych <= 0x00) goto yy43;
			goto yy41;
		} else {
			if (yych <= '\n') goto yy39;
			if (yych <= ',') goto yy41;
			goto yy49;
		}
	} else {
		if (yych <= '9') {
			if (yych <= '/') goto yy41;
			goto yy47;
		} else {
			if (yych <= '`') goto yy41;
			if (yych <= 'z') goto yy47;
			goto yy41;
		}
	}
yy48:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) if (fill_buffered_scc(in, 1) != 0) return -2;
	yych = *YYCURSOR;
	if (yybm[0+yych] & 128) goto yy48;
	if (yych <= '/') {
		if (yych <= 0x00) goto yy43;
		if (yych == '\n') goto yy39;
		goto yy41;
	} else {
		if (yych <= '9') goto yy47;
		if (yych <= '`') goto yy41;
		if (yych <= 'z') goto yy47;
		goto yy41;
	}
yy49:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) if (fill_buffered_scc(in, 1) != 0) return -2;
	yych = *YYCURSOR;
	if (yych <= '/') {
		if (yych <= 0x00) goto yy43;
		if (yych == '\n') goto yy39;
		goto yy41;
	} else {
		if (yych <= '9') goto yy50;
		if (yych <= '`') goto yy41;
		if (yych >= '{') goto yy41;
	}
yy50:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) if (fill_buffered_scc(in, 1) != 0) return -2;
	yych = *YYCURSOR;
	if (yych <= '-') {
		if (yych <= '\t') {
			if (yych <= 0x00) goto yy43;
			goto yy41;
		} else {
			if (yych <= '\n') goto yy51;
			if (yych <= ',') goto yy41;
			goto yy52;
		}
	} else {
		if (yych <= '9') {
			if (yych <= '.') goto yy49;
			if (yych <= '/') goto yy41;
			goto yy50;
		} else {
			if (yych <= '`') goto yy41;
			if (yych <= 'z') goto yy50;
			goto yy41;
		}
	}
yy51:
	++YYCURSOR;
	p = in->yyt1;
	{
        OUTC(' ');
        OUTS(YYTOKEN, p - 1);
        OUTC(' ');
        OUTS(p, YYCURSOR - 1);
        OUTC('\n');
        goto loop;
    }
yy52:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) if (fill_buffered_scc(in, 1) != 0) return -2;
	yych = *YYCURSOR;
	if (yych <= '-') {
		if (yych <= '\t') {
			if (yych <= 0x00) goto yy43;
			goto yy41;
		} else {
			if (yych <= '\n') goto yy39;
			if (yych <= ',') goto yy41;
			goto yy52;
		}
	} else {
		if (yych <= '9') {
			if (yych <= '/') goto yy41;
			goto yy50;
		} else {
			if (yych <= '`') goto yy41;
			if (yych <= 'z') goto yy50;
			goto yy41;
		}
	}
}

}

#undef YYCURSOR
#undef YYMARKER
#undef YYLIMIT
#undef YYTOKEN
#undef TLP_CLEAR

#define FN_BENCH(suffix) \
void bench_##suffix::operator()( \
        benchmark::State &state, const char* input, long expected) const { \
    long count = 0; \
    for (auto _ : state) { \
        input_t in; \
        init_input_##suffix(&in, input); \
        count = lex_##suffix(&in); \
        free_input(&in); \
    } \
    if (count != expected) state.SkipWithError("error"); \
}
FN_BENCH(simple)
FN_BENCH(buffered_eof)
FN_BENCH(buffered_scc)
#undef FN_BENCH

#define FN_TEST(suffix) \
bool test_##suffix(const char* input, long expected) { \
    input_t in; \
    init_input_##suffix(&in, input); \
    long count = lex_##suffix(&in); \
    switch (count) { \
    default: \
        if (count != expected) { \
            fprintf(stderr, "wrong count, expected %ld, got %ld\n", expected, count); \
        } \
        break; \
    case -1: \
        fprintf(stderr, "syntax error\n"); \
        break; \
    case -2: \
        fprintf(stderr, "yyfill error\n"); \
        break; \
    } \
    free_input(&in); \
    return count == expected; \
}
FN_TEST(simple)
FN_TEST(buffered_eof)
FN_TEST(buffered_scc)
#undef FN_TEST


} // namespace re2c_submatch_06_email

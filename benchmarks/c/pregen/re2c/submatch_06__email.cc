/* Generated by re2c */
#line 1 "../../../benchmarks/c/src/re2c/submatch_06__email.re"
#include "re2c/base.h"

namespace re2c_submatch_06__email {

#line 24 "../../../benchmarks/c/src/re2c/submatch_06__email.re"


#line 1 "../../../benchmarks/c/src/re2c/base.re"
#line 11 "../../../benchmarks/c/src/re2c/base.re"


struct input_t {
    FILE* file;
    char *buf;
    char *lim;
    char *cur;
    char *mar;
    char *tok;
    
#line 23 "gen/re2c/submatch_06__email.cc"
char *yyt1;
#line 20 "../../../benchmarks/c/src/re2c/base.re"

    
#line 28 "gen/re2c/submatch_06__email.cc"
#line 21 "../../../benchmarks/c/src/re2c/base.re"

    taglistpool_t tlp;
    int eof;
};

static inline void taglistpool_clear(taglistpool_t *tlp, input_t *in) {
    tlp->next = tlp->head;
    
#line 38 "gen/re2c/submatch_06__email.cc"
#line 28 "../../../benchmarks/c/src/re2c/base.re"

}

static inline void taglistpool_init(taglistpool_t *tlp) {
    static const unsigned size = 1024 * 1024;
    tlp->head = (taglist_t*)malloc(size * sizeof(taglist_t));
    tlp->next = tlp->head;
    tlp->last = tlp->head + size;
}

static inline void taglistpool_free(taglistpool_t *tlp) {
    free(tlp->head);
    tlp->head = tlp->next = tlp->last = NULL;
}

static inline void taglist(taglist_t **ptl, const char *b, const char *t, taglistpool_t *tlp) {
#ifdef GROW_MTAG_LIST
    if (tlp->next >= tlp->last) {
        const unsigned size = tlp->last - tlp->head;
        taglist_t *head = (taglist_t*)malloc(2 * size * sizeof(taglist_t));
        memcpy(head, tlp->head, size * sizeof(taglist_t));
        free(tlp->head);
        tlp->head = head;
        tlp->next = head + size;
        tlp->last = head + size * 2;
    }
#else
    assert(tlp->next < tlp->last);
#endif
    taglist_t *tl = tlp->next++;
    tl->pred = *ptl;
    tl->dist = t - b;
    *ptl = tl;
}

static inline void free_input(input_t *in) {
    free(in->buf);
    taglistpool_free(&in->tlp);
    fclose(in->file);
}

#line 74 "../../../benchmarks/c/src/re2c/base.re"


#line 79 "../../../benchmarks/c/src/re2c/base.re"


#line 87 "gen/re2c/submatch_06__email.cc"
#define YYMAXFILL 3
#line 81 "../../../benchmarks/c/src/re2c/base.re"


static inline int fill_eofrule(input_t *in) {
    size_t free;
    if (in->eof) return 1;

    free = in->tok - in->buf;
    assert(free > 0);

    memmove(in->buf, in->tok, in->lim - in->tok);
    in->lim -= free;
    in->cur -= free;
    in->mar -= free;
    in->tok -= free;
    
#line 105 "gen/re2c/submatch_06__email.cc"
if (in->yyt1) in->yyt1 -= free;
#line 95 "../../../benchmarks/c/src/re2c/base.re"


    in->lim += fread(in->lim, 1, free, in->file);
    in->lim[0] = 0;

    if (in->lim < in->buf + SIZE) {
        in->eof = 1;
    }

    return 0;
}

static inline int fill_padding(input_t *in, size_t need) {
    size_t free;
    if (in->eof) return 1;

    free = in->tok - in->buf;
    assert(free >= need);

    memmove(in->buf, in->tok, in->lim - in->tok);
    in->lim -= free;
    in->cur -= free;
    in->mar -= free;
    in->tok -= free;
    
#line 133 "gen/re2c/submatch_06__email.cc"
if (in->yyt1) in->yyt1 -= free;
#line 119 "../../../benchmarks/c/src/re2c/base.re"


    in->lim += fread(in->lim, 1, free, in->file);

    if (in->lim < in->buf + SIZE) {
        in->eof = 1;
        memset(in->lim, 0, YYMAXFILL);
        in->lim += YYMAXFILL;
    }

    return 0;
}

static inline void init_input_eofrule(input_t *in, const char* fname) {
    in->file = fopen(fname, "rb");
    in->buf = (char*) malloc(SIZE + 1);
    in->lim = in->buf + SIZE;
    in->cur = in->lim;
    in->mar = in->lim;
    in->tok = in->lim;
    
#line 157 "gen/re2c/submatch_06__email.cc"
in->yyt1 = 0;
#line 139 "../../../benchmarks/c/src/re2c/base.re"

    
#line 162 "gen/re2c/submatch_06__email.cc"
#line 140 "../../../benchmarks/c/src/re2c/base.re"

    taglistpool_init(&in->tlp);
    in->eof = 0;
    fill_eofrule(in);
}

static inline void init_input_padding(input_t *in, const char* fname) {
    in->file = fopen(fname, "rb");
    in->buf = (char*) malloc(SIZE + YYMAXFILL);
    in->lim = in->buf + SIZE;
    in->cur = in->lim;
    in->mar = in->lim;
    in->tok = in->lim;
    
#line 178 "gen/re2c/submatch_06__email.cc"
in->yyt1 = 0;
#line 153 "../../../benchmarks/c/src/re2c/base.re"

    
#line 183 "gen/re2c/submatch_06__email.cc"
#line 154 "../../../benchmarks/c/src/re2c/base.re"

    taglistpool_init(&in->tlp);
    in->eof = 0;
}

int lex_yyfill_eofrule(input_t *in) {
    long count = 0;
    
#line 193 "gen/re2c/submatch_06__email.cc"
const char* p;
#line 161 "../../../benchmarks/c/src/re2c/base.re"

    
#line 198 "gen/re2c/submatch_06__email.cc"
#line 162 "../../../benchmarks/c/src/re2c/base.re"

loop:
    in->tok = in->cur;
    
#line 204 "gen/re2c/submatch_06__email.cc"
{
	char yych;
yyFillLabel0:
	yych = *in->cur;
	switch (yych) {
		case 0x00:
			if (in->lim <= in->cur) {
				if (fill_eofrule(in) == 0) goto yyFillLabel0;
				goto yy18;
			}
			goto yy1;
		case '\n': goto yy4;
		case '!':
		case '#':
		case '$':
		case '%':
		case '&':
		case '\'':
		case '*':
		case '+':
		case '-':
		case '/':
		case '0':
		case '1':
		case '2':
		case '3':
		case '4':
		case '5':
		case '6':
		case '7':
		case '8':
		case '9':
		case '=':
		case '?':
		case '^':
		case '_':
		case '`':
		case 'a':
		case 'b':
		case 'c':
		case 'd':
		case 'e':
		case 'f':
		case 'g':
		case 'h':
		case 'i':
		case 'j':
		case 'k':
		case 'l':
		case 'm':
		case 'n':
		case 'o':
		case 'p':
		case 'q':
		case 'r':
		case 's':
		case 't':
		case 'u':
		case 'v':
		case 'w':
		case 'x':
		case 'y':
		case 'z':
		case '{':
		case '|':
		case '}':
		case '~': goto yy5;
		default: goto yy3;
	}
yy1:
	++in->cur;
yy2:
#line 14 "../../../benchmarks/c/src/re2c/submatch_06__email.re"
	{ return -1; }
#line 279 "gen/re2c/submatch_06__email.cc"
yy3:
	in->mar = ++in->cur;
yyFillLabel1:
	yych = *in->cur;
	if (yych <= 0x00) {
		if (in->lim <= in->cur) {
			if (fill_eofrule(in) == 0) goto yyFillLabel1;
		}
		goto yy2;
	}
	goto yy7;
yy4:
	++in->cur;
#line 23 "../../../benchmarks/c/src/re2c/submatch_06__email.re"
	{ goto loop; }
#line 295 "gen/re2c/submatch_06__email.cc"
yy5:
	in->mar = ++in->cur;
yyFillLabel2:
	yych = *in->cur;
	switch (yych) {
		case 0x00:
			if (in->lim <= in->cur) {
				if (fill_eofrule(in) == 0) goto yyFillLabel2;
			}
			goto yy2;
		case '!':
		case '#':
		case '$':
		case '%':
		case '&':
		case '\'':
		case '*':
		case '+':
		case '-':
		case '/':
		case '0':
		case '1':
		case '2':
		case '3':
		case '4':
		case '5':
		case '6':
		case '7':
		case '8':
		case '9':
		case '=':
		case '?':
		case '^':
		case '_':
		case '`':
		case 'a':
		case 'b':
		case 'c':
		case 'd':
		case 'e':
		case 'f':
		case 'g':
		case 'h':
		case 'i':
		case 'j':
		case 'k':
		case 'l':
		case 'm':
		case 'n':
		case 'o':
		case 'p':
		case 'q':
		case 'r':
		case 's':
		case 't':
		case 'u':
		case 'v':
		case 'w':
		case 'x':
		case 'y':
		case 'z':
		case '{':
		case '|':
		case '}':
		case '~': goto yy9;
		case '.': goto yy10;
		case '@': goto yy11;
		default: goto yy7;
	}
yy6:
	++in->cur;
yyFillLabel3:
	yych = *in->cur;
yy7:
	switch (yych) {
		case 0x00:
			if (in->lim <= in->cur) {
				if (fill_eofrule(in) == 0) goto yyFillLabel3;
			}
			goto yy8;
		case '\n': goto yy4;
		default: goto yy6;
	}
yy8:
	in->cur = in->mar;
	goto yy2;
yy9:
	++in->cur;
yyFillLabel4:
	yych = *in->cur;
	switch (yych) {
		case 0x00:
			if (in->lim <= in->cur) {
				if (fill_eofrule(in) == 0) goto yyFillLabel4;
			}
			goto yy8;
		case '\n': goto yy4;
		case '!':
		case '#':
		case '$':
		case '%':
		case '&':
		case '\'':
		case '*':
		case '+':
		case '-':
		case '/':
		case '0':
		case '1':
		case '2':
		case '3':
		case '4':
		case '5':
		case '6':
		case '7':
		case '8':
		case '9':
		case '=':
		case '?':
		case '^':
		case '_':
		case '`':
		case 'a':
		case 'b':
		case 'c':
		case 'd':
		case 'e':
		case 'f':
		case 'g':
		case 'h':
		case 'i':
		case 'j':
		case 'k':
		case 'l':
		case 'm':
		case 'n':
		case 'o':
		case 'p':
		case 'q':
		case 'r':
		case 's':
		case 't':
		case 'u':
		case 'v':
		case 'w':
		case 'x':
		case 'y':
		case 'z':
		case '{':
		case '|':
		case '}':
		case '~': goto yy9;
		case '.': goto yy10;
		case '@': goto yy11;
		default: goto yy6;
	}
yy10:
	++in->cur;
yyFillLabel5:
	yych = *in->cur;
	switch (yych) {
		case 0x00:
			if (in->lim <= in->cur) {
				if (fill_eofrule(in) == 0) goto yyFillLabel5;
			}
			goto yy8;
		case '\n': goto yy4;
		case '!':
		case '#':
		case '$':
		case '%':
		case '&':
		case '\'':
		case '*':
		case '+':
		case '-':
		case '/':
		case '0':
		case '1':
		case '2':
		case '3':
		case '4':
		case '5':
		case '6':
		case '7':
		case '8':
		case '9':
		case '=':
		case '?':
		case '^':
		case '_':
		case '`':
		case 'a':
		case 'b':
		case 'c':
		case 'd':
		case 'e':
		case 'f':
		case 'g':
		case 'h':
		case 'i':
		case 'j':
		case 'k':
		case 'l':
		case 'm':
		case 'n':
		case 'o':
		case 'p':
		case 'q':
		case 'r':
		case 's':
		case 't':
		case 'u':
		case 'v':
		case 'w':
		case 'x':
		case 'y':
		case 'z':
		case '{':
		case '|':
		case '}':
		case '~': goto yy9;
		default: goto yy6;
	}
yy11:
	++in->cur;
yyFillLabel6:
	yych = *in->cur;
	switch (yych) {
		case 0x00:
			if (in->lim <= in->cur) {
				if (fill_eofrule(in) == 0) goto yyFillLabel6;
			}
			goto yy8;
		case '0':
		case '1':
		case '2':
		case '3':
		case '4':
		case '5':
		case '6':
		case '7':
		case '8':
		case '9':
		case 'a':
		case 'b':
		case 'c':
		case 'd':
		case 'e':
		case 'f':
		case 'g':
		case 'h':
		case 'i':
		case 'j':
		case 'k':
		case 'l':
		case 'm':
		case 'n':
		case 'o':
		case 'p':
		case 'q':
		case 'r':
		case 's':
		case 't':
		case 'u':
		case 'v':
		case 'w':
		case 'x':
		case 'y':
		case 'z':
			in->yyt1 = in->cur;
			goto yy12;
		default: goto yy7;
	}
yy12:
	++in->cur;
yyFillLabel7:
	yych = *in->cur;
	switch (yych) {
		case 0x00:
			if (in->lim <= in->cur) {
				if (fill_eofrule(in) == 0) goto yyFillLabel7;
			}
			goto yy8;
		case '\n': goto yy4;
		case '-': goto yy13;
		case '.': goto yy14;
		case '0':
		case '1':
		case '2':
		case '3':
		case '4':
		case '5':
		case '6':
		case '7':
		case '8':
		case '9':
		case 'a':
		case 'b':
		case 'c':
		case 'd':
		case 'e':
		case 'f':
		case 'g':
		case 'h':
		case 'i':
		case 'j':
		case 'k':
		case 'l':
		case 'm':
		case 'n':
		case 'o':
		case 'p':
		case 'q':
		case 'r':
		case 's':
		case 't':
		case 'u':
		case 'v':
		case 'w':
		case 'x':
		case 'y':
		case 'z': goto yy12;
		default: goto yy6;
	}
yy13:
	++in->cur;
yyFillLabel8:
	yych = *in->cur;
	switch (yych) {
		case 0x00:
			if (in->lim <= in->cur) {
				if (fill_eofrule(in) == 0) goto yyFillLabel8;
			}
			goto yy8;
		case '\n': goto yy4;
		case '-': goto yy13;
		case '0':
		case '1':
		case '2':
		case '3':
		case '4':
		case '5':
		case '6':
		case '7':
		case '8':
		case '9':
		case 'a':
		case 'b':
		case 'c':
		case 'd':
		case 'e':
		case 'f':
		case 'g':
		case 'h':
		case 'i':
		case 'j':
		case 'k':
		case 'l':
		case 'm':
		case 'n':
		case 'o':
		case 'p':
		case 'q':
		case 'r':
		case 's':
		case 't':
		case 'u':
		case 'v':
		case 'w':
		case 'x':
		case 'y':
		case 'z': goto yy12;
		default: goto yy6;
	}
yy14:
	++in->cur;
yyFillLabel9:
	yych = *in->cur;
	switch (yych) {
		case 0x00:
			if (in->lim <= in->cur) {
				if (fill_eofrule(in) == 0) goto yyFillLabel9;
			}
			goto yy8;
		case '\n': goto yy4;
		case '0':
		case '1':
		case '2':
		case '3':
		case '4':
		case '5':
		case '6':
		case '7':
		case '8':
		case '9':
		case 'a':
		case 'b':
		case 'c':
		case 'd':
		case 'e':
		case 'f':
		case 'g':
		case 'h':
		case 'i':
		case 'j':
		case 'k':
		case 'l':
		case 'm':
		case 'n':
		case 'o':
		case 'p':
		case 'q':
		case 'r':
		case 's':
		case 't':
		case 'u':
		case 'v':
		case 'w':
		case 'x':
		case 'y':
		case 'z': goto yy15;
		default: goto yy6;
	}
yy15:
	++in->cur;
yyFillLabel10:
	yych = *in->cur;
	switch (yych) {
		case 0x00:
			if (in->lim <= in->cur) {
				if (fill_eofrule(in) == 0) goto yyFillLabel10;
			}
			goto yy8;
		case '\n': goto yy16;
		case '-': goto yy17;
		case '.': goto yy14;
		case '0':
		case '1':
		case '2':
		case '3':
		case '4':
		case '5':
		case '6':
		case '7':
		case '8':
		case '9':
		case 'a':
		case 'b':
		case 'c':
		case 'd':
		case 'e':
		case 'f':
		case 'g':
		case 'h':
		case 'i':
		case 'j':
		case 'k':
		case 'l':
		case 'm':
		case 'n':
		case 'o':
		case 'p':
		case 'q':
		case 'r':
		case 's':
		case 't':
		case 'u':
		case 'v':
		case 'w':
		case 'x':
		case 'y':
		case 'z': goto yy15;
		default: goto yy6;
	}
yy16:
	++in->cur;
	p = in->yyt1;
#line 15 "../../../benchmarks/c/src/re2c/submatch_06__email.re"
	{
        OUTC(' ');
        OUTS(in->tok, p - 1);
        OUTC(' ');
        OUTS(p, in->cur - 1);
        OUTC('\n');
        goto loop;
    }
#line 783 "gen/re2c/submatch_06__email.cc"
yy17:
	++in->cur;
yyFillLabel11:
	yych = *in->cur;
	switch (yych) {
		case 0x00:
			if (in->lim <= in->cur) {
				if (fill_eofrule(in) == 0) goto yyFillLabel11;
			}
			goto yy8;
		case '\n': goto yy4;
		case '-': goto yy17;
		case '0':
		case '1':
		case '2':
		case '3':
		case '4':
		case '5':
		case '6':
		case '7':
		case '8':
		case '9':
		case 'a':
		case 'b':
		case 'c':
		case 'd':
		case 'e':
		case 'f':
		case 'g':
		case 'h':
		case 'i':
		case 'j':
		case 'k':
		case 'l':
		case 'm':
		case 'n':
		case 'o':
		case 'p':
		case 'q':
		case 'r':
		case 's':
		case 't':
		case 'u':
		case 'v':
		case 'w':
		case 'x':
		case 'y':
		case 'z': goto yy15;
		default: goto yy6;
	}
yy18:
#line 73 "../../../benchmarks/c/src/re2c/base.re"
	{ return count; }
#line 837 "gen/re2c/submatch_06__email.cc"
}
#line 169 "../../../benchmarks/c/src/re2c/base.re"

}

int lex_yyfill_padding(input_t *in) {
    long count = 0;
    
#line 846 "gen/re2c/submatch_06__email.cc"
const char* p;
#line 174 "../../../benchmarks/c/src/re2c/base.re"

    
#line 851 "gen/re2c/submatch_06__email.cc"
#line 175 "../../../benchmarks/c/src/re2c/base.re"

loop:
    in->tok = in->cur;
    
#line 857 "gen/re2c/submatch_06__email.cc"
{
	char yych;
	static const unsigned char yybm[256] = {
		  0,  16,  16,  16,  16,  16,  16,  16,
		 16,  16,   0,  16,  16,  16,  16,  16,
		 16,  16,  16,  16,  16,  16,  16,  16,
		 16,  16,  16,  16,  16,  16,  16,  16,
		 16,  48,  16,  48,  48,  48,  48,  48,
		 16,  16,  48,  48,  16, 176,  16,  48,
		112, 112, 112, 112, 112, 112, 112, 112,
		112, 112,  16,  16,  16,  48,  16,  48,
		 16,  16,  16,  16,  16,  16,  16,  16,
		 16,  16,  16,  16,  16,  16,  16,  16,
		 16,  16,  16,  16,  16,  16,  16,  16,
		 16,  16,  16,  16,  16,  16,  48,  48,
		 48, 112, 112, 112, 112, 112, 112, 112,
		112, 112, 112, 112, 112, 112, 112, 112,
		112, 112, 112, 112, 112, 112, 112, 112,
		112, 112, 112,  48,  48,  48,  48,  16,
		 16,  16,  16,  16,  16,  16,  16,  16,
		 16,  16,  16,  16,  16,  16,  16,  16,
		 16,  16,  16,  16,  16,  16,  16,  16,
		 16,  16,  16,  16,  16,  16,  16,  16,
		 16,  16,  16,  16,  16,  16,  16,  16,
		 16,  16,  16,  16,  16,  16,  16,  16,
		 16,  16,  16,  16,  16,  16,  16,  16,
		 16,  16,  16,  16,  16,  16,  16,  16,
		 16,  16,  16,  16,  16,  16,  16,  16,
		 16,  16,  16,  16,  16,  16,  16,  16,
		 16,  16,  16,  16,  16,  16,  16,  16,
		 16,  16,  16,  16,  16,  16,  16,  16,
		 16,  16,  16,  16,  16,  16,  16,  16,
		 16,  16,  16,  16,  16,  16,  16,  16,
		 16,  16,  16,  16,  16,  16,  16,  16,
		 16,  16,  16,  16,  16,  16,  16,  16
	};
	if ((in->lim - in->cur) < 3) if (fill_padding(in, 3) != 0) return -2;
	yych = *in->cur;
	if (yych <= ',') {
		if (yych <= '!') {
			if (yych <= '\t') {
				if (yych >= 0x01) goto yy20;
			} else {
				if (yych <= '\n') goto yy22;
				if (yych <= ' ') goto yy20;
				goto yy23;
			}
		} else {
			if (yych <= '\'') {
				if (yych <= '"') goto yy20;
				goto yy23;
			} else {
				if (yych <= ')') goto yy20;
				if (yych <= '+') goto yy23;
				goto yy20;
			}
		}
	} else {
		if (yych <= '=') {
			if (yych <= '.') {
				if (yych <= '-') goto yy23;
				goto yy20;
			} else {
				if (yych <= '9') goto yy23;
				if (yych <= '<') goto yy20;
				goto yy23;
			}
		} else {
			if (yych <= '?') {
				if (yych <= '>') goto yy20;
				goto yy23;
			} else {
				if (yych <= ']') goto yy20;
				if (yych <= '~') goto yy23;
				goto yy20;
			}
		}
	}
	++in->cur;
#line 78 "../../../benchmarks/c/src/re2c/base.re"
	{ return count; }
#line 939 "gen/re2c/submatch_06__email.cc"
yy20:
	yych = *(in->mar = ++in->cur);
	if (yych >= 0x01) goto yy25;
yy21:
#line 14 "../../../benchmarks/c/src/re2c/submatch_06__email.re"
	{ return -1; }
#line 946 "gen/re2c/submatch_06__email.cc"
yy22:
	++in->cur;
#line 23 "../../../benchmarks/c/src/re2c/submatch_06__email.re"
	{ goto loop; }
#line 951 "gen/re2c/submatch_06__email.cc"
yy23:
	yych = *(in->mar = ++in->cur);
	if (yybm[0+yych] & 32) goto yy27;
	if (yych <= '.') {
		if (yych <= 0x00) goto yy21;
		if (yych <= ',') goto yy25;
		goto yy28;
	} else {
		if (yych <= '>') goto yy25;
		if (yych <= '@') goto yy29;
		goto yy25;
	}
yy24:
	++in->cur;
	if (in->lim <= in->cur) if (fill_padding(in, 1) != 0) return -2;
	yych = *in->cur;
yy25:
	if (yybm[0+yych] & 16) goto yy24;
	if (yych >= 0x01) goto yy22;
yy26:
	in->cur = in->mar;
	goto yy21;
yy27:
	++in->cur;
	if ((in->lim - in->cur) < 2) if (fill_padding(in, 2) != 0) return -2;
	yych = *in->cur;
	if (yybm[0+yych] & 32) goto yy27;
	if (yych <= ',') {
		if (yych <= 0x00) goto yy26;
		if (yych == '\n') goto yy22;
		goto yy24;
	} else {
		if (yych <= '.') goto yy28;
		if (yych <= '>') goto yy24;
		if (yych <= '@') goto yy29;
		goto yy24;
	}
yy28:
	++in->cur;
	if (in->lim <= in->cur) if (fill_padding(in, 1) != 0) return -2;
	yych = *in->cur;
	if (yybm[0+yych] & 32) goto yy27;
	if (yych <= 0x00) goto yy26;
	if (yych == '\n') goto yy22;
	goto yy24;
yy29:
	yych = *++in->cur;
	if (yych <= '/') goto yy25;
	if (yych <= '9') {
		in->yyt1 = in->cur;
		goto yy30;
	}
	if (yych <= '`') goto yy25;
	if (yych >= '{') goto yy25;
	in->yyt1 = in->cur;
yy30:
	++in->cur;
	if (in->lim <= in->cur) if (fill_padding(in, 1) != 0) return -2;
	yych = *in->cur;
	if (yybm[0+yych] & 128) goto yy31;
	if (yych <= '.') {
		if (yych <= '\t') {
			if (yych <= 0x00) goto yy26;
			goto yy24;
		} else {
			if (yych <= '\n') goto yy22;
			if (yych <= ',') goto yy24;
			goto yy32;
		}
	} else {
		if (yych <= '9') {
			if (yych <= '/') goto yy24;
			goto yy30;
		} else {
			if (yych <= '`') goto yy24;
			if (yych <= 'z') goto yy30;
			goto yy24;
		}
	}
yy31:
	++in->cur;
	if (in->lim <= in->cur) if (fill_padding(in, 1) != 0) return -2;
	yych = *in->cur;
	if (yybm[0+yych] & 128) goto yy31;
	if (yych <= '/') {
		if (yych <= 0x00) goto yy26;
		if (yych == '\n') goto yy22;
		goto yy24;
	} else {
		if (yych <= '9') goto yy30;
		if (yych <= '`') goto yy24;
		if (yych <= 'z') goto yy30;
		goto yy24;
	}
yy32:
	++in->cur;
	if (in->lim <= in->cur) if (fill_padding(in, 1) != 0) return -2;
	yych = *in->cur;
	if (yych <= '/') {
		if (yych <= 0x00) goto yy26;
		if (yych == '\n') goto yy22;
		goto yy24;
	} else {
		if (yych <= '9') goto yy33;
		if (yych <= '`') goto yy24;
		if (yych >= '{') goto yy24;
	}
yy33:
	++in->cur;
	if (in->lim <= in->cur) if (fill_padding(in, 1) != 0) return -2;
	yych = *in->cur;
	if (yych <= '-') {
		if (yych <= '\t') {
			if (yych <= 0x00) goto yy26;
			goto yy24;
		} else {
			if (yych <= '\n') goto yy34;
			if (yych <= ',') goto yy24;
			goto yy35;
		}
	} else {
		if (yych <= '9') {
			if (yych <= '.') goto yy32;
			if (yych <= '/') goto yy24;
			goto yy33;
		} else {
			if (yych <= '`') goto yy24;
			if (yych <= 'z') goto yy33;
			goto yy24;
		}
	}
yy34:
	++in->cur;
	p = in->yyt1;
#line 15 "../../../benchmarks/c/src/re2c/submatch_06__email.re"
	{
        OUTC(' ');
        OUTS(in->tok, p - 1);
        OUTC(' ');
        OUTS(p, in->cur - 1);
        OUTC('\n');
        goto loop;
    }
#line 1095 "gen/re2c/submatch_06__email.cc"
yy35:
	++in->cur;
	if (in->lim <= in->cur) if (fill_padding(in, 1) != 0) return -2;
	yych = *in->cur;
	if (yych <= '-') {
		if (yych <= '\t') {
			if (yych <= 0x00) goto yy26;
			goto yy24;
		} else {
			if (yych <= '\n') goto yy22;
			if (yych <= ',') goto yy24;
			goto yy35;
		}
	} else {
		if (yych <= '9') {
			if (yych <= '/') goto yy24;
			goto yy33;
		} else {
			if (yych <= '`') goto yy24;
			if (yych <= 'z') goto yy33;
			goto yy24;
		}
	}
}
#line 183 "../../../benchmarks/c/src/re2c/base.re"

}

#define FN_BENCH(suffix) \
void bench_yyfill_##suffix::operator()( \
        benchmark::State &state, const char* input, long expected) const { \
    long count; \
    for (auto _ : state) { \
        input_t in; \
        init_input_##suffix(&in, input); \
        count = lex_yyfill_##suffix(&in); \
        free_input(&in); \
    } \
    if (count != expected) state.SkipWithError("error"); \
}
FN_BENCH(eofrule)
FN_BENCH(padding)
#undef FN_BENCH

#define FN_TEST(suffix) \
bool test_yyfill_##suffix(const char* input, long expected) { \
    input_t in; \
    init_input_##suffix(&in, input); \
    \
    long count = lex_yyfill_##suffix(&in); \
    switch (count) { \
    default: \
        if (count != expected) { \
            fprintf(stderr, "wrong count, expected %ld, got %ld\n", expected, count); \
        } \
        break; \
    case -1: \
        fprintf(stderr, "syntax error\n"); \
        break; \
    case -2: \
        fprintf(stderr, "yyfill error\n"); \
        break; \
    } \
    \
    free_input(&in); \
    return count == expected; \
}
FN_TEST(eofrule)
FN_TEST(padding)
#undef FN_TEST
#line 26 "../../../benchmarks/c/src/re2c/submatch_06__email.re"


} // namespace re2c_submatch_06_email

%code requires {

#include <stdint.h>

#include "src/options/syntax.h"
#include "src/util/allocator.h"
#include "src/util/containers.h"

union STX_STYPE;

namespace re2c {

struct conopt_t;

class StxFile {
    OutAllocator& alc;
    const std::string& fname;
    FILE* file;
    size_t flen;
    uint8_t* buf;
    const uint8_t* cur; // current lexer position
    const uint8_t* tok; // token start
    const uint8_t* pos; // line start (used for error reporting)
    loc_t loc;
    std::string tmp_str;

  public:
    Msg& msg;

  public:
    StxFile(OutAllocator& alc, const std::string& fname, Msg& msg);
    ~StxFile();
    Ret read(Lang lang);
    int lex_token(STX_STYPE* yylval);
    bool check_conf_name(const char* name) const;
    loc_t tok_loc() const;

    FORBID_COPY(StxFile);
};

Ret load_syntax_config(Stx& stx, const std::string& config, Lang& lang, Msg& msg);

} // namespace re2c

}

%{

#include "src/options/opt.h"
#include "src/parse/syntax_parser.h"

using namespace re2c;

extern "C" {
    static void yyerror(StxFile& sf, re2c::Stx&, const char* s);
    static int yylex(STX_STYPE* yylval, StxFile& sf);
}

%}

%start confs

%define api.pure full
%define api.prefix {stx_}
%lex-param {re2c::StxFile& sf}
%parse-param {re2c::StxFile& sf}
%parse-param {re2c::Stx& stx}

%union {
    const char* str;
    int32_t num;
    re2c::StxConf* conf;
    re2c::StxList* list;
    re2c::StxCode* code;
    re2c::StxCodes* codes;
};

%token STX_NAME
%token STX_NUMBER
%token STX_STRING
%token STX_CONF
%token STX_CONF_CODE

%type <str> STX_NAME STX_STRING STX_CONF STX_CONF_CODE
%type <num> STX_NUMBER
%type <conf> conf
%type <list> list names
%type <code> code_cond code_expr code_list
%type <codes> code_exprs

%%

confs
: %empty
| conf confs { stx.add_conf($1->name, $1); };

conf
: STX_CONF_CODE code_exprs ';' {
    $$ = stx.make_conf_code($1, $2);
    if (stx.validate_conf_code($$) == Ret::FAIL) YYABORT;
}
| STX_CONF list ';' {
    $$ = stx.make_conf_list($1, $2);
    if (stx.validate_conf_list($$) == Ret::FAIL) YYABORT;
}
| STX_CONF STX_NAME ';' {
    $$ = stx.make_conf_word($1, $2);
    if (stx.validate_conf_word($$) == Ret::FAIL) YYABORT;
};

// code expressions (for configurations that start with `code:`)

code_exprs
: %empty               { $$ = stx.new_code_list(); }
| code_expr code_exprs { prepend($2, $1); $$ = $2; };

code_expr
: STX_STRING { $$ = stx.make_code_str($1); }
| STX_NAME   { $$ = stx.make_code_var($1); }
| code_cond
| code_list;

code_cond
: '(' STX_NAME '?' code_exprs ')' {
    $$ = stx.make_code_cond($2, $4, nullptr);
}
| '(' STX_NAME '?' code_exprs ':' code_exprs ')' {
    $$ = stx.make_code_cond($2, $4, $6);
};

code_list
: '[' STX_NAME ':' code_exprs ']' {
    $$ = stx.make_code_list($2, 0, -1, $4);
}
| '[' STX_NAME '{' STX_NUMBER '}' ':' code_exprs ']' {
    $$ = stx.make_code_list($2, $4, $4, $7);
}
| '[' STX_NAME '{' STX_NUMBER ':' STX_NUMBER '}' ':' code_exprs ']' {
    $$ = stx.make_code_list($2, $4, $6, $9);
};

// generic expressions (lists, conditional expressions, single words)

list: '[' names ']' { $$ = $2; };

names
: STX_NAME {
    $$ = stx.new_name_list();
    prepend($$, stx.make_name($1));
}
| STX_NAME ',' names {
    prepend($3, stx.make_name($1));
    $$ = $3;
};

%%

extern "C" {
    static void yyerror(re2c::StxFile& sf, re2c::Stx&, const char* s) {
        sf.msg.error(sf.tok_loc(), "%s", s);
    }

    static int yylex(STX_STYPE* yylval, re2c::StxFile& sf) {
        return sf.lex_token(yylval);
    }
}

extern const char* DEFAULT_SYNTAX_C;
extern const char* DEFAULT_SYNTAX_GO;
extern const char* DEFAULT_SYNTAX_RUST;
extern const char* DEFAULT_SYNTAX_D;

namespace re2c {

inline StxCodes* Stx::new_code_list() {
    return new_list<StxCode, OutAllocator>(alc);
}

inline StxList* Stx::new_name_list() {
    return new_list<StxName, OutAllocator>(alc);
}

inline StxConf* Stx::make_conf(StxConfType type, const char* name) {
    StxConf* x = alc.alloct<StxConf>(1);
    x->type = type;
    x->name = name;
    return x;
}

inline StxConf* Stx::make_conf_word(const char* name, const char* word) {
    StxConf* x = make_conf(StxConfType::WORD, name);
    x->word = word;
    return x;
}

inline StxConf* Stx::make_conf_list(const char* name, StxList* list) {
    StxConf* x = make_conf(StxConfType::LIST, name);
    x->list = list;
    return x;
}

inline StxConf* Stx::make_conf_code(const char* name, StxCodes* code) {
    StxConf* x = make_conf(StxConfType::CODE, name);
    x->code = code;
    return x;
}

inline StxName* Stx::make_name(const char* name) {
    StxName* x = alc.alloct<StxName>(1);
    x->name = name;
    x->next = nullptr;
    return x;
}

inline StxCode* Stx::make_code(StxCodeType type) {
    StxCode* x = alc.alloct<StxCode>(1);
    x->type = type;
    x->next = nullptr;
    return x;
}

inline StxCode* Stx::make_code_str(const char* str) {
    StxCode* x = make_code(StxCodeType::STR);
    x->str = str;
    return x;
}

inline StxCode* Stx::make_code_var(const char* var) {
    StxCode* x = make_code(StxCodeType::VAR);
    x->var = var;
    return x;
}

inline StxCode* Stx::make_code_cond(const char* conf, StxCodes* then_code, StxCodes* else_code) {
    StxCode* x = make_code(StxCodeType::COND);
    x->cond.conf = conf;
    x->cond.then_code = then_code;
    x->cond.else_code = else_code;
    return x;
}

inline StxCode* Stx::make_code_list(
        const char* var, int32_t lbound, int32_t rbound, StxCodes* code) {
    StxCode* x = make_code(StxCodeType::LIST);
    x->list.var = var;
    x->list.lbound = lbound;
    x->list.rbound = rbound;
    x->list.code = code;;
    return x;
}

StxFile::StxFile(OutAllocator& alc, const std::string& fname, Msg& msg)
    : alc(alc)
    , fname(fname)
    , file(nullptr)
    , flen(0)
    , buf(nullptr)
    , cur(nullptr)
    , tok(nullptr)
    , pos(nullptr)
    , loc({1, 0, 0}) // file index 0 is reserved for syntax file
    , tmp_str()
    , msg(msg)
{}

StxFile::~StxFile() {
    delete[] buf;
    if (file) fclose(file);
}

loc_t StxFile::tok_loc() const {
    DCHECK(pos <= tok);
    return {loc.line, static_cast<uint32_t>(tok - pos), loc.file};
}

Ret StxFile::read(Lang lang) {
    if (fname.empty()) {
        msg.filenames.push_back("<default syntax file>");

        // use the default syntax config that is provided as a string
        const char* src = nullptr;
        switch (lang) {
            case Lang::C: src = DEFAULT_SYNTAX_C; break;
            case Lang::GO: src = DEFAULT_SYNTAX_GO; break;
            case Lang::RUST: src = DEFAULT_SYNTAX_RUST; break;
            case Lang::D: src = DEFAULT_SYNTAX_D; break;
        }
        flen = strlen(src);

        // allocate buffer
        buf = new uint8_t[flen + 1];

        // fill in buffer from the config string
        memcpy(buf, src, flen);
        buf[flen] = 0;
    } else {
        msg.filenames.push_back(fname);

        // use the provided syntax file
        file = fopen(fname.c_str(), "rb");
        if (!file) RET_FAIL(error("cannot open syntax file '%s'", fname.c_str()));

        // get file size
        fseek(file, 0, SEEK_END);
        flen = static_cast<size_t>(ftell(file));
        fseek(file, 0, SEEK_SET);

        // allocate buffer
        buf = new uint8_t[flen + 1];

        // read file contents into buffer and append terminating zero at the end
        if (fread(buf, 1, flen, file) != flen) {
            RET_FAIL(error("cannot read syntax file '%s'", fname.c_str()));
        }
        buf[flen] = 0;
    }

    cur = tok = pos = buf;
    return Ret::OK;
}

Ret load_syntax_config(Stx& stx, const std::string& config, Lang& lang, Msg& msg) {
    StxFile sf(stx.alc, config, msg);
    CHECK_RET(sf.read(lang));
    if (yyparse(sf, stx) != 0) return Ret::FAIL;

    stx.cache_conf_tests();

    return Ret::OK;
}

} // namespace re2c

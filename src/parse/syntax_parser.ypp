%code requires {

#include "src/options/syntax.h"

}

%{

#include "src/options/opt.h"
#include "src/parse/input.h"
#include "src/parse/syntax_parser.h"

using namespace re2c;

extern "C" {
    static void yyerror(Input& in, Opt& opts, Stx& stx, const char* s);
    static int yylex(STX_STYPE* yylval, Input& in, Opt& opts);
}

%}

%start confs

%define api.pure full
%define api.prefix {stx_}
%lex-param {re2c::Input& in}
%lex-param {re2c::Opt& opts}
%parse-param {re2c::Input& in}
%parse-param {re2c::Opt& opts}
%parse-param {re2c::Stx& stx}

%union {
    const char* str;
    int32_t num;
    re2c::StxConf* conf;
    re2c::StxList* list;
    re2c::StxCode* code;
    re2c::StxCodes* codes;
};

%token STX_NAME
%token STX_NUMBER
%token STX_STRING
%token STX_CONF
%token STX_CONF_CODE

%type <str> STX_NAME STX_STRING STX_CONF STX_CONF_CODE
%type <num> STX_NUMBER
%type <conf> conf
%type <list> list names
%type <code> code_cond code_expr code_list
%type <codes> code_exprs

%%

confs
: %empty
| conf confs { stx.add_conf($1->name, $1); };

conf
: STX_CONF_CODE code_exprs ';' {
    $$ = stx.make_conf_code($1, $2);
    if (stx.validate_conf_code($$) == Ret::FAIL) YYABORT;
}
| STX_CONF list ';' {
    $$ = stx.make_conf_list($1, $2);
    if (stx.validate_conf_list($$) == Ret::FAIL) YYABORT;
}
| STX_CONF STX_NAME ';' {
    $$ = stx.make_conf_word($1, $2);
    if (stx.validate_conf_word($$) == Ret::FAIL) YYABORT;
};

// code expressions (for configurations that start with `code:`)

code_exprs
: %empty               { $$ = stx.new_code_list(); }
| code_expr code_exprs { prepend($2, $1); $$ = $2; };

code_expr
: STX_STRING { $$ = stx.make_code_str($1); }
| STX_NAME   { $$ = stx.make_code_var($1); }
| code_cond
| code_list;

code_cond
: '(' STX_NAME '?' code_exprs ')' {
    $$ = stx.make_code_cond($2, $4, nullptr);
}
| '(' STX_NAME '?' code_exprs ':' code_exprs ')' {
    $$ = stx.make_code_cond($2, $4, $6);
};

code_list
: '[' STX_NAME ':' code_exprs ']' {
    $$ = stx.make_code_list($2, 0, -1, $4);
}
| '[' STX_NAME '{' STX_NUMBER '}' ':' code_exprs ']' {
    $$ = stx.make_code_list($2, $4, $4, $7);
}
| '[' STX_NAME '{' STX_NUMBER ':' STX_NUMBER '}' ':' code_exprs ']' {
    $$ = stx.make_code_list($2, $4, $6, $9);
};

// generic expressions (lists, conditional expressions, single words)

list: '[' names ']' { $$ = $2; };

names
: STX_NAME {
    $$ = stx.new_name_list();
    prepend($$, stx.make_name($1));
}
| STX_NAME ',' names {
    prepend($3, stx.make_name($1));
    $$ = $3;
};

%%

extern "C" {
    static void yyerror(re2c::Input& in, Opt&, Stx&, const char* s) {
        in.error_at_tok("%s", s);
    }

    static int yylex(STX_STYPE* yylval, re2c::Input& in, Opt& opts) {
        int token;
        return in.lex_syntax_token(yylval, opts, token) == Ret::OK ? token : STX_error;
    }
}

namespace re2c {

inline StxCodes* Stx::new_code_list() {
    return new_list<StxCode, OutAllocator>(alc);
}

inline StxList* Stx::new_name_list() {
    return new_list<StxName, OutAllocator>(alc);
}

inline StxConf* Stx::make_conf(StxConfType type, const char* name) {
    StxConf* x = alc.alloct<StxConf>(1);
    x->type = type;
    x->name = name;
    return x;
}

inline StxConf* Stx::make_conf_word(const char* name, const char* word) {
    StxConf* x = make_conf(StxConfType::WORD, name);
    x->word = word;
    return x;
}

inline StxConf* Stx::make_conf_list(const char* name, StxList* list) {
    StxConf* x = make_conf(StxConfType::LIST, name);
    x->list = list;
    return x;
}

inline StxConf* Stx::make_conf_code(const char* name, StxCodes* code) {
    StxConf* x = make_conf(StxConfType::CODE, name);
    x->code = code;
    return x;
}

inline StxName* Stx::make_name(const char* name) {
    StxName* x = alc.alloct<StxName>(1);
    x->name = name;
    x->next = nullptr;
    return x;
}

inline StxCode* Stx::make_code(StxCodeType type) {
    StxCode* x = alc.alloct<StxCode>(1);
    x->type = type;
    x->next = nullptr;
    return x;
}

inline StxCode* Stx::make_code_str(const char* str) {
    StxCode* x = make_code(StxCodeType::STR);
    x->str = str;
    return x;
}

inline StxCode* Stx::make_code_var(const char* var) {
    StxCode* x = make_code(StxCodeType::VAR);
    x->var = var;
    return x;
}

inline StxCode* Stx::make_code_cond(const char* conf, StxCodes* then_code, StxCodes* else_code) {
    StxCode* x = make_code(StxCodeType::COND);
    x->cond.conf = conf;
    x->cond.then_code = then_code;
    x->cond.else_code = else_code;
    return x;
}

inline StxCode* Stx::make_code_list(
        const char* var, int32_t lbound, int32_t rbound, StxCodes* code) {
    StxCode* x = make_code(StxCodeType::LIST);
    x->list.var = var;
    x->list.lbound = lbound;
    x->list.rbound = rbound;
    x->list.code = code;
    return x;
}

Ret parse_syntax_config(Input& in, Opt& opts, Stx& stx) {
    return yyparse(in, opts, stx) == 0 ? Ret::OK : Ret::FAIL;
}

} // namespace re2c

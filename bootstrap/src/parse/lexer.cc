/* Generated by re2c 4.0.2 */
#line 1 "../src/parse/lexer.re"
#include <ctype.h>
#include <stdint.h>
#include <limits>
#include <string>
#include <utility>
#include <vector>

#include "src/codegen/helpers.h"
#include "src/codegen/output.h"
#include "src/encoding/enc.h"
#include "src/msg/location.h"
#include "src/msg/msg.h"
#include "src/msg/warn.h"
#include "src/options/opt.h"
#include "src/parse/ast.h"
#include "src/parse/input.h"
#include "src/parse/lexer.h"
#include "src/regexp/rule.h"
#include "src/util/check.h"
#include "src/util/string_utils.h"
#include "parser.h"

namespace re2c {

#line 28 "src/parse/lexer.cc"
size_t LexerState::maxfill_main() { return 18; }
#line 25 "../src/parse/lexer.re"


// Global re2c configurations and definitions.
#line 60 "../src/parse/lexer.re"


#line 132 "../src/parse/lexer.re"


#define RET_BLOCK(k) do { kind = k; return Ret::OK; } while(0)

Ret Input::lex_program(Output& out, std::string& block_name, InputBlock& kind) {
    const opt_t* opts = out.block().opts;
    const uint8_t* x, *y;

    if (is_eof()) RET_BLOCK(InputBlock::END);

next:
    tok = cur;
loop:
    location = cur_loc();
    ptr = cur;

#line 54 "src/parse/lexer.cc"
{
	uint8_t yych;
	unsigned int yyaccept = 0;
	static const unsigned char yybm[256] = {
		  0, 128, 128, 128, 128, 128, 128, 128,
		128, 160,   0, 128, 128, 128, 128, 128,
		128, 128, 128, 128, 128, 128, 128, 128,
		128, 128, 128, 128, 128, 128, 128, 128,
		160, 128,   0, 128, 128, 128, 128, 128,
		128, 128, 128, 128, 128, 128, 128, 128,
		192, 192, 192, 192, 192, 192, 192, 192,
		192, 192, 128, 128, 128, 128, 128, 128,
		128, 128, 128, 128, 128, 128, 128, 128,
		128, 128, 128, 128, 128, 128, 128, 128,
		128, 128, 128, 128, 128, 128, 128, 128,
		128, 128, 128, 128,   0, 128, 128, 128,
		128, 128, 128, 128, 128, 128, 128, 128,
		128, 128, 128, 128, 128, 128, 128, 128,
		128, 128, 128, 128, 128, 128, 128, 128,
		128, 128, 128, 128, 128, 128, 128, 128,
		128, 128, 128, 128, 128, 128, 128, 128,
		128, 128, 128, 128, 128, 128, 128, 128,
		128, 128, 128, 128, 128, 128, 128, 128,
		128, 128, 128, 128, 128, 128, 128, 128,
		128, 128, 128, 128, 128, 128, 128, 128,
		128, 128, 128, 128, 128, 128, 128, 128,
		128, 128, 128, 128, 128, 128, 128, 128,
		128, 128, 128, 128, 128, 128, 128, 128,
		128, 128, 128, 128, 128, 128, 128, 128,
		128, 128, 128, 128, 128, 128, 128, 128,
		128, 128, 128, 128, 128, 128, 128, 128,
		128, 128, 128, 128, 128, 128, 128, 128,
		128, 128, 128, 128, 128, 128, 128, 128,
		128, 128, 128, 128, 128, 128, 128, 128,
		128, 128, 128, 128, 128, 128, 128, 128,
		128, 128, 128, 128, 128, 128, 128, 128
	};
	if ((lim - cur) < 18) if (!fill(18)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yych <= '\r') {
		if (yych <= '\t') {
			if (yych >= 0x01) goto yy1;
		} else {
			if (yych <= '\n') goto yy3;
			if (yych <= '\f') goto yy1;
			goto yy5;
		}
	} else {
		if (yych <= '%') {
			if (yych <= '$') goto yy1;
			goto yy6;
		} else {
			if (yych == '/') goto yy7;
			goto yy1;
		}
	}
	++cur;
#line 274 "../src/parse/lexer.re"
	{
        if (is_eof()) {
            out.gen_raw(tok, ptr);
            RET_BLOCK(InputBlock::END);
        }
        goto loop;
    }
#line 120 "src/parse/lexer.cc"
yy1:
	++cur;
yy2:
#line 294 "../src/parse/lexer.re"
	{ goto loop; }
#line 126 "src/parse/lexer.cc"
yy3:
	yyaccept = 0;
	yych = *(mar = ++cur);
	if (yybm[0+yych] & 32) goto yy8;
	if (yych == '#') goto yy10;
yy4:
#line 289 "../src/parse/lexer.re"
	{
        next_line();
        goto loop;
    }
#line 138 "src/parse/lexer.cc"
yy5:
	yych = *++cur;
	if (yych == '\n') goto yy3;
	goto yy2;
yy6:
	yyaccept = 1;
	yych = *(mar = ++cur);
	if (yych == '{') goto yy11;
	goto yy2;
yy7:
	yyaccept = 1;
	yych = *(mar = ++cur);
	if (yych == '*') goto yy12;
	goto yy2;
yy8:
	++cur;
	if (lim <= cur) if (!fill(1)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yybm[0+yych] & 32) goto yy8;
	if (yych == '#') goto yy10;
yy9:
	cur = mar;
	if (yyaccept <= 2) {
		if (yyaccept <= 1) {
			if (yyaccept == 0) goto yy4;
			else goto yy2;
		} else {
			goto yy58;
		}
	} else {
		if (yyaccept <= 4) {
			if (yyaccept == 3) goto yy142;
			else goto yy144;
		} else {
			goto yy172;
		}
	}
yy10:
	++cur;
	if ((lim - cur) < 5) if (!fill(5)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy10;
		goto yy9;
	} else {
		if (yych <= ' ') goto yy10;
		if (yych == 'l') goto yy13;
		goto yy9;
	}
yy11:
	yych = *++cur;
	if (yych <= 'h') {
		if (yych <= '\r') {
			if (yych == '\n') {
				yyt1 = cur;
				goto yy14;
			}
			if (yych <= '\f') goto yy9;
			yyt1 = cur;
			goto yy15;
		} else {
			if (yych <= 'c') {
				if (yych <= 'b') goto yy9;
				goto yy16;
			} else {
				if (yych <= 'f') goto yy9;
				if (yych <= 'g') goto yy17;
				goto yy18;
			}
		}
	} else {
		if (yych <= 'q') {
			if (yych <= 'k') {
				if (yych <= 'i') goto yy19;
				goto yy9;
			} else {
				if (yych <= 'l') goto yy20;
				if (yych <= 'm') goto yy21;
				goto yy9;
			}
		} else {
			if (yych <= 's') {
				if (yych <= 'r') goto yy22;
				goto yy23;
			} else {
				if (yych == 'u') goto yy24;
				goto yy9;
			}
		}
	}
yy12:
	yych = *++cur;
	if (yych == '!') goto yy25;
	goto yy9;
yy13:
	yych = *++cur;
	if (yych == 'i') goto yy26;
	goto yy9;
yy14:
	++cur;
	cur = yyt1;
#line 148 "../src/parse/lexer.re"
	{
        out.gen_raw(tok, ptr);
        CHECK_RET(lex_opt_name(block_name));
        RET_BLOCK(InputBlock::GLOBAL);
    }
#line 246 "src/parse/lexer.cc"
yy15:
	yych = *++cur;
	if (yych == '\n') goto yy14;
	goto yy9;
yy16:
	yych = *++cur;
	if (yych == 'o') goto yy27;
	goto yy9;
yy17:
	yych = *++cur;
	if (yych == 'e') goto yy28;
	goto yy9;
yy18:
	yych = *++cur;
	if (yych == 'e') goto yy29;
	goto yy9;
yy19:
	yych = *++cur;
	if (yych == 'g') goto yy30;
	if (yych == 'n') goto yy31;
	goto yy9;
yy20:
	yych = *++cur;
	if (yych == 'o') goto yy32;
	goto yy9;
yy21:
	yych = *++cur;
	if (yych <= 's') {
		if (yych == 'a') goto yy33;
		goto yy9;
	} else {
		if (yych <= 't') goto yy34;
		if (yych == 'v') goto yy35;
		goto yy9;
	}
yy22:
	yych = *++cur;
	if (yych == 'u') goto yy36;
	goto yy9;
yy23:
	yych = *++cur;
	if (yych == 't') goto yy37;
	if (yych == 'v') goto yy38;
	goto yy9;
yy24:
	yych = *++cur;
	if (yych == 's') goto yy39;
	goto yy9;
yy25:
	yych = *++cur;
	switch (yych) {
		case 'c': goto yy40;
		case 'g': goto yy41;
		case 'h': goto yy42;
		case 'i': goto yy43;
		case 'l': goto yy44;
		case 'm': goto yy45;
		case 'r': goto yy46;
		case 's': goto yy47;
		case 't': goto yy48;
		case 'u': goto yy49;
		default: goto yy9;
	}
yy26:
	yych = *++cur;
	if (yych == 'n') goto yy50;
	goto yy9;
yy27:
	yych = *++cur;
	if (yych == 'n') goto yy51;
	goto yy9;
yy28:
	yych = *++cur;
	if (yych == 't') goto yy52;
	goto yy9;
yy29:
	yych = *++cur;
	if (yych == 'a') goto yy53;
	goto yy9;
yy30:
	yych = *++cur;
	if (yych == 'n') goto yy54;
	goto yy9;
yy31:
	yych = *++cur;
	if (yych == 'c') goto yy55;
	goto yy9;
yy32:
	yych = *++cur;
	if (yych == 'c') goto yy56;
	goto yy9;
yy33:
	yych = *++cur;
	if (yych == 'x') goto yy57;
	goto yy9;
yy34:
	yych = *++cur;
	if (yych == 'a') goto yy59;
	goto yy9;
yy35:
	yych = *++cur;
	if (yych == 'a') goto yy60;
	goto yy9;
yy36:
	yych = *++cur;
	if (yych == 'l') goto yy61;
	goto yy9;
yy37:
	yych = *++cur;
	if (yych == 'a') goto yy62;
	goto yy9;
yy38:
	yych = *++cur;
	if (yych == 'a') goto yy63;
	goto yy9;
yy39:
	yych = *++cur;
	if (yych == 'e') goto yy64;
	goto yy9;
yy40:
	yych = *++cur;
	if (yych == 'o') goto yy65;
	goto yy9;
yy41:
	yych = *++cur;
	if (yych == 'e') goto yy66;
	goto yy9;
yy42:
	yych = *++cur;
	if (yych == 'e') goto yy67;
	goto yy9;
yy43:
	yych = *++cur;
	if (yych == 'g') goto yy68;
	if (yych == 'n') goto yy69;
	goto yy9;
yy44:
	yych = *++cur;
	if (yych == 'o') goto yy70;
	goto yy9;
yy45:
	yych = *++cur;
	if (yych <= 's') {
		if (yych == 'a') goto yy71;
		goto yy9;
	} else {
		if (yych <= 't') goto yy72;
		if (yych == 'v') goto yy73;
		goto yy9;
	}
yy46:
	yych = *++cur;
	if (yych == 'e') goto yy74;
	if (yych == 'u') goto yy75;
	goto yy9;
yy47:
	yych = *++cur;
	if (yych == 't') goto yy76;
	if (yych == 'v') goto yy77;
	goto yy9;
yy48:
	yych = *++cur;
	if (yych == 'y') goto yy78;
	goto yy9;
yy49:
	yych = *++cur;
	if (yych == 's') goto yy79;
	goto yy9;
yy50:
	yych = *++cur;
	if (yych == 'e') goto yy80;
	goto yy9;
yy51:
	yych = *++cur;
	if (yych == 'd') goto yy81;
	goto yy9;
yy52:
	yych = *++cur;
	if (yych == 's') goto yy82;
	goto yy9;
yy53:
	yych = *++cur;
	if (yych == 'd') goto yy83;
	goto yy9;
yy54:
	yych = *++cur;
	if (yych == 'o') goto yy84;
	goto yy9;
yy55:
	yych = *++cur;
	if (yych == 'l') goto yy85;
	goto yy9;
yy56:
	yych = *++cur;
	if (yych == 'a') goto yy86;
	goto yy9;
yy57:
	yyaccept = 2;
	yych = *(mar = ++cur);
	if (yych == 'n') goto yy87;
yy58:
#line 178 "../src/parse/lexer.re"
	{
        CHECK_RET(lex_special_block(out, CodeKind::MAXFILL, DCONF_FORMAT));
        goto next;
    }
#line 453 "src/parse/lexer.cc"
yy59:
	yych = *++cur;
	if (yych == 'g') goto yy88;
	goto yy9;
yy60:
	yych = *++cur;
	if (yych == 'r') goto yy89;
	goto yy9;
yy61:
	yych = *++cur;
	if (yych == 'e') goto yy90;
	goto yy9;
yy62:
	yych = *++cur;
	if (yych == 'g') goto yy91;
	goto yy9;
yy63:
	yych = *++cur;
	if (yych == 'r') goto yy92;
	goto yy9;
yy64:
	++cur;
#line 172 "../src/parse/lexer.re"
	{
        out.gen_raw(tok, ptr);
        CHECK_RET(lex_opt_name(block_name));
        RET_BLOCK(InputBlock::USE);
    }
#line 482 "src/parse/lexer.cc"
yy65:
	yych = *++cur;
	if (yych == 'n') goto yy93;
	goto yy9;
yy66:
	yych = *++cur;
	if (yych == 't') goto yy94;
	goto yy9;
yy67:
	yych = *++cur;
	if (yych == 'a') goto yy95;
	goto yy9;
yy68:
	yych = *++cur;
	if (yych == 'n') goto yy96;
	goto yy9;
yy69:
	yych = *++cur;
	if (yych == 'c') goto yy97;
	goto yy9;
yy70:
	yych = *++cur;
	if (yych == 'c') goto yy98;
	goto yy9;
yy71:
	yych = *++cur;
	if (yych == 'x') goto yy99;
	goto yy9;
yy72:
	yych = *++cur;
	if (yych == 'a') goto yy100;
	goto yy9;
yy73:
	yych = *++cur;
	if (yych == 'a') goto yy101;
	goto yy9;
yy74:
	yych = *++cur;
	if (yych == '2') goto yy102;
	goto yy9;
yy75:
	yych = *++cur;
	if (yych == 'l') goto yy103;
	goto yy9;
yy76:
	yych = *++cur;
	if (yych == 'a') goto yy104;
	goto yy9;
yy77:
	yych = *++cur;
	if (yych == 'a') goto yy105;
	goto yy9;
yy78:
	yych = *++cur;
	if (yych == 'p') goto yy106;
	goto yy9;
yy79:
	yych = *++cur;
	if (yych == 'e') goto yy107;
	goto yy9;
yy80:
	yych = *++cur;
	if (yych <= '0') goto yy109;
	if (yych <= '9') goto yy9;
	goto yy109;
yy81:
	yych = *++cur;
	if (yych == 'i') goto yy110;
	goto yy9;
yy82:
	yych = *++cur;
	if (yych == 't') goto yy111;
	goto yy9;
yy83:
	yych = *++cur;
	if (yych == 'e') goto yy112;
	goto yy9;
yy84:
	yych = *++cur;
	if (yych == 'r') goto yy113;
	goto yy9;
yy85:
	yych = *++cur;
	if (yych == 'u') goto yy114;
	goto yy9;
yy86:
	yych = *++cur;
	if (yych == 'l') goto yy115;
	goto yy9;
yy87:
	yych = *++cur;
	if (yych == 'm') goto yy116;
	goto yy9;
yy88:
	yych = *++cur;
	if (yych == 's') goto yy117;
	goto yy9;
yy89:
	yych = *++cur;
	if (yych == 's') goto yy118;
	goto yy9;
yy90:
	yych = *++cur;
	if (yych == 's') goto yy119;
	goto yy9;
yy91:
	yych = *++cur;
	if (yych == 's') goto yy120;
	goto yy9;
yy92:
	yych = *++cur;
	if (yych == 's') goto yy121;
	goto yy9;
yy93:
	yych = *++cur;
	if (yych == 'd') goto yy122;
	goto yy9;
yy94:
	yych = *++cur;
	if (yych == 's') goto yy123;
	goto yy9;
yy95:
	yych = *++cur;
	if (yych == 'd') goto yy124;
	goto yy9;
yy96:
	yych = *++cur;
	if (yych == 'o') goto yy125;
	goto yy9;
yy97:
	yych = *++cur;
	if (yych == 'l') goto yy126;
	goto yy9;
yy98:
	yych = *++cur;
	if (yych == 'a') goto yy127;
	goto yy9;
yy99:
	yych = *++cur;
	if (yych == ':') goto yy128;
	if (yych == 'n') goto yy129;
	goto yy9;
yy100:
	yych = *++cur;
	if (yych == 'g') goto yy130;
	goto yy9;
yy101:
	yych = *++cur;
	if (yych == 'r') goto yy131;
	goto yy9;
yy102:
	yych = *++cur;
	if (yych == 'c') goto yy132;
	goto yy9;
yy103:
	yych = *++cur;
	if (yych == 'e') goto yy133;
	goto yy9;
yy104:
	yych = *++cur;
	if (yych == 'g') goto yy134;
	goto yy9;
yy105:
	yych = *++cur;
	if (yych == 'r') goto yy135;
	goto yy9;
yy106:
	yych = *++cur;
	if (yych == 'e') goto yy136;
	goto yy9;
yy107:
	yych = *++cur;
	if (yych == ':') goto yy137;
	goto yy9;
yy108:
	++cur;
	if (lim <= cur) if (!fill(1)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
yy109:
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy108;
		goto yy9;
	} else {
		if (yych <= ' ') goto yy108;
		if (yych <= '0') goto yy9;
		if (yych <= '9') {
			yyt1 = cur;
			goto yy138;
		}
		goto yy9;
	}
yy110:
	yych = *++cur;
	if (yych == 't') goto yy139;
	goto yy9;
yy111:
	yych = *++cur;
	if (yych == 'a') goto yy140;
	goto yy9;
yy112:
	yych = *++cur;
	if (yych == 'r') goto yy141;
	goto yy9;
yy113:
	yych = *++cur;
	if (yych == 'e') goto yy143;
	goto yy9;
yy114:
	yych = *++cur;
	if (yych == 'd') goto yy145;
	goto yy9;
yy115:
	++cur;
#line 160 "../src/parse/lexer.re"
	{
        out.gen_raw(tok, ptr);
        CHECK_RET(lex_opt_name(block_name));
        RET_BLOCK(InputBlock::LOCAL);
    }
#line 702 "src/parse/lexer.cc"
yy116:
	yych = *++cur;
	if (yych == 'a') goto yy146;
	goto yy9;
yy117:
	++cur;
#line 194 "../src/parse/lexer.re"
	{
        uint32_t allow = DCONF_FORMAT | DCONF_SEPARATOR;
        CHECK_RET(lex_special_block(out, CodeKind::MTAGS, allow));
        goto next;
    }
#line 715 "src/parse/lexer.cc"
yy118:
	++cur;
#line 206 "../src/parse/lexer.re"
	{
        uint32_t allow = DCONF_FORMAT | DCONF_SEPARATOR;
        CHECK_RET(lex_special_block(out, CodeKind::MVARS, allow));
        goto next;
    }
#line 724 "src/parse/lexer.cc"
yy119:
	++cur;
#line 166 "../src/parse/lexer.re"
	{
        out.gen_raw(tok, ptr);
        CHECK_RET(lex_opt_name(block_name));
        RET_BLOCK(InputBlock::RULES);
    }
#line 733 "src/parse/lexer.cc"
yy120:
	++cur;
#line 188 "../src/parse/lexer.re"
	{
        uint32_t allow = DCONF_FORMAT | DCONF_SEPARATOR;
        CHECK_RET(lex_special_block(out, CodeKind::STAGS, allow));
        goto next;
    }
#line 742 "src/parse/lexer.cc"
yy121:
	++cur;
#line 200 "../src/parse/lexer.re"
	{
        uint32_t allow = DCONF_FORMAT | DCONF_SEPARATOR;
        CHECK_RET(lex_special_block(out, CodeKind::SVARS, allow));
        goto next;
    }
#line 751 "src/parse/lexer.cc"
yy122:
	yych = *++cur;
	if (yych == 'i') goto yy147;
	goto yy9;
yy123:
	yych = *++cur;
	if (yych == 't') goto yy148;
	goto yy9;
yy124:
	yych = *++cur;
	if (yych == 'e') goto yy149;
	goto yy9;
yy125:
	yych = *++cur;
	if (yych == 'r') goto yy150;
	goto yy9;
yy126:
	yych = *++cur;
	if (yych == 'u') goto yy151;
	goto yy9;
yy127:
	yych = *++cur;
	if (yych == 'l') goto yy152;
	goto yy9;
yy128:
	yych = *++cur;
	if (yych == 'r') goto yy153;
	goto yy9;
yy129:
	yych = *++cur;
	if (yych == 'm') goto yy154;
	goto yy9;
yy130:
	yych = *++cur;
	if (yych == 's') goto yy155;
	goto yy9;
yy131:
	yych = *++cur;
	if (yych == 's') goto yy156;
	goto yy9;
yy132:
	++cur;
#line 154 "../src/parse/lexer.re"
	{
        out.gen_raw(tok, ptr);
        CHECK_RET(lex_opt_name(block_name));
        RET_BLOCK(InputBlock::GLOBAL);
    }
#line 800 "src/parse/lexer.cc"
yy133:
	yych = *++cur;
	if (yych == 's') goto yy157;
	goto yy9;
yy134:
	yych = *++cur;
	if (yych == 's') goto yy158;
	goto yy9;
yy135:
	yych = *++cur;
	if (yych == 's') goto yy159;
	goto yy9;
yy136:
	yych = *++cur;
	if (yych == 's') goto yy160;
	goto yy9;
yy137:
	yych = *++cur;
	if (yych == 'r') goto yy161;
	goto yy9;
yy138:
	++cur;
	if ((lim - cur) < 2) if (!fill(2)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yybm[0+yych] & 64) goto yy138;
	if (yych <= '\f') {
		if (yych <= 0x08) goto yy9;
		if (yych <= '\t') goto yy162;
		if (yych <= '\n') goto yy163;
		goto yy9;
	} else {
		if (yych <= '\r') goto yy164;
		if (yych == ' ') goto yy162;
		goto yy9;
	}
yy139:
	yych = *++cur;
	if (yych == 'i') goto yy165;
	goto yy9;
yy140:
	yych = *++cur;
	if (yych == 't') goto yy166;
	goto yy9;
yy141:
	yyaccept = 3;
	yych = *(mar = ++cur);
	if (yych == ':') goto yy167;
yy142:
#line 248 "../src/parse/lexer.re"
	{
        RET_FAIL(error_at_cur("ill-formed `header` block: expected `:on` or `:off`"));
    }
#line 853 "src/parse/lexer.cc"
yy143:
	yyaccept = 4;
	yych = *(mar = ++cur);
	if (yych <= 0x1F) {
		if (yych <= '\n') {
			if (yych >= '\t') {
				yyt1 = cur;
				goto yy168;
			}
		} else {
			if (yych == '\r') {
				yyt1 = cur;
				goto yy168;
			}
		}
	} else {
		if (yych <= '%') {
			if (yych <= ' ') {
				yyt1 = cur;
				goto yy168;
			}
			if (yych >= '%') {
				yyt1 = cur;
				goto yy169;
			}
		} else {
			if (yych == '*') {
				yyt1 = cur;
				goto yy170;
			}
		}
	}
yy144:
#line 269 "../src/parse/lexer.re"
	{
        RET_FAIL(error_at_cur(
                "ill-formed `ignore` block: expected a space, a newline, or the end of block"));
    }
#line 892 "src/parse/lexer.cc"
yy145:
	yych = *++cur;
	if (yych == 'e') goto yy171;
	goto yy9;
yy146:
	yych = *++cur;
	if (yych == 't') goto yy173;
	goto yy9;
yy147:
	yych = *++cur;
	if (yych == 't') goto yy174;
	goto yy9;
yy148:
	yych = *++cur;
	if (yych == 'a') goto yy175;
	goto yy9;
yy149:
	yych = *++cur;
	if (yych == 'r') goto yy176;
	goto yy9;
yy150:
	yych = *++cur;
	if (yych == 'e') goto yy177;
	goto yy9;
yy151:
	yych = *++cur;
	if (yych == 'd') goto yy178;
	goto yy9;
yy152:
	yych = *++cur;
	if (yych == ':') goto yy179;
	goto yy9;
yy153:
	yych = *++cur;
	if (yych == 'e') goto yy180;
	goto yy9;
yy154:
	yych = *++cur;
	if (yych == 'a') goto yy181;
	goto yy9;
yy155:
	yych = *++cur;
	if (yych == ':') goto yy182;
	goto yy9;
yy156:
	yych = *++cur;
	if (yych == ':') goto yy183;
	goto yy9;
yy157:
	yych = *++cur;
	if (yych == ':') goto yy184;
	goto yy9;
yy158:
	yych = *++cur;
	if (yych == ':') goto yy185;
	goto yy9;
yy159:
	yych = *++cur;
	if (yych == ':') goto yy186;
	goto yy9;
yy160:
	yych = *++cur;
	if (yych == ':') goto yy187;
	goto yy9;
yy161:
	yych = *++cur;
	if (yych == 'e') goto yy188;
	goto yy9;
yy162:
	++cur;
	if (lim <= cur) if (!fill(1)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy162;
		goto yy9;
	} else {
		if (yych <= ' ') goto yy162;
		if (yych == '"') goto yy189;
		goto yy9;
	}
yy163:
	++cur;
	cur = yyt1;
#line 282 "../src/parse/lexer.re"
	{
        out.gen_raw(tok, ptr);
        out.gen_stmt(code_newline(alc));
        CHECK_RET(set_sourceline());
        goto next;
    }
#line 983 "src/parse/lexer.cc"
yy164:
	yych = *++cur;
	if (yych == '\n') goto yy163;
	goto yy9;
yy165:
	yych = *++cur;
	if (yych == 'o') goto yy190;
	goto yy9;
yy166:
	yych = *++cur;
	if (yych == 'e') goto yy191;
	goto yy9;
yy167:
	yych = *++cur;
	if (yych == 'o') goto yy192;
	goto yy9;
yy168:
	++cur;
	cur = yyt1;
#line 263 "../src/parse/lexer.re"
	{
        out.gen_raw(tok, ptr);
        // allows arbitrary garbage before the end of the comment
        CHECK_RET(lex_block_end(out, true));
        goto next;
    }
#line 1010 "src/parse/lexer.cc"
yy169:
	yych = *++cur;
	if (yych == '}') goto yy168;
	goto yy9;
yy170:
	yych = *++cur;
	if (yych == '/') goto yy168;
	goto yy9;
yy171:
	yyaccept = 5;
	yych = *(mar = ++cur);
	if (yych == '\t') goto yy193;
	if (yych == ' ') goto yy193;
yy172:
#line 259 "../src/parse/lexer.re"
	{
        RET_FAIL(error_at_cur("ill-formed `include` block: expected filename in quotes"));
    }
#line 1029 "src/parse/lexer.cc"
yy173:
	yych = *++cur;
	if (yych == 'c') goto yy194;
	goto yy9;
yy174:
	yych = *++cur;
	if (yych == 'i') goto yy195;
	goto yy9;
yy175:
	yych = *++cur;
	if (yych == 't') goto yy196;
	goto yy9;
yy176:
	yych = *++cur;
	if (yych == ':') goto yy197;
	goto yy9;
yy177:
	yych = *++cur;
	if (yych == ':') goto yy198;
	goto yy9;
yy178:
	yych = *++cur;
	if (yych == 'e') goto yy199;
	goto yy9;
yy179:
	yych = *++cur;
	if (yych == 'r') goto yy200;
	goto yy9;
yy180:
	yych = *++cur;
	if (yych == '2') goto yy201;
	goto yy9;
yy181:
	yych = *++cur;
	if (yych == 't') goto yy202;
	goto yy9;
yy182:
	yych = *++cur;
	if (yych == 'r') goto yy203;
	goto yy9;
yy183:
	yych = *++cur;
	if (yych == 'r') goto yy204;
	goto yy9;
yy184:
	yych = *++cur;
	if (yych == 'r') goto yy205;
	goto yy9;
yy185:
	yych = *++cur;
	if (yych == 'r') goto yy206;
	goto yy9;
yy186:
	yych = *++cur;
	if (yych == 'r') goto yy207;
	goto yy9;
yy187:
	yych = *++cur;
	if (yych == 'r') goto yy208;
	goto yy9;
yy188:
	yych = *++cur;
	if (yych == '2') goto yy209;
	goto yy9;
yy189:
	++cur;
	if ((lim - cur) < 3) if (!fill(3)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yybm[0+yych] & 128) goto yy189;
	if (yych <= '\n') goto yy9;
	if (yych <= '"') goto yy210;
	goto yy211;
yy190:
	yych = *++cur;
	if (yych == 'n') goto yy212;
	goto yy9;
yy191:
	++cur;
#line 220 "../src/parse/lexer.re"
	{
        out.state_goto = true;
        if (!opts->storable_state) {
            RET_FAIL(error_at_cur("`getstate` without `-f --storable-state` option"));
        } else if (opts->code_model == CodeModel::LOOP_SWITCH) {
            RET_FAIL(error_at_cur(
                    "`getstate` is incompatible with --loop-switch code model, it requires"
                    " cross-block `goto` transitions or function calls"));
        }
        CHECK_RET(lex_special_block(out, CodeKind::STATE_GOTO, 0));
        goto next;
    }
#line 1121 "src/parse/lexer.cc"
yy192:
	yych = *++cur;
	if (yych == 'f') goto yy213;
	if (yych == 'n') goto yy214;
	goto yy9;
yy193:
	++cur;
	if (lim <= cur) if (!fill(1)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy193;
		goto yy9;
	} else {
		if (yych <= ' ') goto yy193;
		if (yych == '"') {
			yyt1 = cur;
			goto yy215;
		}
		goto yy9;
	}
yy194:
	yych = *++cur;
	if (yych == 'h') goto yy216;
	goto yy9;
yy195:
	yych = *++cur;
	if (yych == 'o') goto yy217;
	goto yy9;
yy196:
	yych = *++cur;
	if (yych == 'e') goto yy218;
	goto yy9;
yy197:
	yych = *++cur;
	if (yych == 'r') goto yy219;
	goto yy9;
yy198:
	yych = *++cur;
	if (yych == 'r') goto yy220;
	goto yy9;
yy199:
	yych = *++cur;
	if (yych == ':') goto yy221;
	goto yy9;
yy200:
	yych = *++cur;
	if (yych == 'e') goto yy222;
	goto yy9;
yy201:
	yych = *++cur;
	if (yych == 'c') goto yy223;
	goto yy9;
yy202:
	yych = *++cur;
	if (yych == 'c') goto yy224;
	goto yy9;
yy203:
	yych = *++cur;
	if (yych == 'e') goto yy225;
	goto yy9;
yy204:
	yych = *++cur;
	if (yych == 'e') goto yy226;
	goto yy9;
yy205:
	yych = *++cur;
	if (yych == 'e') goto yy227;
	goto yy9;
yy206:
	yych = *++cur;
	if (yych == 'e') goto yy228;
	goto yy9;
yy207:
	yych = *++cur;
	if (yych == 'e') goto yy229;
	goto yy9;
yy208:
	yych = *++cur;
	if (yych == 'e') goto yy230;
	goto yy9;
yy209:
	yych = *++cur;
	if (yych == 'c') goto yy64;
	goto yy9;
yy210:
	yych = *++cur;
	if (yych == '\n') goto yy163;
	if (yych == '\r') goto yy164;
	goto yy9;
yy211:
	++cur;
	if (lim <= cur) if (!fill(1)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yych <= 0x00) goto yy9;
	if (yych == '\n') goto yy9;
	goto yy189;
yy212:
	yych = *++cur;
	if (yych == 's') goto yy231;
	goto yy9;
yy213:
	yych = *++cur;
	if (yych == 'f') goto yy232;
	goto yy9;
yy214:
	++cur;
#line 233 "../src/parse/lexer.re"
	{
        out.gen_raw(tok, ptr);
        out.header_mode(true);
        out.need_header = true;
        CHECK_RET(lex_block_end(out));
        goto next;
    }
#line 1236 "src/parse/lexer.cc"
yy215:
	++cur;
	if ((lim - cur) < 3) if (!fill(3)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yych <= '!') {
		if (yych <= 0x00) goto yy9;
		if (yych == '\n') goto yy9;
		goto yy215;
	} else {
		if (yych <= '"') goto yy233;
		if (yych == '\\') goto yy234;
		goto yy215;
	}
yy216:
	++cur;
#line 183 "../src/parse/lexer.re"
	{
        CHECK_RET(lex_special_block(out, CodeKind::MAXNMATCH, DCONF_FORMAT));
        goto next;
    }
#line 1257 "src/parse/lexer.cc"
yy217:
	yych = *++cur;
	if (yych == 'n') goto yy136;
	goto yy9;
yy218:
	yych = *++cur;
	if (yych == ':') goto yy235;
	goto yy9;
yy219:
	yych = *++cur;
	if (yych == 'e') goto yy236;
	goto yy9;
yy220:
	yych = *++cur;
	if (yych == 'e') goto yy237;
	goto yy9;
yy221:
	yych = *++cur;
	if (yych == 'r') goto yy238;
	goto yy9;
yy222:
	yych = *++cur;
	if (yych == '2') goto yy239;
	goto yy9;
yy223:
	++cur;
	goto yy58;
yy224:
	yych = *++cur;
	if (yych == 'h') goto yy240;
	goto yy9;
yy225:
	yych = *++cur;
	if (yych == '2') goto yy241;
	goto yy9;
yy226:
	yych = *++cur;
	if (yych == '2') goto yy242;
	goto yy9;
yy227:
	yych = *++cur;
	if (yych == '2') goto yy243;
	goto yy9;
yy228:
	yych = *++cur;
	if (yych == '2') goto yy244;
	goto yy9;
yy229:
	yych = *++cur;
	if (yych == '2') goto yy245;
	goto yy9;
yy230:
	yych = *++cur;
	if (yych == '2') goto yy246;
	goto yy9;
yy231:
	++cur;
#line 212 "../src/parse/lexer.re"
	{
        out.cond_enum_autogen = false;
        out.warn_condition_order = false; // see note [condition order]
        uint32_t allow = DCONF_FORMAT | DCONF_SEPARATOR;
        CHECK_RET(lex_special_block(out, CodeKind::COND_ENUM, allow));
        goto next;
    }
#line 1323 "src/parse/lexer.cc"
yy232:
	++cur;
#line 241 "../src/parse/lexer.re"
	{
        out.gen_raw(tok, ptr);
        out.header_mode(false);
        if (globopts->line_dirs) out.gen_stmt(code_line_info_input(alc, cur_loc()));
        CHECK_RET(lex_block_end(out));
        goto next;
    }
#line 1334 "src/parse/lexer.cc"
yy233:
	yych = *++cur;
	if (yych <= 0x1F) {
		if (yych <= '\n') {
			if (yych <= 0x08) goto yy9;
			yyt2 = cur;
			goto yy247;
		} else {
			if (yych == '\r') {
				yyt2 = cur;
				goto yy247;
			}
			goto yy9;
		}
	} else {
		if (yych <= '%') {
			if (yych <= ' ') {
				yyt2 = cur;
				goto yy247;
			}
			if (yych <= '$') goto yy9;
			yyt2 = cur;
			goto yy248;
		} else {
			if (yych == '*') {
				yyt2 = cur;
				goto yy249;
			}
			goto yy9;
		}
	}
yy234:
	++cur;
	if (lim <= cur) if (!fill(1)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yych <= 0x00) goto yy9;
	if (yych == '\n') goto yy9;
	goto yy215;
yy235:
	yych = *++cur;
	if (yych == 'r') goto yy250;
	goto yy9;
yy236:
	yych = *++cur;
	if (yych == '2') goto yy251;
	goto yy9;
yy237:
	yych = *++cur;
	if (yych == '2') goto yy252;
	goto yy9;
yy238:
	yych = *++cur;
	if (yych == 'e') goto yy253;
	goto yy9;
yy239:
	yych = *++cur;
	if (yych == 'c') goto yy115;
	goto yy9;
yy240:
	yych = *++cur;
	if (yych == ':') goto yy254;
	goto yy9;
yy241:
	yych = *++cur;
	if (yych == 'c') goto yy117;
	goto yy9;
yy242:
	yych = *++cur;
	if (yych == 'c') goto yy118;
	goto yy9;
yy243:
	yych = *++cur;
	if (yych == 'c') goto yy119;
	goto yy9;
yy244:
	yych = *++cur;
	if (yych == 'c') goto yy120;
	goto yy9;
yy245:
	yych = *++cur;
	if (yych == 'c') goto yy121;
	goto yy9;
yy246:
	yych = *++cur;
	if (yych == 'c') goto yy231;
	goto yy9;
yy247:
	++cur;
	x = yyt1;
	y = yyt2;
	cur = yyt2;
#line 252 "../src/parse/lexer.re"
	{
        out.gen_raw(tok, ptr);
        CHECK_RET(lex_block_end(out));
        CHECK_RET(include(getstr(x + 1, y - 1), ptr));
        if (globopts->line_dirs) out.gen_stmt(code_line_info_input(alc, cur_loc()));
        goto next;
    }
#line 1434 "src/parse/lexer.cc"
yy248:
	yych = *++cur;
	if (yych == '}') goto yy247;
	goto yy9;
yy249:
	yych = *++cur;
	if (yych == '/') goto yy247;
	goto yy9;
yy250:
	yych = *++cur;
	if (yych == 'e') goto yy255;
	goto yy9;
yy251:
	yych = *++cur;
	if (yych == 'c') goto yy141;
	goto yy9;
yy252:
	yych = *++cur;
	if (yych == 'c') goto yy143;
	goto yy9;
yy253:
	yych = *++cur;
	if (yych == '2') goto yy256;
	goto yy9;
yy254:
	yych = *++cur;
	if (yych == 'r') goto yy257;
	goto yy9;
yy255:
	yych = *++cur;
	if (yych == '2') goto yy258;
	goto yy9;
yy256:
	yych = *++cur;
	if (yych == 'c') goto yy171;
	goto yy9;
yy257:
	yych = *++cur;
	if (yych == 'e') goto yy259;
	goto yy9;
yy258:
	yych = *++cur;
	if (yych == 'c') goto yy191;
	goto yy9;
yy259:
	yych = *++cur;
	if (yych != '2') goto yy9;
	yych = *++cur;
	if (yych == 'c') goto yy216;
	goto yy9;
}
#line 295 "../src/parse/lexer.re"

}

#undef RET_BLOCK

Ret Input::lex_opt_name(std::string& name) {
    tok = cur;

#line 1495 "src/parse/lexer.cc"
{
	uint8_t yych;
	static const unsigned char yybm[256] = {
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		128, 128, 128, 128, 128, 128, 128, 128,
		128, 128,   0,   0,   0,   0,   0,   0,
		  0, 128, 128, 128, 128, 128, 128, 128,
		128, 128, 128, 128, 128, 128, 128, 128,
		128, 128, 128, 128, 128, 128, 128, 128,
		128, 128, 128,   0,   0,   0,   0, 128,
		  0, 128, 128, 128, 128, 128, 128, 128,
		128, 128, 128, 128, 128, 128, 128, 128,
		128, 128, 128, 128, 128, 128, 128, 128,
		128, 128, 128,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0
	};
	if ((lim - cur) < 2) if (!fill(2)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *(mar = cur);
	if (yych <= ' ') {
		if (yych <= '\f') {
			if (yych <= 0x08) goto yy261;
			if (yych <= '\n') {
				yyt1 = cur;
				goto yy262;
			}
		} else {
			if (yych <= '\r') {
				yyt1 = cur;
				goto yy262;
			}
			if (yych >= ' ') {
				yyt1 = cur;
				goto yy262;
			}
		}
	} else {
		if (yych <= ')') {
			if (yych == '%') {
				yyt1 = cur;
				goto yy263;
			}
		} else {
			if (yych <= '*') {
				yyt1 = cur;
				goto yy265;
			}
			if (yych == ':') goto yy266;
		}
	}
yy261:
#line 303 "../src/parse/lexer.re"
	{
        RET_FAIL(error_at_cur(
                "ill-formed start of a block: expected a space, a newline, a colon "
                "followed by a block name, or the end of block"));
    }
#line 1572 "src/parse/lexer.cc"
yy262:
	++cur;
	cur = yyt1;
#line 309 "../src/parse/lexer.re"
	{ name.clear();              return Ret::OK; }
#line 1578 "src/parse/lexer.cc"
yy263:
	yych = *++cur;
	if (yych == '}') goto yy262;
yy264:
	cur = mar;
	goto yy261;
yy265:
	yych = *++cur;
	if (yych == '/') goto yy262;
	goto yy264;
yy266:
	yych = *++cur;
	if (yych <= '^') {
		if (yych <= '@') goto yy264;
		if (yych >= '[') goto yy264;
	} else {
		if (yych == '`') goto yy264;
		if (yych >= '{') goto yy264;
	}
yy267:
	++cur;
	if ((lim - cur) < 2) if (!fill(2)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yybm[0+yych] & 128) goto yy267;
	if (yych <= 0x1F) {
		if (yych <= '\n') {
			if (yych <= 0x08) goto yy264;
			yyt1 = cur;
		} else {
			if (yych != '\r') goto yy264;
			yyt1 = cur;
		}
	} else {
		if (yych <= '%') {
			if (yych <= ' ') {
				yyt1 = cur;
				goto yy268;
			}
			if (yych <= '$') goto yy264;
			yyt1 = cur;
			goto yy269;
		} else {
			if (yych == '*') {
				yyt1 = cur;
				goto yy270;
			}
			goto yy264;
		}
	}
yy268:
	++cur;
	cur = yyt1;
#line 310 "../src/parse/lexer.re"
	{ name.assign(tok + 1, cur); return Ret::OK; }
#line 1633 "src/parse/lexer.cc"
yy269:
	yych = *++cur;
	if (yych == '}') goto yy268;
	goto yy264;
yy270:
	yych = *++cur;
	if (yych == '/') goto yy268;
	goto yy264;
}
#line 311 "../src/parse/lexer.re"

}

Ret Input::lex_name_list(BlockNameList** ptail) {
    BlockNameList** phead = ptail;
loop:
    tok = cur;

#line 1652 "src/parse/lexer.cc"
{
	uint8_t yych;
	static const unsigned char yybm[256] = {
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		128, 128, 128, 128, 128, 128, 128, 128,
		128, 128,   0,   0,   0,   0,   0,   0,
		  0, 128, 128, 128, 128, 128, 128, 128,
		128, 128, 128, 128, 128, 128, 128, 128,
		128, 128, 128, 128, 128, 128, 128, 128,
		128, 128, 128,   0,   0,   0,   0, 128,
		  0, 128, 128, 128, 128, 128, 128, 128,
		128, 128, 128, 128, 128, 128, 128, 128,
		128, 128, 128, 128, 128, 128, 128, 128,
		128, 128, 128,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0
	};
	if ((lim - cur) < 2) if (!fill(2)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *(mar = cur);
	if (yych <= ' ') {
		if (yych <= '\f') {
			if (yych <= 0x08) goto yy272;
			if (yych <= '\n') {
				yyt1 = cur;
				goto yy273;
			}
		} else {
			if (yych <= '\r') {
				yyt1 = cur;
				goto yy273;
			}
			if (yych >= ' ') {
				yyt1 = cur;
				goto yy273;
			}
		}
	} else {
		if (yych <= ')') {
			if (yych == '%') {
				yyt1 = cur;
				goto yy274;
			}
		} else {
			if (yych <= '*') {
				yyt1 = cur;
				goto yy276;
			}
			if (yych == ':') goto yy277;
		}
	}
yy272:
#line 319 "../src/parse/lexer.re"
	{
        RET_FAIL(error_at_cur(
                "ill-formed start of a block: expected a space, a newline, a colon "
                "followed by a list of colon-separated block names, or the end of block"));
    }
#line 1729 "src/parse/lexer.cc"
yy273:
	++cur;
	cur = yyt1;
#line 325 "../src/parse/lexer.re"
	{ *ptail = nullptr; return Ret::OK; }
#line 1735 "src/parse/lexer.cc"
yy274:
	yych = *++cur;
	if (yych == '}') goto yy273;
yy275:
	cur = mar;
	goto yy272;
yy276:
	yych = *++cur;
	if (yych == '/') goto yy273;
	goto yy275;
yy277:
	yych = *++cur;
	if (yych <= '^') {
		if (yych <= '@') goto yy275;
		if (yych >= '[') goto yy275;
	} else {
		if (yych == '`') goto yy275;
		if (yych >= '{') goto yy275;
	}
yy278:
	++cur;
	if (lim <= cur) if (!fill(1)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yybm[0+yych] & 128) goto yy278;
#line 327 "../src/parse/lexer.re"
	{
        BlockNameList *l = alc.alloct<BlockNameList>(1);
        l->name = newcstr(tok + 1, cur, alc);
        l->next = nullptr;
        *ptail = l;
        ptail = &l->next;

        // Check that the added name is unique.
        for (const BlockNameList *p = *phead; p != l; p = p->next) {
            if (strcmp(p->name, l->name) == 0) {
                RET_FAIL(error_at_cur("duplicate block `%s` on the list", p->name));
            }
        }

        goto loop;
    }
#line 1777 "src/parse/lexer.cc"
}
#line 343 "../src/parse/lexer.re"

}

Ret Input::lex_block_end(Output& out, bool allow_garbage) {
    bool multiline = false;
loop: 
#line 1786 "src/parse/lexer.cc"
{
	uint8_t yych;
	static const unsigned char yybm[256] = {
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0, 128,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		128,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0
	};
	if ((lim - cur) < 2) if (!fill(2)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yybm[0+yych] & 128) goto yy282;
	if (yych <= '\r') {
		if (yych <= 0x08) goto yy280;
		if (yych <= '\n') goto yy283;
		if (yych >= '\r') goto yy284;
	} else {
		if (yych <= '%') {
			if (yych >= '%') goto yy285;
		} else {
			if (yych == '*') goto yy286;
		}
	}
yy280:
	++cur;
yy281:
#line 349 "../src/parse/lexer.re"
	{
        if (allow_garbage && !is_eof()) goto loop;
        RET_FAIL(error_at_cur(
            "ill-formed block: expected optional whitespaces followed by the end of block"));
    }
#line 1846 "src/parse/lexer.cc"
yy282:
	++cur;
	if (lim <= cur) if (!fill(1)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yybm[0+yych] & 128) goto yy282;
#line 360 "../src/parse/lexer.re"
	{ goto loop; }
#line 1854 "src/parse/lexer.cc"
yy283:
	++cur;
#line 361 "../src/parse/lexer.re"
	{ next_line(); multiline = true; goto loop; }
#line 1859 "src/parse/lexer.cc"
yy284:
	yych = *++cur;
	if (yych == '\n') goto yy283;
	goto yy281;
yy285:
	yych = *++cur;
	if (yych == '}') goto yy287;
	goto yy281;
yy286:
	yych = *++cur;
	if (yych != '/') goto yy281;
yy287:
	++cur;
#line 354 "../src/parse/lexer.re"
	{
        if (multiline && globopts->line_dirs) {
            out.gen_stmt(code_line_info_input(out.allocator, cur_loc()));
        }
        return Ret::OK;
    }
#line 1880 "src/parse/lexer.cc"
}
#line 362 "../src/parse/lexer.re"

}

Ret Input::lex_special_block(Output& out, CodeKind kind, uint32_t mask) {
    const char* fmt = nullptr, *sep = nullptr;
    BlockNameList* blocks;

    out.gen_raw(tok, ptr, globopts->line_dirs);
    CHECK_RET(lex_name_list(&blocks));

loop: 
#line 1894 "src/parse/lexer.cc"
{
	uint8_t yych;
	static const unsigned char yybm[256] = {
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0, 128,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		128,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0
	};
	if ((lim - cur) < 9) if (!fill(9)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yybm[0+yych] & 128) goto yy291;
	if (yych <= '%') {
		if (yych <= '\f') {
			if (yych <= 0x08) goto yy289;
			if (yych <= '\n') goto yy292;
		} else {
			if (yych <= '\r') goto yy293;
			if (yych >= '%') goto yy294;
		}
	} else {
		if (yych <= 'e') {
			if (yych == '*') goto yy295;
		} else {
			if (yych <= 'f') goto yy296;
			if (yych == 's') goto yy297;
		}
	}
yy289:
	++cur;
yy290:
#line 373 "../src/parse/lexer.re"
	{
        RET_FAIL(error_at_cur(
            "ill-formed block: expected optional configurations followed by the end of block"));
    }
#line 1958 "src/parse/lexer.cc"
yy291:
	++cur;
	if (lim <= cur) if (!fill(1)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yybm[0+yych] & 128) goto yy291;
#line 396 "../src/parse/lexer.re"
	{ goto loop; }
#line 1966 "src/parse/lexer.cc"
yy292:
	++cur;
#line 398 "../src/parse/lexer.re"
	{ next_line(); goto loop; }
#line 1971 "src/parse/lexer.cc"
yy293:
	yych = *++cur;
	if (yych == '\n') goto yy292;
	goto yy290;
yy294:
	yych = *++cur;
	if (yych == '}') goto yy298;
	goto yy290;
yy295:
	yych = *++cur;
	if (yych == '/') goto yy298;
	goto yy290;
yy296:
	yych = *(mar = ++cur);
	if (yych == 'o') goto yy299;
	goto yy290;
yy297:
	yych = *(mar = ++cur);
	if (yych == 'e') goto yy301;
	goto yy290;
yy298:
	++cur;
#line 400 "../src/parse/lexer.re"
	{
        if (globopts->line_dirs) out.gen_stmt(code_line_info_output(alc));
        out.gen_stmt(code_fmt(alc, kind, blocks, fmt, sep));
        if (globopts->line_dirs) out.gen_stmt(code_line_info_input(alc, cur_loc()));
        return Ret::OK;
    }
#line 2001 "src/parse/lexer.cc"
yy299:
	yych = *++cur;
	if (yych == 'r') goto yy302;
yy300:
	cur = mar;
	goto yy290;
yy301:
	yych = *++cur;
	if (yych == 'p') goto yy303;
	goto yy300;
yy302:
	yych = *++cur;
	if (yych == 'm') goto yy304;
	goto yy300;
yy303:
	yych = *++cur;
	if (yych == 'a') goto yy305;
	goto yy300;
yy304:
	yych = *++cur;
	if (yych == 'a') goto yy306;
	goto yy300;
yy305:
	yych = *++cur;
	if (yych == 'r') goto yy307;
	goto yy300;
yy306:
	yych = *++cur;
	if (yych == 't') goto yy308;
	goto yy300;
yy307:
	yych = *++cur;
	if (yych == 'a') goto yy309;
	goto yy300;
yy308:
	++cur;
#line 378 "../src/parse/lexer.re"
	{
        if ((mask & DCONF_FORMAT) == 0) {
            RET_FAIL(error_at_cur("unexpected configuration 'format'"));
        }
        CHECK_RET(lex_conf_string_legacy());
        fmt = copystr(tmp_str, alc);
        goto loop;
    }
#line 2047 "src/parse/lexer.cc"
yy309:
	yych = *++cur;
	if (yych != 't') goto yy300;
	yych = *++cur;
	if (yych != 'o') goto yy300;
	yych = *++cur;
	if (yych != 'r') goto yy300;
	++cur;
#line 387 "../src/parse/lexer.re"
	{
        if ((mask & DCONF_SEPARATOR) == 0) {
            RET_FAIL(error_at_cur("unexpected configuration 'separator'"));
        }
        CHECK_RET(lex_conf_string_legacy());
        sep = copystr(tmp_str, alc);
        goto loop;
    }
#line 2065 "src/parse/lexer.cc"
}
#line 406 "../src/parse/lexer.re"

}

#define RET_TOK(t) do { token = t; return Ret::OK; } while(0)

Ret Input::lex_block(RE2C_STYPE* yylval, Ast& ast, int& token) {
    const uint8_t* p, *x, *y;
scan:
    tok = cur;
    location = cur_loc();

#line 2079 "src/parse/lexer.cc"
{
	uint8_t yych;
	unsigned int yyaccept = 0;
	static const unsigned char yybm[256] = {
		  0, 128, 128, 128, 128, 128, 128, 128,
		128, 144,   0, 128, 128, 128, 128, 128,
		128, 128, 128, 128, 128, 128, 128, 128,
		128, 128, 128, 128, 128, 128, 128, 128,
		144, 128,   0, 128, 128, 128, 128, 128,
		128, 128, 128, 128, 128, 128, 128, 128,
		224, 224, 224, 224, 224, 224, 224, 224,
		224, 224, 128, 128, 128, 128, 128, 128,
		128, 160, 160, 160, 160, 160, 160, 160,
		160, 160, 160, 160, 160, 160, 160, 160,
		160, 160, 160, 160, 160, 160, 160, 160,
		160, 160, 160, 128,   0, 128, 128, 160,
		128, 160, 160, 160, 160, 160, 160, 160,
		160, 160, 160, 160, 160, 160, 160, 160,
		160, 160, 160, 160, 160, 160, 160, 160,
		160, 160, 160, 128, 128, 128, 128, 128,
		128, 128, 128, 128, 128, 128, 128, 128,
		128, 128, 128, 128, 128, 128, 128, 128,
		128, 128, 128, 128, 128, 128, 128, 128,
		128, 128, 128, 128, 128, 128, 128, 128,
		128, 128, 128, 128, 128, 128, 128, 128,
		128, 128, 128, 128, 128, 128, 128, 128,
		128, 128, 128, 128, 128, 128, 128, 128,
		128, 128, 128, 128, 128, 128, 128, 128,
		128, 128, 128, 128, 128, 128, 128, 128,
		128, 128, 128, 128, 128, 128, 128, 128,
		128, 128, 128, 128, 128, 128, 128, 128,
		128, 128, 128, 128, 128, 128, 128, 128,
		128, 128, 128, 128, 128, 128, 128, 128,
		128, 128, 128, 128, 128, 128, 128, 128,
		128, 128, 128, 128, 128, 128, 128, 128,
		128, 128, 128, 128, 128, 128, 128, 128
	};
	if ((lim - cur) < 9) if (!fill(9)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yybm[0+yych] & 16) goto yy313;
	if (yych <= '9') {
		if (yych <= '$') {
			if (yych <= '\r') {
				if (yych <= 0x08) goto yy311;
				if (yych <= '\n') goto yy314;
				if (yych >= '\r') goto yy316;
			} else {
				if (yych <= '!') {
					if (yych >= ' ') goto yy317;
				} else {
					if (yych <= '"') goto yy319;
					if (yych <= '#') goto yy320;
					goto yy321;
				}
			}
		} else {
			if (yych <= '*') {
				if (yych <= '&') {
					if (yych <= '%') goto yy322;
				} else {
					if (yych <= '\'') goto yy323;
					if (yych <= ')') goto yy321;
					goto yy324;
				}
			} else {
				if (yych <= '-') {
					if (yych <= '+') goto yy321;
				} else {
					if (yych <= '.') goto yy325;
					if (yych <= '/') goto yy326;
					goto yy327;
				}
			}
		}
	} else {
		if (yych <= '[') {
			if (yych <= '=') {
				if (yych <= ':') goto yy328;
				if (yych <= ';') goto yy321;
				if (yych <= '<') goto yy329;
				goto yy330;
			} else {
				if (yych <= '?') {
					if (yych >= '?') goto yy321;
				} else {
					if (yych <= '@') goto yy320;
					if (yych <= 'Z') goto yy331;
					goto yy333;
				}
			}
		} else {
			if (yych <= 'q') {
				if (yych <= '^') {
					if (yych <= '\\') goto yy321;
				} else {
					if (yych != '`') goto yy331;
				}
			} else {
				if (yych <= 'z') {
					if (yych <= 'r') goto yy334;
					goto yy331;
				} else {
					if (yych <= '{') goto yy335;
					if (yych <= '|') goto yy321;
				}
			}
		}
	}
yy311:
	++cur;
yy312:
#line 558 "../src/parse/lexer.re"
	{
        if (globopts->flex_syntax && globopts->input_encoding == Enc::Type::UTF8) {
            // Try to lex this as a raw UTF-8 code point (not captured by the `name` rule above
            // because it is restricted to alphanumeric ASCII characters and underscore).
            --cur;
            uint32_t c;
            CHECK_RET(lex_cls_chr(c));
            ast.temp_chars.push_back({c, tok_loc()});
            yylval->regexp = ast.str(tok_loc(), false);
            RET_TOK(TOKEN_REGEXP);
        }
        RET_FAIL(error_at_tok("unexpected character: '%c'", *tok));
    }
#line 2205 "src/parse/lexer.cc"
yy313:
	++cur;
	if (lim <= cur) if (!fill(1)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yybm[0+yych] & 16) goto yy313;
#line 545 "../src/parse/lexer.re"
	{ goto scan; }
#line 2213 "src/parse/lexer.cc"
yy314:
	yyaccept = 0;
	yych = *(mar = ++cur);
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy337;
	} else {
		if (yych <= ' ') goto yy337;
		if (yych == '#') goto yy339;
	}
yy315:
#line 549 "../src/parse/lexer.re"
	{
        next_line();
        if (mode == LexMode::FLEX_NAME) {
            mode = LexMode::NORMAL;
            RET_TOK(TOKEN_FID_END);
        }
        goto scan;
    }
#line 2233 "src/parse/lexer.cc"
yy316:
	yych = *++cur;
	if (yych == '\n') goto yy314;
	goto yy312;
yy317:
	yyaccept = 1;
	yych = *(mar = ++cur);
	if (yych <= 'h') {
		if (yych == 'e') goto yy340;
	} else {
		if (yych <= 'i') goto yy341;
		if (yych == 'u') goto yy342;
	}
yy318:
#line 443 "../src/parse/lexer.re"
	{ RET_TOK(*tok); }
#line 2250 "src/parse/lexer.cc"
yy319:
	++cur;
#line 434 "../src/parse/lexer.re"
	{ CHECK_RET(lex_str(ast, '"',   yylval->regexp)); RET_TOK(TOKEN_REGEXP); }
#line 2255 "src/parse/lexer.cc"
yy320:
	yych = *++cur;
	if (yych <= '^') {
		if (yych <= '@') goto yy312;
		if (yych <= 'Z') goto yy343;
		goto yy312;
	} else {
		if (yych == '`') goto yy312;
		if (yych <= 'z') goto yy343;
		goto yy312;
	}
yy321:
	++cur;
	goto yy318;
yy322:
	yych = *++cur;
	if (yych == '}') goto yy345;
	goto yy312;
yy323:
	++cur;
#line 433 "../src/parse/lexer.re"
	{ CHECK_RET(lex_str(ast, '\'',  yylval->regexp)); RET_TOK(TOKEN_REGEXP); }
#line 2278 "src/parse/lexer.cc"
yy324:
	yych = *++cur;
	if (yych == '/') goto yy345;
	goto yy318;
yy325:
	++cur;
#line 543 "../src/parse/lexer.re"
	{ yylval->regexp = ast.dot(tok_loc()); RET_TOK(TOKEN_REGEXP); }
#line 2287 "src/parse/lexer.cc"
yy326:
	yych = *++cur;
	if (yych == '*') goto yy346;
	if (yych == '/') goto yy347;
	goto yy318;
yy327:
	++cur;
#line 508 "../src/parse/lexer.re"
	{
        if (!globopts->flex_syntax) {
            RET_FAIL(error_at_tok("unexpected character: '%c'", *tok));
        }
        ast.temp_chars.push_back({*tok, tok_loc()});
        yylval->regexp = ast.str(tok_loc(), false);
        RET_TOK(TOKEN_REGEXP);
    }
#line 2304 "src/parse/lexer.cc"
yy328:
	yych = *++cur;
	if (yych == '=') goto yy348;
	goto yy312;
yy329:
	++cur;
#line 426 "../src/parse/lexer.re"
	{ return lex_clist(ast, token); }
#line 2313 "src/parse/lexer.cc"
yy330:
	yyaccept = 1;
	yych = *(mar = ++cur);
	if (yych == '>') goto yy350;
	goto yy318;
yy331:
	++cur;
	if (lim <= cur) if (!fill(1)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
yy332:
	if (yybm[0+yych] & 32) goto yy331;
#line 487 "../src/parse/lexer.re"
	{
        bool yes;
        CHECK_RET(lex_namedef_context_re2c(yes));
        if (!globopts->flex_syntax || yes) {
            yylval->cstr = ast.cstr_local(tok, cur);
            RET_TOK(TOKEN_ID);
        }
        CHECK_RET(lex_namedef_context_flex(yes));
        if (yes) {
            yylval->cstr = ast.cstr_local(tok, cur);
            mode = LexMode::FLEX_NAME;
            RET_TOK(TOKEN_FID);
        }
        // consume one character, otherwise we risk breaking operator precedence in cases like
        // `ab*`: it should be `a(b)*`, not `(ab)*`
        cur = tok + 1;
        ast.temp_chars.push_back({tok[0], tok_loc()});
        yylval->regexp = ast.str(tok_loc(), false);
        RET_TOK(TOKEN_REGEXP);
    }
#line 2346 "src/parse/lexer.cc"
yy333:
	yych = *++cur;
	if (yych == '^') goto yy351;
#line 435 "../src/parse/lexer.re"
	{ CHECK_RET(lex_cls(ast, false, yylval->regexp)); RET_TOK(TOKEN_REGEXP); }
#line 2352 "src/parse/lexer.cc"
yy334:
	yych = *++cur;
	if (yych == 'e') goto yy352;
	goto yy332;
yy335:
	yyaccept = 2;
	yych = *(mar = ++cur);
	if (yybm[0+yych] & 64) goto yy355;
	if (yych <= 'Z') {
		if (yych == ',') goto yy353;
		if (yych >= 'A') goto yy356;
	} else {
		if (yych <= '_') {
			if (yych >= '_') goto yy356;
		} else {
			if (yych <= '`') goto yy336;
			if (yych <= 'z') goto yy356;
		}
	}
yy336:
#line 418 "../src/parse/lexer.re"
	{ CHECK_RET(lex_code_in_braces(yylval, ast)); RET_TOK(TOKEN_CODE); }
#line 2375 "src/parse/lexer.cc"
yy337:
	++cur;
	if (lim <= cur) if (!fill(1)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy337;
	} else {
		if (yych <= ' ') goto yy337;
		if (yych == '#') goto yy339;
	}
yy338:
	cur = mar;
	if (yyaccept <= 3) {
		if (yyaccept <= 1) {
			if (yyaccept == 0) goto yy315;
			else goto yy318;
		} else {
			if (yyaccept == 2) goto yy336;
			else goto yy349;
		}
	} else {
		if (yyaccept <= 5) {
			if (yyaccept == 4) goto yy354;
			else goto yy371;
		} else {
			goto yy395;
		}
	}
yy339:
	++cur;
	if ((lim - cur) < 5) if (!fill(5)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy339;
		goto yy338;
	} else {
		if (yych <= ' ') goto yy339;
		if (yych == 'l') goto yy357;
		goto yy338;
	}
yy340:
	yych = *++cur;
	if (yych == 'n') goto yy358;
	goto yy338;
yy341:
	yych = *++cur;
	if (yych == 'n') goto yy359;
	goto yy338;
yy342:
	yych = *++cur;
	if (yych == 's') goto yy360;
	goto yy338;
yy343:
	++cur;
	if (lim <= cur) if (!fill(1)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yych <= 'Z') {
		if (yych <= '/') goto yy344;
		if (yych <= '9') goto yy343;
		if (yych >= 'A') goto yy343;
	} else {
		if (yych <= '_') {
			if (yych >= '_') goto yy343;
		} else {
			if (yych <= '`') goto yy344;
			if (yych <= 'z') goto yy343;
		}
	}
yy344:
#line 438 "../src/parse/lexer.re"
	{
        yylval->regexp = ast.tag(tok_loc(), ast.cstr_global(tok + 1, cur), tok[0] == '#');
        RET_TOK(TOKEN_REGEXP);
    }
#line 2450 "src/parse/lexer.cc"
yy345:
	++cur;
#line 431 "../src/parse/lexer.re"
	{ tok = cur; RET_TOK(0); }
#line 2455 "src/parse/lexer.cc"
yy346:
	++cur;
#line 429 "../src/parse/lexer.re"
	{ CHECK_RET(lex_c_comment());   goto scan; }
#line 2460 "src/parse/lexer.cc"
yy347:
	++cur;
#line 428 "../src/parse/lexer.re"
	{ CHECK_RET(lex_cpp_comment()); goto scan; }
#line 2465 "src/parse/lexer.cc"
yy348:
	yyaccept = 3;
	yych = *(mar = ++cur);
	if (yych == '>') goto yy350;
yy349:
#line 419 "../src/parse/lexer.re"
	{ CHECK_RET(lex_code_indented(yylval, ast));  RET_TOK(TOKEN_CODE); }
#line 2473 "src/parse/lexer.cc"
yy350:
	++cur;
	if (lim <= cur) if (!fill(1)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yych <= '@') {
		if (yych <= '\t') {
			if (yych <= 0x08) goto yy338;
			goto yy350;
		} else {
			if (yych == ' ') goto yy350;
			goto yy338;
		}
	} else {
		if (yych <= '_') {
			if (yych <= 'Z') {
				yyt1 = cur;
				goto yy361;
			}
			if (yych <= '^') goto yy338;
			yyt1 = cur;
			goto yy361;
		} else {
			if (yych <= '`') goto yy338;
			if (yych <= 'z') {
				yyt1 = cur;
				goto yy361;
			}
			goto yy338;
		}
	}
yy351:
	++cur;
#line 436 "../src/parse/lexer.re"
	{ CHECK_RET(lex_cls(ast, true,  yylval->regexp)); RET_TOK(TOKEN_REGEXP); }
#line 2508 "src/parse/lexer.cc"
yy352:
	yych = *++cur;
	if (yych == '2') goto yy363;
	goto yy332;
yy353:
	++cur;
yy354:
#line 472 "../src/parse/lexer.re"
	{
        RET_FAIL(error_at_tok(
                "illegal closure form, use '{n}', '{n,}', '{n,m}' where n and m are numbers"));
    }
#line 2521 "src/parse/lexer.cc"
yy355:
	++cur;
	if ((lim - cur) < 2) if (!fill(2)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yybm[0+yych] & 64) goto yy355;
	if (yych == ',') {
		yyt1 = cur;
		goto yy364;
	}
	if (yych == '}') goto yy365;
	goto yy338;
yy356:
	++cur;
	if (lim <= cur) if (!fill(1)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yych <= '^') {
		if (yych <= '9') {
			if (yych <= '/') goto yy338;
			goto yy356;
		} else {
			if (yych <= '@') goto yy338;
			if (yych <= 'Z') goto yy356;
			goto yy338;
		}
	} else {
		if (yych <= 'z') {
			if (yych == '`') goto yy338;
			goto yy356;
		} else {
			if (yych == '}') goto yy366;
			goto yy338;
		}
	}
yy357:
	yych = *++cur;
	if (yych == 'i') goto yy367;
	goto yy338;
yy358:
	yych = *++cur;
	if (yych == 't') goto yy368;
	goto yy338;
yy359:
	yych = *++cur;
	if (yych == 'c') goto yy369;
	goto yy338;
yy360:
	yych = *++cur;
	if (yych == 'e') goto yy370;
	goto yy338;
yy361:
	++cur;
	if (lim <= cur) if (!fill(1)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yych <= 'Z') {
		if (yych <= '/') goto yy362;
		if (yych <= '9') goto yy361;
		if (yych >= 'A') goto yy361;
	} else {
		if (yych <= '_') {
			if (yych >= '_') goto yy361;
		} else {
			if (yych <= '`') goto yy362;
			if (yych <= 'z') goto yy361;
		}
	}
yy362:
	p = yyt1;
#line 421 "../src/parse/lexer.re"
	{
        yylval->cstr = ast.cstr_global(p, cur);
        RET_TOK(tok[0] == ':' ? TOKEN_CJUMP : TOKEN_CNEXT);
    }
#line 2594 "src/parse/lexer.cc"
yy363:
	yych = *++cur;
	if (yych == 'c') goto yy372;
	goto yy332;
yy364:
	yyaccept = 4;
	yych = *(mar = ++cur);
	if (yych <= '/') goto yy354;
	if (yych <= '9') goto yy373;
	if (yych == '}') goto yy374;
	goto yy354;
yy365:
	++cur;
#line 445 "../src/parse/lexer.re"
	{
        if (!s_to_u32_unsafe (tok + 1, cur - 1, yylval->bounds.min)) {
            RET_FAIL(error_at_tok("repetition count overflow"));
        }
        yylval->bounds.max = yylval->bounds.min;
        RET_TOK(TOKEN_CLOSESIZE);
    }
#line 2616 "src/parse/lexer.cc"
yy366:
	++cur;
#line 477 "../src/parse/lexer.re"
	{
        if (!globopts->flex_syntax) {
            RET_FAIL(error_at_tok("curly braces for names only allowed with -F switch"));
        }
        yylval->cstr = ast.cstr_local(tok + 1, cur - 1);
        RET_TOK(TOKEN_ID);
    }
#line 2627 "src/parse/lexer.cc"
yy367:
	yych = *++cur;
	if (yych == 'n') goto yy375;
	goto yy338;
yy368:
	yych = *++cur;
	if (yych == 'r') goto yy376;
	goto yy338;
yy369:
	yych = *++cur;
	if (yych == 'l') goto yy377;
	goto yy338;
yy370:
	yyaccept = 5;
	yych = *(mar = ++cur);
	if (yych == ':') goto yy378;
yy371:
#line 534 "../src/parse/lexer.re"
	{
        RET_FAIL(error_at_tok(
                "ill-formed use directive: expected `!use` followed by a colon, a block name,"
                " optional spaces, a semicolon, and finally a space, a newline, or the end of"
                " block"));
    }
#line 2652 "src/parse/lexer.cc"
yy372:
	yych = *++cur;
	if (yych == ':') goto yy379;
	goto yy332;
yy373:
	++cur;
	if (lim <= cur) if (!fill(1)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yych <= '/') goto yy338;
	if (yych <= '9') goto yy373;
	if (yych == '}') goto yy380;
	goto yy338;
yy374:
	++cur;
#line 464 "../src/parse/lexer.re"
	{
        if (!s_to_u32_unsafe (tok + 1, cur - 2, yylval->bounds.min)) {
            RET_FAIL(error_at_tok("repetition lower bound overflow"));
        }
        yylval->bounds.max = std::numeric_limits<uint32_t>::max();
        RET_TOK(TOKEN_CLOSESIZE);
    }
#line 2675 "src/parse/lexer.cc"
yy375:
	yych = *++cur;
	if (yych == 'e') goto yy381;
	goto yy338;
yy376:
	yych = *++cur;
	if (yych == 'y') goto yy382;
	goto yy338;
yy377:
	yych = *++cur;
	if (yych == 'u') goto yy383;
	goto yy338;
yy378:
	yych = *++cur;
	if (yych <= '^') {
		if (yych <= '@') goto yy338;
		if (yych <= 'Z') {
			yyt1 = cur;
			goto yy384;
		}
		goto yy338;
	} else {
		if (yych == '`') goto yy338;
		if (yych <= 'z') {
			yyt1 = cur;
			goto yy384;
		}
		goto yy338;
	}
yy379:
	++cur;
#line 485 "../src/parse/lexer.re"
	{ RET_TOK(TOKEN_CONF); }
#line 2709 "src/parse/lexer.cc"
yy380:
	++cur;
	p = yyt1;
#line 453 "../src/parse/lexer.re"
	{
        if (!s_to_u32_unsafe(tok + 1, p, yylval->bounds.min)) {
            RET_FAIL(error_at_tok("repetition lower bound overflow"));
        } else if (!s_to_u32_unsafe(p + 1, cur - 1, yylval->bounds.max)) {
            RET_FAIL(error_at_tok("repetition upper bound overflow"));
        } else if (yylval->bounds.min > yylval->bounds.max) {
            RET_FAIL(error_at_tok("repetition lower bound exceeds upper bound"));
        }
        RET_TOK(TOKEN_CLOSESIZE);
    }
#line 2724 "src/parse/lexer.cc"
yy381:
	yych = *++cur;
	if (yych <= '0') goto yy386;
	if (yych <= '9') goto yy338;
	goto yy386;
yy382:
	yych = *++cur;
	if (yych <= 0x1F) {
		if (yych <= '\n') {
			if (yych <= 0x08) goto yy338;
			yyt1 = cur;
			goto yy387;
		} else {
			if (yych == '\r') {
				yyt1 = cur;
				goto yy387;
			}
			goto yy338;
		}
	} else {
		if (yych <= '%') {
			if (yych <= ' ') {
				yyt1 = cur;
				goto yy387;
			}
			if (yych <= '$') goto yy338;
			yyt1 = cur;
			goto yy388;
		} else {
			if (yych == '*') {
				yyt1 = cur;
				goto yy389;
			}
			goto yy338;
		}
	}
yy383:
	yych = *++cur;
	if (yych == 'd') goto yy390;
	goto yy338;
yy384:
	++cur;
	if ((lim - cur) < 3) if (!fill(3)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yych <= ':') {
		if (yych <= 0x1F) {
			if (yych == '\t') {
				yyt2 = cur;
				goto yy391;
			}
			goto yy338;
		} else {
			if (yych <= ' ') {
				yyt2 = cur;
				goto yy391;
			}
			if (yych <= '/') goto yy338;
			if (yych <= '9') goto yy384;
			goto yy338;
		}
	} else {
		if (yych <= '^') {
			if (yych <= ';') {
				yyt2 = cur;
				goto yy392;
			}
			if (yych <= '@') goto yy338;
			if (yych <= 'Z') goto yy384;
			goto yy338;
		} else {
			if (yych == '`') goto yy338;
			if (yych <= 'z') goto yy384;
			goto yy338;
		}
	}
yy385:
	++cur;
	if (lim <= cur) if (!fill(1)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
yy386:
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy385;
		goto yy338;
	} else {
		if (yych <= ' ') goto yy385;
		if (yych <= '0') goto yy338;
		if (yych <= '9') {
			yyt1 = cur;
			goto yy393;
		}
		goto yy338;
	}
yy387:
	++cur;
	cur = yyt1;
#line 541 "../src/parse/lexer.re"
	{ RET_TOK(TOKEN_ENTRY); }
#line 2822 "src/parse/lexer.cc"
yy388:
	yych = *++cur;
	if (yych == '}') goto yy387;
	goto yy338;
yy389:
	yych = *++cur;
	if (yych == '/') goto yy387;
	goto yy338;
yy390:
	yych = *++cur;
	if (yych == 'e') goto yy394;
	goto yy338;
yy391:
	++cur;
	if ((lim - cur) < 3) if (!fill(3)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy391;
		goto yy338;
	} else {
		if (yych <= ' ') goto yy391;
		if (yych != ';') goto yy338;
	}
yy392:
	yych = *++cur;
	if (yych <= 0x1F) {
		if (yych <= '\n') {
			if (yych <= 0x08) goto yy338;
			yyt3 = cur;
			goto yy396;
		} else {
			if (yych == '\r') {
				yyt3 = cur;
				goto yy396;
			}
			goto yy338;
		}
	} else {
		if (yych <= '%') {
			if (yych <= ' ') {
				yyt3 = cur;
				goto yy396;
			}
			if (yych <= '$') goto yy338;
			yyt3 = cur;
			goto yy397;
		} else {
			if (yych == '*') {
				yyt3 = cur;
				goto yy398;
			}
			goto yy338;
		}
	}
yy393:
	++cur;
	if ((lim - cur) < 2) if (!fill(2)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yych <= '\r') {
		if (yych <= '\t') {
			if (yych <= 0x08) goto yy338;
			goto yy399;
		} else {
			if (yych <= '\n') goto yy400;
			if (yych <= '\f') goto yy338;
			goto yy401;
		}
	} else {
		if (yych <= ' ') {
			if (yych <= 0x1F) goto yy338;
			goto yy399;
		} else {
			if (yych <= '/') goto yy338;
			if (yych <= '9') goto yy393;
			goto yy338;
		}
	}
yy394:
	yyaccept = 6;
	yych = *(mar = ++cur);
	if (yych == '\t') goto yy402;
	if (yych == ' ') goto yy402;
yy395:
#line 521 "../src/parse/lexer.re"
	{
        RET_FAIL(error_at_tok(
                "ill-formed include directive: expected `!include` followed by spaces, a"
                " double-quoted file path, optional spaces, a semicolon, and finally a space, a"
                " newline, or the end of block"));
    }
#line 2913 "src/parse/lexer.cc"
yy396:
	++cur;
	x = yyt1;
	y = yyt2;
	cur = yyt3;
#line 528 "../src/parse/lexer.re"
	{
        // Save the name of the used block in a temporary buffer (ensure it is empty).
        CHECK(ast.temp_blockname.empty());
        ast.temp_blockname.assign(x, y);
        RET_TOK(TOKEN_BLOCK);
    }
#line 2926 "src/parse/lexer.cc"
yy397:
	yych = *++cur;
	if (yych == '}') goto yy396;
	goto yy338;
yy398:
	yych = *++cur;
	if (yych == '/') goto yy396;
	goto yy338;
yy399:
	++cur;
	if (lim <= cur) if (!fill(1)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy399;
		goto yy338;
	} else {
		if (yych <= ' ') goto yy399;
		if (yych == '"') goto yy403;
		goto yy338;
	}
yy400:
	++cur;
	cur = yyt1;
#line 547 "../src/parse/lexer.re"
	{ CHECK_RET(set_sourceline()); RET_TOK(TOKEN_LINE_INFO); }
#line 2952 "src/parse/lexer.cc"
yy401:
	yych = *++cur;
	if (yych == '\n') goto yy400;
	goto yy338;
yy402:
	++cur;
	if (lim <= cur) if (!fill(1)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy402;
		goto yy338;
	} else {
		if (yych <= ' ') goto yy402;
		if (yych == '"') {
			yyt1 = cur;
			goto yy404;
		}
		goto yy338;
	}
yy403:
	++cur;
	if ((lim - cur) < 3) if (!fill(3)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yybm[0+yych] & 128) goto yy403;
	if (yych <= '\n') goto yy338;
	if (yych <= '"') goto yy405;
	goto yy406;
yy404:
	++cur;
	if ((lim - cur) < 4) if (!fill(4)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yych <= '!') {
		if (yych <= 0x00) goto yy338;
		if (yych == '\n') goto yy338;
		goto yy404;
	} else {
		if (yych <= '"') goto yy407;
		if (yych == '\\') goto yy408;
		goto yy404;
	}
yy405:
	yych = *++cur;
	if (yych == '\n') goto yy400;
	if (yych == '\r') goto yy401;
	goto yy338;
yy406:
	++cur;
	if (lim <= cur) if (!fill(1)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yych <= 0x00) goto yy338;
	if (yych == '\n') goto yy338;
	goto yy403;
yy407:
	yych = *++cur;
	if (yych <= 0x1F) {
		if (yych == '\t') {
			yyt2 = cur;
			goto yy409;
		}
		goto yy338;
	} else {
		if (yych <= ' ') {
			yyt2 = cur;
			goto yy409;
		}
		if (yych == ';') {
			yyt2 = cur;
			goto yy410;
		}
		goto yy338;
	}
yy408:
	++cur;
	if (lim <= cur) if (!fill(1)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yych <= 0x00) goto yy338;
	if (yych == '\n') goto yy338;
	goto yy404;
yy409:
	++cur;
	if ((lim - cur) < 3) if (!fill(3)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy409;
		goto yy338;
	} else {
		if (yych <= ' ') goto yy409;
		if (yych != ';') goto yy338;
	}
yy410:
	yych = *++cur;
	if (yych <= 0x1F) {
		if (yych <= '\n') {
			if (yych <= 0x08) goto yy338;
			yyt3 = cur;
		} else {
			if (yych != '\r') goto yy338;
			yyt3 = cur;
		}
	} else {
		if (yych <= '%') {
			if (yych <= ' ') {
				yyt3 = cur;
				goto yy411;
			}
			if (yych <= '$') goto yy338;
			yyt3 = cur;
			goto yy412;
		} else {
			if (yych == '*') {
				yyt3 = cur;
				goto yy413;
			}
			goto yy338;
		}
	}
yy411:
	++cur;
	x = yyt1;
	y = yyt2;
	cur = yyt3;
#line 517 "../src/parse/lexer.re"
	{
        CHECK_RET(include(getstr(x + 1, y - 1), tok));
        goto scan;
    }
#line 3079 "src/parse/lexer.cc"
yy412:
	yych = *++cur;
	if (yych == '}') goto yy411;
	goto yy338;
yy413:
	yych = *++cur;
	if (yych == '/') goto yy411;
	goto yy338;
}
#line 571 "../src/parse/lexer.re"

}

#undef RET_TOK

Ret Input::lex_namedef_context_re2c(bool& yes) {

#line 3097 "src/parse/lexer.cc"
{
	uint8_t yych;
	static const unsigned char yybm[256] = {
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0, 128,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		128,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0
	};
	if ((lim - cur) < 2) if (!fill(2)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *(mar = cur);
	if (yych <= 0x1F) {
		if (yych == '\t') {
			yyt1 = cur;
			goto yy416;
		}
	} else {
		if (yych <= ' ') {
			yyt1 = cur;
			goto yy416;
		}
		if (yych == '=') {
			yyt1 = cur;
			goto yy418;
		}
	}
yy415:
#line 579 "../src/parse/lexer.re"
	{ yes = false; return Ret::OK; }
#line 3154 "src/parse/lexer.cc"
yy416:
	++cur;
	if ((lim - cur) < 2) if (!fill(2)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yybm[0+yych] & 128) goto yy416;
	if (yych == '=') goto yy418;
yy417:
	cur = mar;
	goto yy415;
yy418:
	yych = *++cur;
	if (yych == '>') goto yy417;
	++cur;
	cur = yyt1;
#line 578 "../src/parse/lexer.re"
	{ yes = true;  return Ret::OK; }
#line 3171 "src/parse/lexer.cc"
}
#line 580 "../src/parse/lexer.re"

}

Ret Input::lex_namedef_context_flex(bool& yes) {

#line 3179 "src/parse/lexer.cc"
{
	uint8_t yych;
	static const unsigned char yybm[256] = {
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0, 128,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		128,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0
	};
	if (lim <= cur) if (!fill(1)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yych == '\t') {
		yyt1 = cur;
		goto yy420;
	}
	if (yych == ' ') {
		yyt1 = cur;
		goto yy420;
	}
#line 587 "../src/parse/lexer.re"
	{ yes = false; return Ret::OK; }
#line 3228 "src/parse/lexer.cc"
yy420:
	++cur;
	if (lim <= cur) if (!fill(1)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yybm[0+yych] & 128) goto yy420;
	if (yych <= '<') {
		if (yych == ':') goto yy421;
	} else {
		if (yych <= '=') goto yy421;
		if (yych == '{') goto yy421;
	}
	cur = yyt1;
#line 586 "../src/parse/lexer.re"
	{ yes = true;  return Ret::OK; }
#line 3243 "src/parse/lexer.cc"
yy421:
	++cur;
	cur = yyt1;
#line 585 "../src/parse/lexer.re"
	{ yes = false; return Ret::OK; }
#line 3249 "src/parse/lexer.cc"
}
#line 588 "../src/parse/lexer.re"

}

Ret Input::lex_clist(Ast& ast, int& token) {
    token = TOKEN_CLIST;
    std::set<std::string>& cl = ast.temp_condlist;
    // Due to the re2c grammar parser must reduce each condition list before shifing a new one.
    CHECK(cl.empty());

#line 3261 "src/parse/lexer.cc"
{
	uint8_t yych;
	static const unsigned char yybm[256] = {
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0, 128,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		128,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0
	};
	goto yy422;
yy423:
	++cur;
yy422:
	if (lim <= cur) if (!fill(1)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yybm[0+yych] & 128) goto yy423;
	if (yych <= 0x1F) goto yy424;
	if (yych <= '!') goto yy425;
	if (yych == '>') goto yy426;
yy424:
#line 599 "../src/parse/lexer.re"
	{ goto cond; }
#line 3311 "src/parse/lexer.cc"
yy425:
	++cur;
	if (lim <= cur) if (!fill(1)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yych == '\t') goto yy425;
	if (yych == ' ') goto yy425;
#line 597 "../src/parse/lexer.re"
	{ token = TOKEN_CEXIT; goto cond; }
#line 3320 "src/parse/lexer.cc"
yy426:
	++cur;
#line 598 "../src/parse/lexer.re"
	{ token = TOKEN_CZERO; goto end; }
#line 3325 "src/parse/lexer.cc"
}
#line 600 "../src/parse/lexer.re"

cond:
    tok = cur;

#line 3332 "src/parse/lexer.cc"
{
	uint8_t yych;
	static const unsigned char yybm[256] = {
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		128, 128, 128, 128, 128, 128, 128, 128,
		128, 128,   0,   0,   0,   0,   0,   0,
		  0, 128, 128, 128, 128, 128, 128, 128,
		128, 128, 128, 128, 128, 128, 128, 128,
		128, 128, 128, 128, 128, 128, 128, 128,
		128, 128, 128,   0,   0,   0,   0, 128,
		  0, 128, 128, 128, 128, 128, 128, 128,
		128, 128, 128, 128, 128, 128, 128, 128,
		128, 128, 128, 128, 128, 128, 128, 128,
		128, 128, 128,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0
	};
	if (lim <= cur) if (!fill(1)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yych <= 'Z') {
		if (yych == '*') goto yy429;
		if (yych >= 'A') goto yy430;
	} else {
		if (yych <= '_') {
			if (yych >= '_') goto yy430;
		} else {
			if (yych <= '`') goto yy428;
			if (yych <= 'z') goto yy430;
		}
	}
yy428:
	++cur;
#line 606 "../src/parse/lexer.re"
	{ goto error; }
#line 3386 "src/parse/lexer.cc"
yy429:
	++cur;
#line 605 "../src/parse/lexer.re"
	{ if (!cl.empty()) goto error; cl.insert("*"); goto next; }
#line 3391 "src/parse/lexer.cc"
yy430:
	++cur;
	if (lim <= cur) if (!fill(1)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yybm[0+yych] & 128) goto yy430;
#line 604 "../src/parse/lexer.re"
	{ cl.insert(getstr(tok, cur)); goto next; }
#line 3399 "src/parse/lexer.cc"
}
#line 607 "../src/parse/lexer.re"

next: 
#line 3404 "src/parse/lexer.cc"
{
	uint8_t yych;
	static const unsigned char yybm[256] = {
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0, 128,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		128,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0
	};
	if ((lim - cur) < 2) if (!fill(2)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yych <= ' ') {
		if (yych == '\t') goto yy433;
		if (yych >= ' ') goto yy433;
	} else {
		if (yych <= ',') {
			if (yych >= ',') goto yy434;
		} else {
			if (yych == '>') goto yy435;
		}
	}
	++cur;
yy432:
#line 611 "../src/parse/lexer.re"
	{ goto error; }
#line 3457 "src/parse/lexer.cc"
yy433:
	yych = *(mar = ++cur);
	if (yych <= ' ') {
		if (yych == '\t') goto yy436;
		if (yych <= 0x1F) goto yy432;
		goto yy436;
	} else {
		if (yych <= ',') {
			if (yych <= '+') goto yy432;
		} else {
			if (yych == '>') goto yy435;
			goto yy432;
		}
	}
yy434:
	++cur;
	if (lim <= cur) if (!fill(1)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yybm[0+yych] & 128) goto yy434;
#line 609 "../src/parse/lexer.re"
	{ goto cond; }
#line 3479 "src/parse/lexer.cc"
yy435:
	++cur;
#line 610 "../src/parse/lexer.re"
	{ goto end; }
#line 3484 "src/parse/lexer.cc"
yy436:
	++cur;
	if (lim <= cur) if (!fill(1)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yych <= ' ') {
		if (yych == '\t') goto yy436;
		if (yych >= ' ') goto yy436;
	} else {
		if (yych <= ',') {
			if (yych >= ',') goto yy434;
		} else {
			if (yych == '>') goto yy435;
		}
	}
	cur = mar;
	goto yy432;
}
#line 612 "../src/parse/lexer.re"

end:
    // semantic value `yylval` is implicitly passed in temporary condition list
    return Ret::OK;
error:
    cl.clear();
    RET_FAIL(error_at_cur("syntax error in condition list"));
}

Ret Input::process_semact(RE2C_STYPE* yylval, Ast& ast, const uint8_t* p, const uint8_t* q) {
    const char* text = "";
    if (globopts->indentation_sensitive) {
        // Cut off any leading or trailing newlines to make the code uniform.
        while (p <= q && *p == '\n') ++p;
        while (p <= q && *q == '\n') --q;

        if (p <= q) {
            // Split semantic action by newlines (note: last character `*q` is not a newline).
            // Drop blank lines (this simplifies the code below that removes indentation).
            auto is_blank = [](const uint8_t* s, const uint8_t* e) {
                while (s < e && is_space(*s)) ++s;
                return s == e;
            };
            tmp_list.clear();
            for (const uint8_t* s = p; s < q; ++s) {
                if (*s == '\n') {
                    if (!is_blank(p, s)) tmp_list.push_back(std::string(p, s + 1));
                    p = s + 1;
                }
            }
            if (!is_blank(p, q + 1)) tmp_list.push_back(std::string(p, q + 1) + "\n");

            if (!tmp_list.empty()) {
                // Find first line indentation and use it as base indentation.
                const std::string& first = tmp_list[0];
                uint32_t indent = 0;
                while (is_space_nonl(static_cast<uint8_t>(first[indent]))) ++indent;
                std::string indstr = first.substr(0, indent);

                // Cut off base indentation from every line and glue them together.
                tmp_str.clear();
                for (std::string& line: tmp_list) {
                    if (line.compare(0, indent, indstr) == 0) {
                        tmp_str += line.substr(indent, std::string::npos); // remove indent
                    } else {
                        RET_FAIL(error_at_tok("inconsistent indentation in semantic action"));
                    }
                }
                text = copystr(tmp_str, alc);
            }
        }
    } else {
        // copy the entire semantic action verbatim
        text = ast.cstr_global(p, q + 1);
    }

    yylval->semact = ast.sem_act(tok_loc(), text, nullptr, false);
    return Ret::OK;
}

Ret Input::lex_code_indented(RE2C_STYPE* yylval, Ast& ast) {
    tok = cur;
code: 
#line 3566 "src/parse/lexer.cc"
{
	uint8_t yych;
	if ((lim - cur) < 2) if (!fill(2)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yych <= '\'') {
		if (yych <= '\r') {
			if (yych == '\n') goto yy439;
			if (yych >= '\r') goto yy440;
		} else {
			if (yych == '"') goto yy441;
			if (yych >= '\'') goto yy441;
		}
	} else {
		if (yych <= '`') {
			if (yych == '/') goto yy442;
			if (yych >= '`') goto yy441;
		} else {
			if (yych <= '{') {
				if (yych >= '{') goto yy443;
			} else {
				if (yych == '}') goto yy443;
			}
		}
	}
	++cur;
yy438:
#line 680 "../src/parse/lexer.re"
	{ goto code; }
#line 3595 "src/parse/lexer.cc"
yy439:
	++cur;
#line 675 "../src/parse/lexer.re"
	{ next_line(); goto indent; }
#line 3600 "src/parse/lexer.cc"
yy440:
	yych = *++cur;
	if (yych == '\n') goto yy439;
	goto yy438;
yy441:
	++cur;
#line 678 "../src/parse/lexer.re"
	{ CHECK_RET(try_lex_literal_in_code(cur[-1])); goto code; }
#line 3609 "src/parse/lexer.cc"
yy442:
	yych = *++cur;
	if (yych == '*') goto yy444;
	if (yych == '/') goto yy445;
	goto yy438;
yy443:
	++cur;
#line 679 "../src/parse/lexer.re"
	{ RET_FAIL(error_at_cur("Curly braces are not allowed after ':='")); }
#line 3619 "src/parse/lexer.cc"
yy444:
	++cur;
#line 677 "../src/parse/lexer.re"
	{ CHECK_RET(lex_c_comment()); goto code; }
#line 3624 "src/parse/lexer.cc"
yy445:
	++cur;
#line 676 "../src/parse/lexer.re"
	{ CHECK_RET(lex_cpp_comment()); goto indent; }
#line 3629 "src/parse/lexer.cc"
}
#line 681 "../src/parse/lexer.re"

indent: 
#line 3634 "src/parse/lexer.cc"
{
	uint8_t yych;
	if (lim <= cur) if (!fill(1)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yych <= '\f') {
		if (yych <= 0x08) goto yy447;
		if (yych <= '\n') goto yy448;
	} else {
		if (yych <= '\r') goto yy448;
		if (yych == ' ') goto yy448;
	}
yy447:
#line 684 "../src/parse/lexer.re"
	{
        const uint8_t* p = tok, *q = cur - 1;
        if (!globopts->indentation_sensitive) {
            while (p <= q && is_space(*p)) ++p;
            while (p <= q && is_space(*q)) --q;
        }
        return process_semact(yylval, ast, p, q);
    }
#line 3656 "src/parse/lexer.cc"
yy448:
	++cur;
	cur -= 1;
#line 683 "../src/parse/lexer.re"
	{ goto code; }
#line 3662 "src/parse/lexer.cc"
}
#line 692 "../src/parse/lexer.re"

}

Ret Input::lex_code_in_braces(RE2C_STYPE* yylval, Ast& ast) {
    uint32_t depth = 1;
code: 
#line 3671 "src/parse/lexer.cc"
{
	uint8_t yych;
	static const unsigned char yybm[256] = {
		  0, 128, 128, 128, 128, 128, 128, 128,
		128, 160,   0, 128, 128, 128, 128, 128,
		128, 128, 128, 128, 128, 128, 128, 128,
		128, 128, 128, 128, 128, 128, 128, 128,
		160, 128,   0, 128, 128, 128, 128, 128,
		128, 128, 128, 128, 128, 128, 128, 128,
		192, 192, 192, 192, 192, 192, 192, 192,
		192, 192, 128, 128, 128, 128, 128, 128,
		128, 128, 128, 128, 128, 128, 128, 128,
		128, 128, 128, 128, 128, 128, 128, 128,
		128, 128, 128, 128, 128, 128, 128, 128,
		128, 128, 128, 128,   0, 128, 128, 128,
		128, 128, 128, 128, 128, 128, 128, 128,
		128, 128, 128, 128, 128, 128, 128, 128,
		128, 128, 128, 128, 128, 128, 128, 128,
		128, 128, 128, 128, 128, 128, 128, 128,
		128, 128, 128, 128, 128, 128, 128, 128,
		128, 128, 128, 128, 128, 128, 128, 128,
		128, 128, 128, 128, 128, 128, 128, 128,
		128, 128, 128, 128, 128, 128, 128, 128,
		128, 128, 128, 128, 128, 128, 128, 128,
		128, 128, 128, 128, 128, 128, 128, 128,
		128, 128, 128, 128, 128, 128, 128, 128,
		128, 128, 128, 128, 128, 128, 128, 128,
		128, 128, 128, 128, 128, 128, 128, 128,
		128, 128, 128, 128, 128, 128, 128, 128,
		128, 128, 128, 128, 128, 128, 128, 128,
		128, 128, 128, 128, 128, 128, 128, 128,
		128, 128, 128, 128, 128, 128, 128, 128,
		128, 128, 128, 128, 128, 128, 128, 128,
		128, 128, 128, 128, 128, 128, 128, 128,
		128, 128, 128, 128, 128, 128, 128, 128
	};
	if ((lim - cur) < 3) if (!fill(3)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yych <= '\'') {
		if (yych <= '\r') {
			if (yych == '\n') goto yy451;
			if (yych >= '\r') goto yy453;
		} else {
			if (yych == '"') goto yy454;
			if (yych >= '\'') goto yy454;
		}
	} else {
		if (yych <= '`') {
			if (yych == '/') goto yy455;
			if (yych >= '`') goto yy454;
		} else {
			if (yych <= '{') {
				if (yych >= '{') goto yy456;
			} else {
				if (yych == '}') goto yy457;
			}
		}
	}
	++cur;
yy450:
#line 719 "../src/parse/lexer.re"
	{ goto code; }
#line 3734 "src/parse/lexer.cc"
yy451:
	yych = *(mar = ++cur);
	if (yybm[0+yych] & 32) goto yy458;
	if (yych == '#') goto yy460;
yy452:
#line 715 "../src/parse/lexer.re"
	{ next_line(); goto code; }
#line 3742 "src/parse/lexer.cc"
yy453:
	yych = *++cur;
	if (yych == '\n') goto yy451;
	goto yy450;
yy454:
	++cur;
#line 718 "../src/parse/lexer.re"
	{ CHECK_RET(try_lex_literal_in_code(cur[-1])); goto code; }
#line 3751 "src/parse/lexer.cc"
yy455:
	yych = *++cur;
	if (yych == '*') goto yy461;
	if (yych == '/') goto yy462;
	goto yy450;
yy456:
	++cur;
#line 713 "../src/parse/lexer.re"
	{ ++depth; goto code; }
#line 3761 "src/parse/lexer.cc"
yy457:
	++cur;
#line 698 "../src/parse/lexer.re"
	{
        --depth;
        if (depth > 0) goto code;

        const uint8_t* p = tok, *q = cur - 1;
        if (globopts->code_model == CodeModel::REC_FUNC || !globopts->wrap_blocks_in_braces) {
            // Strip curly braces and adjacent whitespace. In rec/func mode it is always safe
            // to do, as the code is in a separate function and won't cause name collisions.
            ++p; --q; // skip '{' and '}'
            while (p <= q && is_space_nonl(*p)) ++p;
            while (p <= q && is_space_nonl(*q)) --q;
        }
        return process_semact(yylval, ast, p, q);
    }
#line 3779 "src/parse/lexer.cc"
yy458:
	++cur;
	if (lim <= cur) if (!fill(1)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yybm[0+yych] & 32) goto yy458;
	if (yych == '#') goto yy460;
yy459:
	cur = mar;
	goto yy452;
yy460:
	++cur;
	if ((lim - cur) < 5) if (!fill(5)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy460;
		goto yy459;
	} else {
		if (yych <= ' ') goto yy460;
		if (yych == 'l') goto yy463;
		goto yy459;
	}
yy461:
	++cur;
#line 716 "../src/parse/lexer.re"
	{ CHECK_RET(lex_c_comment()); goto code; }
#line 3805 "src/parse/lexer.cc"
yy462:
	++cur;
#line 717 "../src/parse/lexer.re"
	{ CHECK_RET(lex_cpp_comment()); goto code; }
#line 3810 "src/parse/lexer.cc"
yy463:
	yych = *++cur;
	if (yych != 'i') goto yy459;
	yych = *++cur;
	if (yych != 'n') goto yy459;
	yych = *++cur;
	if (yych != 'e') goto yy459;
	yych = *++cur;
	if (yych <= '0') goto yy465;
	if (yych <= '9') goto yy459;
	goto yy465;
yy464:
	++cur;
	if (lim <= cur) if (!fill(1)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
yy465:
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy464;
		goto yy459;
	} else {
		if (yych <= ' ') goto yy464;
		if (yych <= '0') goto yy459;
		if (yych >= ':') goto yy459;
		yyt1 = cur;
	}
yy466:
	++cur;
	if ((lim - cur) < 2) if (!fill(2)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yybm[0+yych] & 64) goto yy466;
	if (yych <= '\f') {
		if (yych <= 0x08) goto yy459;
		if (yych <= '\t') goto yy467;
		if (yych <= '\n') goto yy468;
		goto yy459;
	} else {
		if (yych <= '\r') goto yy469;
		if (yych != ' ') goto yy459;
	}
yy467:
	++cur;
	if (lim <= cur) if (!fill(1)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy467;
		goto yy459;
	} else {
		if (yych <= ' ') goto yy467;
		if (yych == '"') goto yy470;
		goto yy459;
	}
yy468:
	++cur;
	cur = yyt1;
#line 714 "../src/parse/lexer.re"
	{ CHECK_RET(set_sourceline()); goto code; }
#line 3867 "src/parse/lexer.cc"
yy469:
	yych = *++cur;
	if (yych == '\n') goto yy468;
	goto yy459;
yy470:
	++cur;
	if ((lim - cur) < 3) if (!fill(3)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yybm[0+yych] & 128) goto yy470;
	if (yych <= '\n') goto yy459;
	if (yych >= '#') goto yy471;
	yych = *++cur;
	if (yych == '\n') goto yy468;
	if (yych == '\r') goto yy469;
	goto yy459;
yy471:
	++cur;
	if (lim <= cur) if (!fill(1)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yych <= 0x00) goto yy459;
	if (yych == '\n') goto yy459;
	goto yy470;
}
#line 720 "../src/parse/lexer.re"

}

Ret Input::lex_dqstring_in_code() {
loop: 
#line 3897 "src/parse/lexer.cc"
{
	uint8_t yych;
	if ((lim - cur) < 2) if (!fill(2)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yych <= '\r') {
		if (yych == '\n') goto yy474;
		if (yych >= '\r') goto yy475;
	} else {
		if (yych <= '"') {
			if (yych >= '"') goto yy476;
		} else {
			if (yych == '\\') goto yy477;
		}
	}
	++cur;
yy473:
#line 728 "../src/parse/lexer.re"
	{ goto loop; }
#line 3916 "src/parse/lexer.cc"
yy474:
	++cur;
#line 727 "../src/parse/lexer.re"
	{ next_line(); goto loop; }
#line 3921 "src/parse/lexer.cc"
yy475:
	yych = *++cur;
	if (yych == '\n') goto yy474;
	goto yy473;
yy476:
	++cur;
#line 725 "../src/parse/lexer.re"
	{ return Ret::OK; }
#line 3930 "src/parse/lexer.cc"
yy477:
	yych = *++cur;
	if (yych == '"') goto yy478;
	if (yych != '\\') goto yy473;
yy478:
	++cur;
#line 726 "../src/parse/lexer.re"
	{ goto loop; }
#line 3939 "src/parse/lexer.cc"
}
#line 729 "../src/parse/lexer.re"

}

Ret Input::lex_sqstring_in_code() {
loop: 
#line 3947 "src/parse/lexer.cc"
{
	uint8_t yych;
	if ((lim - cur) < 2) if (!fill(2)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yych <= '\r') {
		if (yych == '\n') goto yy481;
		if (yych >= '\r') goto yy482;
	} else {
		if (yych <= '\'') {
			if (yych >= '\'') goto yy483;
		} else {
			if (yych == '\\') goto yy484;
		}
	}
	++cur;
yy480:
#line 737 "../src/parse/lexer.re"
	{ goto loop; }
#line 3966 "src/parse/lexer.cc"
yy481:
	++cur;
#line 736 "../src/parse/lexer.re"
	{ next_line(); goto loop; }
#line 3971 "src/parse/lexer.cc"
yy482:
	yych = *++cur;
	if (yych == '\n') goto yy481;
	goto yy480;
yy483:
	++cur;
#line 734 "../src/parse/lexer.re"
	{ return Ret::OK; }
#line 3980 "src/parse/lexer.cc"
yy484:
	yych = *++cur;
	if (yych == '\'') goto yy485;
	if (yych != '\\') goto yy480;
yy485:
	++cur;
#line 735 "../src/parse/lexer.re"
	{ goto loop; }
#line 3989 "src/parse/lexer.cc"
}
#line 738 "../src/parse/lexer.re"

}

Ret Input::lex_bqstring_in_code() {
loop: 
#line 3997 "src/parse/lexer.cc"
{
	uint8_t yych;
	if ((lim - cur) < 2) if (!fill(2)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yych <= '\f') {
		if (yych == '\n') goto yy488;
	} else {
		if (yych <= '\r') goto yy489;
		if (yych == '`') goto yy490;
	}
	++cur;
yy487:
#line 745 "../src/parse/lexer.re"
	{ goto loop; }
#line 4012 "src/parse/lexer.cc"
yy488:
	++cur;
#line 744 "../src/parse/lexer.re"
	{ next_line(); goto loop; }
#line 4017 "src/parse/lexer.cc"
yy489:
	yych = *++cur;
	if (yych == '\n') goto yy488;
	goto yy487;
yy490:
	++cur;
#line 743 "../src/parse/lexer.re"
	{ return Ret::OK; }
#line 4026 "src/parse/lexer.cc"
}
#line 746 "../src/parse/lexer.re"

}

// Generalized rule for char literals (covering various languages).
///
// Char literals may contain closing curly brace, e.g. '}'. We must lex all possible forms of
// char literals, otherwise we might erroneously lex closing single quote as the beginning of
// another literal and overlook a real closing brace (e.g. in 'a'}'b' we might recognize '}'
// as a literal).
//
#line 767 "../src/parse/lexer.re"


Ret Input::lex_sqchar_or_standalone_in_code() {

#line 4044 "src/parse/lexer.cc"
{
	uint8_t yych;
	static const unsigned char yybm[256] = {
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		192, 192, 192, 192, 192, 192, 192, 192,
		128, 128,   0,   0,   0,   0,   0,   0,
		  0, 128, 128, 128, 128, 128, 128,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0, 128, 128, 128, 128, 128, 128,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0
	};
	if ((lim - cur) < 11) if (!fill(11)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *(mar = cur);
	if (yych <= 0xDF) {
		if (yych <= '\\') {
			if (yych <= '[') goto yy493;
			goto yy495;
		} else {
			if (yych <= 0x7F) goto yy493;
			if (yych >= 0xC2) goto yy496;
		}
	} else {
		if (yych <= 0xF0) {
			if (yych <= 0xE0) goto yy497;
			if (yych <= 0xEF) goto yy498;
			goto yy499;
		} else {
			if (yych <= 0xF3) goto yy500;
			if (yych <= 0xF4) goto yy501;
		}
	}
yy492:
#line 773 "../src/parse/lexer.re"
	{ return Ret::OK; }
#line 4104 "src/parse/lexer.cc"
yy493:
	yych = *++cur;
	if (yych == '\'') goto yy502;
yy494:
	cur = mar;
	goto yy492;
yy495:
	yych = *++cur;
	if (yych <= 'b') {
		if (yych <= '>') {
			if (yych <= '/') {
				if (yych == '\'') goto yy504;
				goto yy494;
			} else {
				if (yych <= '0') goto yy505;
				if (yych <= '7') goto yy506;
				goto yy494;
			}
		} else {
			if (yych <= 'U') {
				if (yych <= '?') goto yy493;
				if (yych <= 'T') goto yy494;
				goto yy507;
			} else {
				if (yych == '\\') goto yy493;
				if (yych <= '`') goto yy494;
				goto yy493;
			}
		}
	} else {
		if (yych <= 'r') {
			if (yych <= 'm') {
				if (yych == 'f') goto yy493;
				goto yy494;
			} else {
				if (yych <= 'n') goto yy493;
				if (yych <= 'o') goto yy508;
				if (yych <= 'q') goto yy494;
				goto yy493;
			}
		} else {
			if (yych <= 'u') {
				if (yych <= 's') goto yy494;
				if (yych <= 't') goto yy493;
				goto yy509;
			} else {
				if (yych <= 'v') goto yy493;
				if (yych == 'x') goto yy510;
				goto yy494;
			}
		}
	}
yy496:
	yych = *++cur;
	if (yych <= 0x7F) goto yy494;
	if (yych <= 0xBF) goto yy493;
	goto yy494;
yy497:
	yych = *++cur;
	if (yych <= 0x9F) goto yy494;
	if (yych <= 0xBF) goto yy496;
	goto yy494;
yy498:
	yych = *++cur;
	if (yych <= 0x7F) goto yy494;
	if (yych <= 0xBF) goto yy496;
	goto yy494;
yy499:
	yych = *++cur;
	if (yych <= 0x8F) goto yy494;
	if (yych <= 0xBF) goto yy498;
	goto yy494;
yy500:
	yych = *++cur;
	if (yych <= 0x7F) goto yy494;
	if (yych <= 0xBF) goto yy498;
	goto yy494;
yy501:
	yych = *++cur;
	if (yych <= 0x7F) goto yy494;
	if (yych <= 0x8F) goto yy498;
	goto yy494;
yy502:
	++cur;
yy503:
#line 772 "../src/parse/lexer.re"
	{ return Ret::OK; }
#line 4192 "src/parse/lexer.cc"
yy504:
	yych = *++cur;
	if (yych == '\'') goto yy502;
	goto yy503;
yy505:
	yych = *++cur;
	if (yych == '\'') goto yy502;
	if (yych <= '/') goto yy494;
	if (yych <= '7') goto yy511;
	goto yy494;
yy506:
	yych = *++cur;
	if (yych <= '/') goto yy494;
	if (yych <= '7') goto yy511;
	goto yy494;
yy507:
	yych = *++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy494;
		if (yych <= '9') goto yy512;
		goto yy494;
	} else {
		if (yych <= 'F') goto yy512;
		if (yych <= '`') goto yy494;
		if (yych <= 'f') goto yy512;
		goto yy494;
	}
yy508:
	yych = *++cur;
	if (yych == '{') goto yy513;
	goto yy494;
yy509:
	yych = *++cur;
	if (yych <= 'F') {
		if (yych <= '/') goto yy494;
		if (yych <= '9') goto yy514;
		if (yych <= '@') goto yy494;
		goto yy514;
	} else {
		if (yych <= 'f') {
			if (yych <= '`') goto yy494;
			goto yy514;
		} else {
			if (yych == '{') goto yy515;
			goto yy494;
		}
	}
yy510:
	yych = *++cur;
	if (yych <= 'F') {
		if (yych <= '/') goto yy494;
		if (yych <= '9') goto yy516;
		if (yych <= '@') goto yy494;
		goto yy516;
	} else {
		if (yych <= 'f') {
			if (yych <= '`') goto yy494;
			goto yy516;
		} else {
			if (yych == '{') goto yy515;
			goto yy494;
		}
	}
yy511:
	yych = *++cur;
	if (yych <= '/') goto yy494;
	if (yych <= '7') goto yy493;
	goto yy494;
yy512:
	yych = *++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy494;
		if (yych <= '9') goto yy517;
		goto yy494;
	} else {
		if (yych <= 'F') goto yy517;
		if (yych <= '`') goto yy494;
		if (yych <= 'f') goto yy517;
		goto yy494;
	}
yy513:
	yych = *++cur;
	if (yybm[0+yych] & 64) goto yy518;
	goto yy494;
yy514:
	yych = *++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy494;
		if (yych <= '9') goto yy519;
		goto yy494;
	} else {
		if (yych <= 'F') goto yy519;
		if (yych <= '`') goto yy494;
		if (yych <= 'f') goto yy519;
		goto yy494;
	}
yy515:
	yych = *++cur;
	if (yych == '}') goto yy494;
	goto yy521;
yy516:
	yych = *++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy494;
		if (yych <= '9') goto yy493;
		goto yy494;
	} else {
		if (yych <= 'F') goto yy493;
		if (yych <= '`') goto yy494;
		if (yych <= 'f') goto yy493;
		goto yy494;
	}
yy517:
	yych = *++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy494;
		if (yych <= '9') goto yy522;
		goto yy494;
	} else {
		if (yych <= 'F') goto yy522;
		if (yych <= '`') goto yy494;
		if (yych <= 'f') goto yy522;
		goto yy494;
	}
yy518:
	++cur;
	if ((lim - cur) < 2) if (!fill(2)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yybm[0+yych] & 64) goto yy518;
	if (yych == '}') goto yy493;
	goto yy494;
yy519:
	yych = *++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy494;
		if (yych <= '9') goto yy516;
		goto yy494;
	} else {
		if (yych <= 'F') goto yy516;
		if (yych <= '`') goto yy494;
		if (yych <= 'f') goto yy516;
		goto yy494;
	}
yy520:
	++cur;
	if ((lim - cur) < 2) if (!fill(2)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
yy521:
	if (yybm[0+yych] & 128) goto yy520;
	if (yych == '}') goto yy493;
	goto yy494;
yy522:
	yych = *++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy494;
		if (yych >= ':') goto yy494;
	} else {
		if (yych <= 'F') goto yy523;
		if (yych <= '`') goto yy494;
		if (yych >= 'g') goto yy494;
	}
yy523:
	yych = *++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy494;
		if (yych <= '9') goto yy514;
		goto yy494;
	} else {
		if (yych <= 'F') goto yy514;
		if (yych <= '`') goto yy494;
		if (yych <= 'f') goto yy514;
		goto yy494;
	}
}
#line 774 "../src/parse/lexer.re"

}

Ret Input::lex_bqchar_or_standalone_in_code() {

#line 4373 "src/parse/lexer.cc"
{
	uint8_t yych;
	static const unsigned char yybm[256] = {
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		192, 192, 192, 192, 192, 192, 192, 192,
		128, 128,   0,   0,   0,   0,   0,   0,
		  0, 128, 128, 128, 128, 128, 128,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0, 128, 128, 128, 128, 128, 128,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0
	};
	if ((lim - cur) < 11) if (!fill(11)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *(mar = cur);
	if (yych <= 0xDF) {
		if (yych <= '\\') {
			if (yych <= '[') goto yy526;
			goto yy528;
		} else {
			if (yych <= 0x7F) goto yy526;
			if (yych >= 0xC2) goto yy529;
		}
	} else {
		if (yych <= 0xF0) {
			if (yych <= 0xE0) goto yy530;
			if (yych <= 0xEF) goto yy531;
			goto yy532;
		} else {
			if (yych <= 0xF3) goto yy533;
			if (yych <= 0xF4) goto yy534;
		}
	}
yy525:
#line 781 "../src/parse/lexer.re"
	{ return Ret::OK; }
#line 4433 "src/parse/lexer.cc"
yy526:
	yych = *++cur;
	if (yych == '`') goto yy535;
yy527:
	cur = mar;
	goto yy525;
yy528:
	yych = *++cur;
	if (yych <= 'b') {
		if (yych <= '?') {
			if (yych <= '/') {
				if (yych == '\'') goto yy526;
				goto yy527;
			} else {
				if (yych <= '0') goto yy536;
				if (yych <= '7') goto yy537;
				if (yych <= '>') goto yy527;
				goto yy526;
			}
		} else {
			if (yych <= '[') {
				if (yych == 'U') goto yy538;
				goto yy527;
			} else {
				if (yych <= '\\') goto yy526;
				if (yych <= '_') goto yy527;
				if (yych <= '`') goto yy535;
				goto yy526;
			}
		}
	} else {
		if (yych <= 'r') {
			if (yych <= 'm') {
				if (yych == 'f') goto yy526;
				goto yy527;
			} else {
				if (yych <= 'n') goto yy526;
				if (yych <= 'o') goto yy539;
				if (yych <= 'q') goto yy527;
				goto yy526;
			}
		} else {
			if (yych <= 'u') {
				if (yych <= 's') goto yy527;
				if (yych <= 't') goto yy526;
				goto yy540;
			} else {
				if (yych <= 'v') goto yy526;
				if (yych == 'x') goto yy541;
				goto yy527;
			}
		}
	}
yy529:
	yych = *++cur;
	if (yych <= 0x7F) goto yy527;
	if (yych <= 0xBF) goto yy526;
	goto yy527;
yy530:
	yych = *++cur;
	if (yych <= 0x9F) goto yy527;
	if (yych <= 0xBF) goto yy529;
	goto yy527;
yy531:
	yych = *++cur;
	if (yych <= 0x7F) goto yy527;
	if (yych <= 0xBF) goto yy529;
	goto yy527;
yy532:
	yych = *++cur;
	if (yych <= 0x8F) goto yy527;
	if (yych <= 0xBF) goto yy531;
	goto yy527;
yy533:
	yych = *++cur;
	if (yych <= 0x7F) goto yy527;
	if (yych <= 0xBF) goto yy531;
	goto yy527;
yy534:
	yych = *++cur;
	if (yych <= 0x7F) goto yy527;
	if (yych <= 0x8F) goto yy531;
	goto yy527;
yy535:
	++cur;
#line 780 "../src/parse/lexer.re"
	{ return Ret::OK; }
#line 4521 "src/parse/lexer.cc"
yy536:
	yych = *++cur;
	if (yych <= '/') goto yy527;
	if (yych <= '7') goto yy542;
	if (yych == '`') goto yy535;
	goto yy527;
yy537:
	yych = *++cur;
	if (yych <= '/') goto yy527;
	if (yych <= '7') goto yy542;
	goto yy527;
yy538:
	yych = *++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy527;
		if (yych <= '9') goto yy543;
		goto yy527;
	} else {
		if (yych <= 'F') goto yy543;
		if (yych <= '`') goto yy527;
		if (yych <= 'f') goto yy543;
		goto yy527;
	}
yy539:
	yych = *++cur;
	if (yych == '{') goto yy544;
	goto yy527;
yy540:
	yych = *++cur;
	if (yych <= 'F') {
		if (yych <= '/') goto yy527;
		if (yych <= '9') goto yy545;
		if (yych <= '@') goto yy527;
		goto yy545;
	} else {
		if (yych <= 'f') {
			if (yych <= '`') goto yy527;
			goto yy545;
		} else {
			if (yych == '{') goto yy546;
			goto yy527;
		}
	}
yy541:
	yych = *++cur;
	if (yych <= 'F') {
		if (yych <= '/') goto yy527;
		if (yych <= '9') goto yy547;
		if (yych <= '@') goto yy527;
		goto yy547;
	} else {
		if (yych <= 'f') {
			if (yych <= '`') goto yy527;
			goto yy547;
		} else {
			if (yych == '{') goto yy546;
			goto yy527;
		}
	}
yy542:
	yych = *++cur;
	if (yych <= '/') goto yy527;
	if (yych <= '7') goto yy526;
	goto yy527;
yy543:
	yych = *++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy527;
		if (yych <= '9') goto yy548;
		goto yy527;
	} else {
		if (yych <= 'F') goto yy548;
		if (yych <= '`') goto yy527;
		if (yych <= 'f') goto yy548;
		goto yy527;
	}
yy544:
	yych = *++cur;
	if (yybm[0+yych] & 64) goto yy549;
	goto yy527;
yy545:
	yych = *++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy527;
		if (yych <= '9') goto yy550;
		goto yy527;
	} else {
		if (yych <= 'F') goto yy550;
		if (yych <= '`') goto yy527;
		if (yych <= 'f') goto yy550;
		goto yy527;
	}
yy546:
	yych = *++cur;
	if (yych == '}') goto yy527;
	goto yy552;
yy547:
	yych = *++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy527;
		if (yych <= '9') goto yy526;
		goto yy527;
	} else {
		if (yych <= 'F') goto yy526;
		if (yych <= '`') goto yy527;
		if (yych <= 'f') goto yy526;
		goto yy527;
	}
yy548:
	yych = *++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy527;
		if (yych <= '9') goto yy553;
		goto yy527;
	} else {
		if (yych <= 'F') goto yy553;
		if (yych <= '`') goto yy527;
		if (yych <= 'f') goto yy553;
		goto yy527;
	}
yy549:
	++cur;
	if ((lim - cur) < 2) if (!fill(2)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yybm[0+yych] & 64) goto yy549;
	if (yych == '}') goto yy526;
	goto yy527;
yy550:
	yych = *++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy527;
		if (yych <= '9') goto yy547;
		goto yy527;
	} else {
		if (yych <= 'F') goto yy547;
		if (yych <= '`') goto yy527;
		if (yych <= 'f') goto yy547;
		goto yy527;
	}
yy551:
	++cur;
	if ((lim - cur) < 2) if (!fill(2)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
yy552:
	if (yybm[0+yych] & 128) goto yy551;
	if (yych == '}') goto yy526;
	goto yy527;
yy553:
	yych = *++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy527;
		if (yych >= ':') goto yy527;
	} else {
		if (yych <= 'F') goto yy554;
		if (yych <= '`') goto yy527;
		if (yych >= 'g') goto yy527;
	}
yy554:
	yych = *++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy527;
		if (yych <= '9') goto yy545;
		goto yy527;
	} else {
		if (yych <= 'F') goto yy545;
		if (yych <= '`') goto yy527;
		if (yych <= 'f') goto yy545;
		goto yy527;
	}
}
#line 782 "../src/parse/lexer.re"

}

Ret Input::try_lex_literal_in_code(uint8_t quote) {
    // We need to lex string and char literals in code blocks because they may contain closing
    // brace or newline that would otherwise be erroneously lexed as block terminator symbols.
    switch (quote) {
    case '"':
        return lex_dqstring_in_code();
    case '\'':
        return globopts->single_quoted_strings
            ? lex_sqstring_in_code()
            : lex_sqchar_or_standalone_in_code();
    case '`':
        return globopts->backtick_quoted_strings
            ? lex_bqstring_in_code()
            : lex_bqchar_or_standalone_in_code();
    default:
        return Ret::FAIL;
    }
}

Ret Input::lex_c_comment() {
loop: 
#line 4717 "src/parse/lexer.cc"
{
	uint8_t yych;
	if ((lim - cur) < 2) if (!fill(2)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yych <= '\f') {
		if (yych == '\n') goto yy557;
	} else {
		if (yych <= '\r') goto yy558;
		if (yych == '*') goto yy559;
	}
	++cur;
yy556:
#line 808 "../src/parse/lexer.re"
	{ goto loop; }
#line 4732 "src/parse/lexer.cc"
yy557:
	++cur;
#line 807 "../src/parse/lexer.re"
	{ next_line(); goto loop; }
#line 4737 "src/parse/lexer.cc"
yy558:
	yych = *++cur;
	if (yych == '\n') goto yy557;
	goto yy556;
yy559:
	yych = *++cur;
	if (yych != '/') goto yy556;
	++cur;
#line 806 "../src/parse/lexer.re"
	{ return Ret::OK; }
#line 4748 "src/parse/lexer.cc"
}
#line 809 "../src/parse/lexer.re"

}

Ret Input::lex_cpp_comment() {
loop: 
#line 4756 "src/parse/lexer.cc"
{
	uint8_t yych;
	if ((lim - cur) < 2) if (!fill(2)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yych == '\n') goto yy562;
	if (yych == '\r') goto yy563;
	++cur;
yy561:
#line 815 "../src/parse/lexer.re"
	{ goto loop; }
#line 4767 "src/parse/lexer.cc"
yy562:
	++cur;
#line 814 "../src/parse/lexer.re"
	{ next_line(); return Ret::OK; }
#line 4772 "src/parse/lexer.cc"
yy563:
	yych = *++cur;
	if (yych == '\n') goto yy562;
	goto yy561;
}
#line 816 "../src/parse/lexer.re"

}

Ret Input::lex_cls(Ast& ast, bool neg, const AstNode*& a) {
    uint32_t u, l;
    const loc_t& loc0 = tok_loc();
    loc_t loc = cur_loc();
fst:
    tok = cur;

#line 4789 "src/parse/lexer.cc"
{
	uint8_t yych;
	if (lim <= cur) if (!fill(1)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yych == ']') goto yy565;
#line 827 "../src/parse/lexer.re"
	{ CHECK_RET(lex_cls_chr(l)); goto snd; }
#line 4797 "src/parse/lexer.cc"
yy565:
	++cur;
#line 826 "../src/parse/lexer.re"
	{ a = ast.cls(loc0, neg); return Ret::OK; }
#line 4802 "src/parse/lexer.cc"
}
#line 828 "../src/parse/lexer.re"

snd: 
#line 4807 "src/parse/lexer.cc"
{
	uint8_t yych;
	if ((lim - cur) < 2) if (!fill(2)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *(mar = cur);
	if (yych == '-') goto yy568;
yy567:
#line 830 "../src/parse/lexer.re"
	{ u = l; goto add; }
#line 4816 "src/parse/lexer.cc"
yy568:
	yych = *++cur;
	if (yych != ']') goto yy569;
	cur = mar;
	goto yy567;
yy569:
	++cur;
	cur -= 1;
#line 831 "../src/parse/lexer.re"
	{
        CHECK_RET(lex_cls_chr(u));
        if (l > u) {
            msg.warn.swapped_range(loc, l, u);
            std::swap(l, u);
        }
        goto add;
    }
#line 4834 "src/parse/lexer.cc"
}
#line 839 "../src/parse/lexer.re"

add:
    ast.temp_ranges.push_back(AstRange(l, u, loc));
    loc = cur_loc();
    goto fst;
}

Ret Input::lex_cls_chr(uint32_t& c) {
    tok = cur;
    const loc_t& loc = cur_loc();
#line 874 "../src/parse/lexer.re"

    if (globopts->input_encoding == Enc::Type::ASCII) {
        
#line 4851 "src/parse/lexer.cc"
{
	uint8_t yych;
	unsigned int yyaccept = 0;
	if ((lim - cur) < 10) if (!fill(10)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yych <= '\f') {
		if (yych == '\n') goto yy572;
	} else {
		if (yych <= '\r') goto yy573;
		if (yych == '\\') goto yy574;
	}
	++cur;
yy571:
#line 856 "../src/parse/lexer.re"
	{ c = decode(tok); return Ret::OK; }
#line 4867 "src/parse/lexer.cc"
yy572:
	++cur;
#line 850 "../src/parse/lexer.re"
	{ RET_FAIL(error_at(loc, "newline in character class")); }
#line 4872 "src/parse/lexer.cc"
yy573:
	yych = *++cur;
	if (yych == '\n') goto yy572;
	goto yy571;
yy574:
	yych = *++cur;
	if (yych <= '\\') {
		if (yych <= '/') {
			if (yych <= '\f') {
				if (yych <= 0x00) goto yy575;
				if (yych == '\n') goto yy572;
				goto yy576;
			} else {
				if (yych <= '\r') goto yy578;
				if (yych == '-') goto yy579;
				goto yy576;
			}
		} else {
			if (yych <= 'U') {
				if (yych <= '3') goto yy580;
				if (yych <= '7') goto yy582;
				if (yych <= 'T') goto yy576;
				goto yy583;
			} else {
				if (yych == 'X') goto yy585;
				if (yych <= '[') goto yy576;
				goto yy586;
			}
		}
	} else {
		if (yych <= 'n') {
			if (yych <= 'b') {
				if (yych <= ']') goto yy587;
				if (yych <= '`') goto yy576;
				if (yych <= 'a') goto yy588;
				goto yy589;
			} else {
				if (yych == 'f') goto yy590;
				if (yych <= 'm') goto yy576;
				goto yy591;
			}
		} else {
			if (yych <= 't') {
				if (yych == 'r') goto yy592;
				if (yych <= 's') goto yy576;
				goto yy593;
			} else {
				if (yych <= 'v') {
					if (yych <= 'u') goto yy585;
					goto yy594;
				} else {
					if (yych == 'x') goto yy595;
					goto yy576;
				}
			}
		}
	}
yy575:
#line 853 "../src/parse/lexer.re"
	{ RET_FAIL(error_at(loc, "syntax error in escape sequence")); }
#line 4933 "src/parse/lexer.cc"
yy576:
	++cur;
yy577:
#line 869 "../src/parse/lexer.re"
	{
        msg.warn.useless_escape(loc, tok, cur);
        c = decode(tok + 1);
        return Ret::OK;
    }
#line 4943 "src/parse/lexer.cc"
yy578:
	yych = *++cur;
	if (yych == '\n') goto yy572;
	goto yy577;
yy579:
	++cur;
#line 867 "../src/parse/lexer.re"
	{ c = '-'_u8; return Ret::OK; }
#line 4952 "src/parse/lexer.cc"
yy580:
	yyaccept = 0;
	yych = *(mar = ++cur);
	if (yych <= '/') goto yy581;
	if (yych <= '7') goto yy596;
yy581:
#line 852 "../src/parse/lexer.re"
	{ RET_FAIL(error_at(loc, "syntax error in octal escape sequence")); }
#line 4961 "src/parse/lexer.cc"
yy582:
	++cur;
	goto yy581;
yy583:
	yyaccept = 1;
	yych = *(mar = ++cur);
	if (yych <= '@') {
		if (yych <= '/') goto yy584;
		if (yych <= '9') goto yy598;
	} else {
		if (yych <= 'F') goto yy598;
		if (yych <= '`') goto yy584;
		if (yych <= 'f') goto yy598;
	}
yy584:
#line 851 "../src/parse/lexer.re"
	{ RET_FAIL(error_at(loc, "syntax error in hexadecimal escape sequence")); }
#line 4979 "src/parse/lexer.cc"
yy585:
	yyaccept = 1;
	yych = *(mar = ++cur);
	if (yych <= '@') {
		if (yych <= '/') goto yy584;
		if (yych <= '9') goto yy599;
		goto yy584;
	} else {
		if (yych <= 'F') goto yy599;
		if (yych <= '`') goto yy584;
		if (yych <= 'f') goto yy599;
		goto yy584;
	}
yy586:
	++cur;
#line 866 "../src/parse/lexer.re"
	{ c = '\\'_u8; return Ret::OK; }
#line 4997 "src/parse/lexer.cc"
yy587:
	++cur;
#line 868 "../src/parse/lexer.re"
	{ c = ']'_u8; return Ret::OK; }
#line 5002 "src/parse/lexer.cc"
yy588:
	++cur;
#line 859 "../src/parse/lexer.re"
	{ c = '\a'_u8; return Ret::OK; }
#line 5007 "src/parse/lexer.cc"
yy589:
	++cur;
#line 860 "../src/parse/lexer.re"
	{ c = '\b'_u8; return Ret::OK; }
#line 5012 "src/parse/lexer.cc"
yy590:
	++cur;
#line 861 "../src/parse/lexer.re"
	{ c = '\f'_u8; return Ret::OK; }
#line 5017 "src/parse/lexer.cc"
yy591:
	++cur;
#line 862 "../src/parse/lexer.re"
	{ c = '\n'_u8; return Ret::OK; }
#line 5022 "src/parse/lexer.cc"
yy592:
	++cur;
#line 863 "../src/parse/lexer.re"
	{ c = '\r'_u8; return Ret::OK; }
#line 5027 "src/parse/lexer.cc"
yy593:
	++cur;
#line 864 "../src/parse/lexer.re"
	{ c = '\t'_u8; return Ret::OK; }
#line 5032 "src/parse/lexer.cc"
yy594:
	++cur;
#line 865 "../src/parse/lexer.re"
	{ c = '\v'_u8; return Ret::OK; }
#line 5037 "src/parse/lexer.cc"
yy595:
	yyaccept = 1;
	yych = *(mar = ++cur);
	if (yych <= '@') {
		if (yych <= '/') goto yy584;
		if (yych <= '9') goto yy600;
		goto yy584;
	} else {
		if (yych <= 'F') goto yy600;
		if (yych <= '`') goto yy584;
		if (yych <= 'f') goto yy600;
		goto yy584;
	}
yy596:
	yych = *++cur;
	if (yych <= '/') goto yy597;
	if (yych <= '7') goto yy601;
yy597:
	cur = mar;
	if (yyaccept == 0) goto yy581;
	else goto yy584;
yy598:
	yych = *++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy597;
		if (yych <= '9') goto yy602;
		goto yy597;
	} else {
		if (yych <= 'F') goto yy602;
		if (yych <= '`') goto yy597;
		if (yych <= 'f') goto yy602;
		goto yy597;
	}
yy599:
	yych = *++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy597;
		if (yych <= '9') goto yy603;
		goto yy597;
	} else {
		if (yych <= 'F') goto yy603;
		if (yych <= '`') goto yy597;
		if (yych <= 'f') goto yy603;
		goto yy597;
	}
yy600:
	yych = *++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy597;
		if (yych <= '9') goto yy604;
		goto yy597;
	} else {
		if (yych <= 'F') goto yy604;
		if (yych <= '`') goto yy597;
		if (yych <= 'f') goto yy604;
		goto yy597;
	}
yy601:
	++cur;
#line 858 "../src/parse/lexer.re"
	{ c = unesc_oct(tok, cur); return Ret::OK; }
#line 5099 "src/parse/lexer.cc"
yy602:
	yych = *++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy597;
		if (yych <= '9') goto yy605;
		goto yy597;
	} else {
		if (yych <= 'F') goto yy605;
		if (yych <= '`') goto yy597;
		if (yych <= 'f') goto yy605;
		goto yy597;
	}
yy603:
	yych = *++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy597;
		if (yych <= '9') goto yy600;
		goto yy597;
	} else {
		if (yych <= 'F') goto yy600;
		if (yych <= '`') goto yy597;
		if (yych <= 'f') goto yy600;
		goto yy597;
	}
yy604:
	++cur;
#line 857 "../src/parse/lexer.re"
	{ c = unesc_hex(tok, cur); return Ret::OK; }
#line 5128 "src/parse/lexer.cc"
yy605:
	yych = *++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy597;
		if (yych >= ':') goto yy597;
	} else {
		if (yych <= 'F') goto yy606;
		if (yych <= '`') goto yy597;
		if (yych >= 'g') goto yy597;
	}
yy606:
	yych = *++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy597;
		if (yych <= '9') goto yy599;
		goto yy597;
	} else {
		if (yych <= 'F') goto yy599;
		if (yych <= '`') goto yy597;
		if (yych <= 'f') goto yy599;
		goto yy597;
	}
}
#line 876 "../src/parse/lexer.re"

    } else {
        
#line 5156 "src/parse/lexer.cc"
{
	uint8_t yych;
	unsigned int yyaccept = 0;
	if ((lim - cur) < 10) if (!fill(10)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yych <= 0x7F) {
		if (yych <= '\f') {
			if (yych == '\n') goto yy610;
		} else {
			if (yych <= '\r') goto yy611;
			if (yych == '\\') goto yy612;
		}
	} else {
		if (yych <= 0xEF) {
			if (yych <= 0xC1) goto yy614;
			if (yych <= 0xDF) goto yy616;
			if (yych <= 0xE0) goto yy617;
			goto yy618;
		} else {
			if (yych <= 0xF0) goto yy619;
			if (yych <= 0xF3) goto yy620;
			if (yych <= 0xF4) goto yy621;
			goto yy614;
		}
	}
yy608:
	++cur;
yy609:
#line 856 "../src/parse/lexer.re"
	{ c = decode(tok); return Ret::OK; }
#line 5187 "src/parse/lexer.cc"
yy610:
	++cur;
#line 850 "../src/parse/lexer.re"
	{ RET_FAIL(error_at(loc, "newline in character class")); }
#line 5192 "src/parse/lexer.cc"
yy611:
	yych = *++cur;
	if (yych == '\n') goto yy610;
	goto yy609;
yy612:
	yyaccept = 0;
	yych = *(mar = ++cur);
	if (yych <= 'b') {
		if (yych <= '7') {
			if (yych <= '\r') {
				if (yych <= '\t') {
					if (yych >= 0x01) goto yy622;
				} else {
					if (yych <= '\n') goto yy610;
					if (yych <= '\f') goto yy622;
					goto yy624;
				}
			} else {
				if (yych <= '-') {
					if (yych <= ',') goto yy622;
					goto yy625;
				} else {
					if (yych <= '/') goto yy622;
					if (yych <= '3') goto yy626;
					goto yy628;
				}
			}
		} else {
			if (yych <= '[') {
				if (yych <= 'U') {
					if (yych <= 'T') goto yy622;
					goto yy629;
				} else {
					if (yych == 'X') goto yy631;
					goto yy622;
				}
			} else {
				if (yych <= ']') {
					if (yych <= '\\') goto yy632;
					goto yy633;
				} else {
					if (yych <= '`') goto yy622;
					if (yych <= 'a') goto yy634;
					goto yy635;
				}
			}
		}
	} else {
		if (yych <= 'v') {
			if (yych <= 'q') {
				if (yych <= 'f') {
					if (yych <= 'e') goto yy622;
					goto yy636;
				} else {
					if (yych == 'n') goto yy637;
					goto yy622;
				}
			} else {
				if (yych <= 's') {
					if (yych <= 'r') goto yy638;
					goto yy622;
				} else {
					if (yych <= 't') goto yy639;
					if (yych <= 'u') goto yy631;
					goto yy640;
				}
			}
		} else {
			if (yych <= 0xDF) {
				if (yych <= 'x') {
					if (yych <= 'w') goto yy622;
					goto yy641;
				} else {
					if (yych <= 0x7F) goto yy622;
					if (yych >= 0xC2) goto yy642;
				}
			} else {
				if (yych <= 0xF0) {
					if (yych <= 0xE0) goto yy644;
					if (yych <= 0xEF) goto yy645;
					goto yy646;
				} else {
					if (yych <= 0xF3) goto yy647;
					if (yych <= 0xF4) goto yy648;
				}
			}
		}
	}
yy613:
#line 853 "../src/parse/lexer.re"
	{ RET_FAIL(error_at(loc, "syntax error in escape sequence")); }
#line 5284 "src/parse/lexer.cc"
yy614:
	++cur;
yy615:
#line 854 "../src/parse/lexer.re"
	{ RET_FAIL(error_at(loc, "syntax error")); }
#line 5290 "src/parse/lexer.cc"
yy616:
	yych = *++cur;
	if (yych <= 0x7F) goto yy615;
	if (yych <= 0xBF) goto yy608;
	goto yy615;
yy617:
	yyaccept = 1;
	yych = *(mar = ++cur);
	if (yych <= 0x9F) goto yy615;
	if (yych <= 0xBF) goto yy649;
	goto yy615;
yy618:
	yyaccept = 1;
	yych = *(mar = ++cur);
	if (yych <= 0x7F) goto yy615;
	if (yych <= 0xBF) goto yy649;
	goto yy615;
yy619:
	yyaccept = 1;
	yych = *(mar = ++cur);
	if (yych <= 0x8F) goto yy615;
	if (yych <= 0xBF) goto yy650;
	goto yy615;
yy620:
	yyaccept = 1;
	yych = *(mar = ++cur);
	if (yych <= 0x7F) goto yy615;
	if (yych <= 0xBF) goto yy650;
	goto yy615;
yy621:
	yyaccept = 1;
	yych = *(mar = ++cur);
	if (yych <= 0x7F) goto yy615;
	if (yych <= 0x8F) goto yy650;
	goto yy615;
yy622:
	++cur;
yy623:
#line 869 "../src/parse/lexer.re"
	{
        msg.warn.useless_escape(loc, tok, cur);
        c = decode(tok + 1);
        return Ret::OK;
    }
#line 5335 "src/parse/lexer.cc"
yy624:
	yych = *++cur;
	if (yych == '\n') goto yy610;
	goto yy623;
yy625:
	++cur;
#line 867 "../src/parse/lexer.re"
	{ c = '-'_u8; return Ret::OK; }
#line 5344 "src/parse/lexer.cc"
yy626:
	yyaccept = 2;
	yych = *(mar = ++cur);
	if (yych <= '/') goto yy627;
	if (yych <= '7') goto yy651;
yy627:
#line 852 "../src/parse/lexer.re"
	{ RET_FAIL(error_at(loc, "syntax error in octal escape sequence")); }
#line 5353 "src/parse/lexer.cc"
yy628:
	++cur;
	goto yy627;
yy629:
	yyaccept = 3;
	yych = *(mar = ++cur);
	if (yych <= '@') {
		if (yych <= '/') goto yy630;
		if (yych <= '9') goto yy652;
	} else {
		if (yych <= 'F') goto yy652;
		if (yych <= '`') goto yy630;
		if (yych <= 'f') goto yy652;
	}
yy630:
#line 851 "../src/parse/lexer.re"
	{ RET_FAIL(error_at(loc, "syntax error in hexadecimal escape sequence")); }
#line 5371 "src/parse/lexer.cc"
yy631:
	yyaccept = 3;
	yych = *(mar = ++cur);
	if (yych <= '@') {
		if (yych <= '/') goto yy630;
		if (yych <= '9') goto yy653;
		goto yy630;
	} else {
		if (yych <= 'F') goto yy653;
		if (yych <= '`') goto yy630;
		if (yych <= 'f') goto yy653;
		goto yy630;
	}
yy632:
	++cur;
#line 866 "../src/parse/lexer.re"
	{ c = '\\'_u8; return Ret::OK; }
#line 5389 "src/parse/lexer.cc"
yy633:
	++cur;
#line 868 "../src/parse/lexer.re"
	{ c = ']'_u8; return Ret::OK; }
#line 5394 "src/parse/lexer.cc"
yy634:
	++cur;
#line 859 "../src/parse/lexer.re"
	{ c = '\a'_u8; return Ret::OK; }
#line 5399 "src/parse/lexer.cc"
yy635:
	++cur;
#line 860 "../src/parse/lexer.re"
	{ c = '\b'_u8; return Ret::OK; }
#line 5404 "src/parse/lexer.cc"
yy636:
	++cur;
#line 861 "../src/parse/lexer.re"
	{ c = '\f'_u8; return Ret::OK; }
#line 5409 "src/parse/lexer.cc"
yy637:
	++cur;
#line 862 "../src/parse/lexer.re"
	{ c = '\n'_u8; return Ret::OK; }
#line 5414 "src/parse/lexer.cc"
yy638:
	++cur;
#line 863 "../src/parse/lexer.re"
	{ c = '\r'_u8; return Ret::OK; }
#line 5419 "src/parse/lexer.cc"
yy639:
	++cur;
#line 864 "../src/parse/lexer.re"
	{ c = '\t'_u8; return Ret::OK; }
#line 5424 "src/parse/lexer.cc"
yy640:
	++cur;
#line 865 "../src/parse/lexer.re"
	{ c = '\v'_u8; return Ret::OK; }
#line 5429 "src/parse/lexer.cc"
yy641:
	yyaccept = 3;
	yych = *(mar = ++cur);
	if (yych <= '@') {
		if (yych <= '/') goto yy630;
		if (yych <= '9') goto yy654;
		goto yy630;
	} else {
		if (yych <= 'F') goto yy654;
		if (yych <= '`') goto yy630;
		if (yych <= 'f') goto yy654;
		goto yy630;
	}
yy642:
	yych = *++cur;
	if (yych <= 0x7F) goto yy643;
	if (yych <= 0xBF) goto yy622;
yy643:
	cur = mar;
	if (yyaccept <= 1) {
		if (yyaccept == 0) goto yy613;
		else goto yy615;
	} else {
		if (yyaccept == 2) goto yy627;
		else goto yy630;
	}
yy644:
	yych = *++cur;
	if (yych <= 0x9F) goto yy643;
	if (yych <= 0xBF) goto yy642;
	goto yy643;
yy645:
	yych = *++cur;
	if (yych <= 0x7F) goto yy643;
	if (yych <= 0xBF) goto yy642;
	goto yy643;
yy646:
	yych = *++cur;
	if (yych <= 0x8F) goto yy643;
	if (yych <= 0xBF) goto yy645;
	goto yy643;
yy647:
	yych = *++cur;
	if (yych <= 0x7F) goto yy643;
	if (yych <= 0xBF) goto yy645;
	goto yy643;
yy648:
	yych = *++cur;
	if (yych <= 0x7F) goto yy643;
	if (yych <= 0x8F) goto yy645;
	goto yy643;
yy649:
	yych = *++cur;
	if (yych <= 0x7F) goto yy643;
	if (yych <= 0xBF) goto yy608;
	goto yy643;
yy650:
	yych = *++cur;
	if (yych <= 0x7F) goto yy643;
	if (yych <= 0xBF) goto yy649;
	goto yy643;
yy651:
	yych = *++cur;
	if (yych <= '/') goto yy643;
	if (yych <= '7') goto yy655;
	goto yy643;
yy652:
	yych = *++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy643;
		if (yych <= '9') goto yy656;
		goto yy643;
	} else {
		if (yych <= 'F') goto yy656;
		if (yych <= '`') goto yy643;
		if (yych <= 'f') goto yy656;
		goto yy643;
	}
yy653:
	yych = *++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy643;
		if (yych <= '9') goto yy657;
		goto yy643;
	} else {
		if (yych <= 'F') goto yy657;
		if (yych <= '`') goto yy643;
		if (yych <= 'f') goto yy657;
		goto yy643;
	}
yy654:
	yych = *++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy643;
		if (yych <= '9') goto yy658;
		goto yy643;
	} else {
		if (yych <= 'F') goto yy658;
		if (yych <= '`') goto yy643;
		if (yych <= 'f') goto yy658;
		goto yy643;
	}
yy655:
	++cur;
#line 858 "../src/parse/lexer.re"
	{ c = unesc_oct(tok, cur); return Ret::OK; }
#line 5536 "src/parse/lexer.cc"
yy656:
	yych = *++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy643;
		if (yych <= '9') goto yy659;
		goto yy643;
	} else {
		if (yych <= 'F') goto yy659;
		if (yych <= '`') goto yy643;
		if (yych <= 'f') goto yy659;
		goto yy643;
	}
yy657:
	yych = *++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy643;
		if (yych <= '9') goto yy654;
		goto yy643;
	} else {
		if (yych <= 'F') goto yy654;
		if (yych <= '`') goto yy643;
		if (yych <= 'f') goto yy654;
		goto yy643;
	}
yy658:
	++cur;
#line 857 "../src/parse/lexer.re"
	{ c = unesc_hex(tok, cur); return Ret::OK; }
#line 5565 "src/parse/lexer.cc"
yy659:
	yych = *++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy643;
		if (yych >= ':') goto yy643;
	} else {
		if (yych <= 'F') goto yy660;
		if (yych <= '`') goto yy643;
		if (yych >= 'g') goto yy643;
	}
yy660:
	yych = *++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy643;
		if (yych <= '9') goto yy653;
		goto yy643;
	} else {
		if (yych <= 'F') goto yy653;
		if (yych <= '`') goto yy643;
		if (yych <= 'f') goto yy653;
		goto yy643;
	}
}
#line 878 "../src/parse/lexer.re"

    }
}

Ret Input::lex_str_chr(uint8_t quote, AstChar& ast, bool& stop) {
    tok = cur;
    stop = false;
    ast.loc = cur_loc();
#line 909 "../src/parse/lexer.re"

    if (globopts->input_encoding == Enc::Type::ASCII) {
        
#line 5602 "src/parse/lexer.cc"
{
	uint8_t yych;
	unsigned int yyaccept = 0;
	if ((lim - cur) < 10) if (!fill(10)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yych <= '\f') {
		if (yych == '\n') goto yy663;
	} else {
		if (yych <= '\r') goto yy664;
		if (yych == '\\') goto yy665;
	}
	++cur;
yy662:
#line 893 "../src/parse/lexer.re"
	{ ast.chr = decode(tok); stop = (tok[0] == quote); return Ret::OK; }
#line 5618 "src/parse/lexer.cc"
yy663:
	++cur;
#line 887 "../src/parse/lexer.re"
	{ RET_FAIL(error_at(ast.loc, "newline in character string")); }
#line 5623 "src/parse/lexer.cc"
yy664:
	yych = *++cur;
	if (yych == '\n') goto yy663;
	goto yy662;
yy665:
	yych = *++cur;
	if (yych <= '`') {
		if (yych <= '3') {
			if (yych <= '\n') {
				if (yych <= 0x00) goto yy666;
				if (yych <= '\t') goto yy667;
				goto yy663;
			} else {
				if (yych == '\r') goto yy669;
				if (yych <= '/') goto yy667;
				goto yy670;
			}
		} else {
			if (yych <= 'W') {
				if (yych <= '7') goto yy672;
				if (yych == 'U') goto yy673;
				goto yy667;
			} else {
				if (yych <= 'X') goto yy675;
				if (yych == '\\') goto yy676;
				goto yy667;
			}
		}
	} else {
		if (yych <= 'q') {
			if (yych <= 'e') {
				if (yych <= 'a') goto yy677;
				if (yych <= 'b') goto yy678;
				goto yy667;
			} else {
				if (yych <= 'f') goto yy679;
				if (yych == 'n') goto yy680;
				goto yy667;
			}
		} else {
			if (yych <= 'u') {
				if (yych <= 'r') goto yy681;
				if (yych <= 's') goto yy667;
				if (yych <= 't') goto yy682;
				goto yy675;
			} else {
				if (yych <= 'v') goto yy683;
				if (yych == 'x') goto yy684;
				goto yy667;
			}
		}
	}
yy666:
#line 890 "../src/parse/lexer.re"
	{ RET_FAIL(error_at(ast.loc, "syntax error in escape sequence")); }
#line 5679 "src/parse/lexer.cc"
yy667:
	++cur;
yy668:
#line 904 "../src/parse/lexer.re"
	{
        ast.chr = decode(tok + 1);
        if (tok[1] != quote) msg.warn.useless_escape(ast.loc, tok, cur);
        return Ret::OK;
    }
#line 5689 "src/parse/lexer.cc"
yy669:
	yych = *++cur;
	if (yych == '\n') goto yy663;
	goto yy668;
yy670:
	yyaccept = 0;
	yych = *(mar = ++cur);
	if (yych <= '/') goto yy671;
	if (yych <= '7') goto yy685;
yy671:
#line 889 "../src/parse/lexer.re"
	{ RET_FAIL(error_at(ast.loc, "syntax error in octal escape sequence")); }
#line 5702 "src/parse/lexer.cc"
yy672:
	++cur;
	goto yy671;
yy673:
	yyaccept = 1;
	yych = *(mar = ++cur);
	if (yych <= '@') {
		if (yych <= '/') goto yy674;
		if (yych <= '9') goto yy687;
	} else {
		if (yych <= 'F') goto yy687;
		if (yych <= '`') goto yy674;
		if (yych <= 'f') goto yy687;
	}
yy674:
#line 888 "../src/parse/lexer.re"
	{ RET_FAIL(error_at(ast.loc, "syntax error in hexadecimal escape sequence")); }
#line 5720 "src/parse/lexer.cc"
yy675:
	yyaccept = 1;
	yych = *(mar = ++cur);
	if (yych <= '@') {
		if (yych <= '/') goto yy674;
		if (yych <= '9') goto yy688;
		goto yy674;
	} else {
		if (yych <= 'F') goto yy688;
		if (yych <= '`') goto yy674;
		if (yych <= 'f') goto yy688;
		goto yy674;
	}
yy676:
	++cur;
#line 903 "../src/parse/lexer.re"
	{ ast.chr = '\\'_u8; return Ret::OK; }
#line 5738 "src/parse/lexer.cc"
yy677:
	++cur;
#line 896 "../src/parse/lexer.re"
	{ ast.chr = '\a'_u8; return Ret::OK; }
#line 5743 "src/parse/lexer.cc"
yy678:
	++cur;
#line 897 "../src/parse/lexer.re"
	{ ast.chr = '\b'_u8; return Ret::OK; }
#line 5748 "src/parse/lexer.cc"
yy679:
	++cur;
#line 898 "../src/parse/lexer.re"
	{ ast.chr = '\f'_u8; return Ret::OK; }
#line 5753 "src/parse/lexer.cc"
yy680:
	++cur;
#line 899 "../src/parse/lexer.re"
	{ ast.chr = '\n'_u8; return Ret::OK; }
#line 5758 "src/parse/lexer.cc"
yy681:
	++cur;
#line 900 "../src/parse/lexer.re"
	{ ast.chr = '\r'_u8; return Ret::OK; }
#line 5763 "src/parse/lexer.cc"
yy682:
	++cur;
#line 901 "../src/parse/lexer.re"
	{ ast.chr = '\t'_u8; return Ret::OK; }
#line 5768 "src/parse/lexer.cc"
yy683:
	++cur;
#line 902 "../src/parse/lexer.re"
	{ ast.chr = '\v'_u8; return Ret::OK; }
#line 5773 "src/parse/lexer.cc"
yy684:
	yyaccept = 1;
	yych = *(mar = ++cur);
	if (yych <= '@') {
		if (yych <= '/') goto yy674;
		if (yych <= '9') goto yy689;
		goto yy674;
	} else {
		if (yych <= 'F') goto yy689;
		if (yych <= '`') goto yy674;
		if (yych <= 'f') goto yy689;
		goto yy674;
	}
yy685:
	yych = *++cur;
	if (yych <= '/') goto yy686;
	if (yych <= '7') goto yy690;
yy686:
	cur = mar;
	if (yyaccept == 0) goto yy671;
	else goto yy674;
yy687:
	yych = *++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy686;
		if (yych <= '9') goto yy691;
		goto yy686;
	} else {
		if (yych <= 'F') goto yy691;
		if (yych <= '`') goto yy686;
		if (yych <= 'f') goto yy691;
		goto yy686;
	}
yy688:
	yych = *++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy686;
		if (yych <= '9') goto yy692;
		goto yy686;
	} else {
		if (yych <= 'F') goto yy692;
		if (yych <= '`') goto yy686;
		if (yych <= 'f') goto yy692;
		goto yy686;
	}
yy689:
	yych = *++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy686;
		if (yych <= '9') goto yy693;
		goto yy686;
	} else {
		if (yych <= 'F') goto yy693;
		if (yych <= '`') goto yy686;
		if (yych <= 'f') goto yy693;
		goto yy686;
	}
yy690:
	++cur;
#line 895 "../src/parse/lexer.re"
	{ ast.chr = unesc_oct(tok, cur); return Ret::OK; }
#line 5835 "src/parse/lexer.cc"
yy691:
	yych = *++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy686;
		if (yych <= '9') goto yy694;
		goto yy686;
	} else {
		if (yych <= 'F') goto yy694;
		if (yych <= '`') goto yy686;
		if (yych <= 'f') goto yy694;
		goto yy686;
	}
yy692:
	yych = *++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy686;
		if (yych <= '9') goto yy689;
		goto yy686;
	} else {
		if (yych <= 'F') goto yy689;
		if (yych <= '`') goto yy686;
		if (yych <= 'f') goto yy689;
		goto yy686;
	}
yy693:
	++cur;
#line 894 "../src/parse/lexer.re"
	{ ast.chr = unesc_hex(tok, cur); return Ret::OK; }
#line 5864 "src/parse/lexer.cc"
yy694:
	yych = *++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy686;
		if (yych >= ':') goto yy686;
	} else {
		if (yych <= 'F') goto yy695;
		if (yych <= '`') goto yy686;
		if (yych >= 'g') goto yy686;
	}
yy695:
	yych = *++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy686;
		if (yych <= '9') goto yy688;
		goto yy686;
	} else {
		if (yych <= 'F') goto yy688;
		if (yych <= '`') goto yy686;
		if (yych <= 'f') goto yy688;
		goto yy686;
	}
}
#line 911 "../src/parse/lexer.re"

    } else {
        
#line 5892 "src/parse/lexer.cc"
{
	uint8_t yych;
	unsigned int yyaccept = 0;
	if ((lim - cur) < 10) if (!fill(10)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yych <= 0x7F) {
		if (yych <= '\f') {
			if (yych == '\n') goto yy699;
		} else {
			if (yych <= '\r') goto yy700;
			if (yych == '\\') goto yy701;
		}
	} else {
		if (yych <= 0xEF) {
			if (yych <= 0xC1) goto yy703;
			if (yych <= 0xDF) goto yy705;
			if (yych <= 0xE0) goto yy706;
			goto yy707;
		} else {
			if (yych <= 0xF0) goto yy708;
			if (yych <= 0xF3) goto yy709;
			if (yych <= 0xF4) goto yy710;
			goto yy703;
		}
	}
yy697:
	++cur;
yy698:
#line 893 "../src/parse/lexer.re"
	{ ast.chr = decode(tok); stop = (tok[0] == quote); return Ret::OK; }
#line 5923 "src/parse/lexer.cc"
yy699:
	++cur;
#line 887 "../src/parse/lexer.re"
	{ RET_FAIL(error_at(ast.loc, "newline in character string")); }
#line 5928 "src/parse/lexer.cc"
yy700:
	yych = *++cur;
	if (yych == '\n') goto yy699;
	goto yy698;
yy701:
	yyaccept = 0;
	yych = *(mar = ++cur);
	if (yych <= 'f') {
		if (yych <= 'T') {
			if (yych <= '\f') {
				if (yych <= 0x00) goto yy702;
				if (yych == '\n') goto yy699;
				goto yy711;
			} else {
				if (yych <= '/') {
					if (yych <= '\r') goto yy713;
					goto yy711;
				} else {
					if (yych <= '3') goto yy714;
					if (yych <= '7') goto yy716;
					goto yy711;
				}
			}
		} else {
			if (yych <= '\\') {
				if (yych <= 'W') {
					if (yych <= 'U') goto yy717;
					goto yy711;
				} else {
					if (yych <= 'X') goto yy719;
					if (yych <= '[') goto yy711;
					goto yy720;
				}
			} else {
				if (yych <= 'a') {
					if (yych <= '`') goto yy711;
					goto yy721;
				} else {
					if (yych <= 'b') goto yy722;
					if (yych <= 'e') goto yy711;
					goto yy723;
				}
			}
		}
	} else {
		if (yych <= 'w') {
			if (yych <= 'r') {
				if (yych == 'n') goto yy724;
				if (yych <= 'q') goto yy711;
				goto yy725;
			} else {
				if (yych <= 't') {
					if (yych <= 's') goto yy711;
					goto yy726;
				} else {
					if (yych <= 'u') goto yy719;
					if (yych <= 'v') goto yy727;
					goto yy711;
				}
			}
		} else {
			if (yych <= 0xE0) {
				if (yych <= 0x7F) {
					if (yych <= 'x') goto yy728;
					goto yy711;
				} else {
					if (yych <= 0xC1) goto yy702;
					if (yych <= 0xDF) goto yy729;
					goto yy731;
				}
			} else {
				if (yych <= 0xF0) {
					if (yych <= 0xEF) goto yy732;
					goto yy733;
				} else {
					if (yych <= 0xF3) goto yy734;
					if (yych <= 0xF4) goto yy735;
				}
			}
		}
	}
yy702:
#line 890 "../src/parse/lexer.re"
	{ RET_FAIL(error_at(ast.loc, "syntax error in escape sequence")); }
#line 6013 "src/parse/lexer.cc"
yy703:
	++cur;
yy704:
#line 891 "../src/parse/lexer.re"
	{ RET_FAIL(error_at(ast.loc, "syntax error")); }
#line 6019 "src/parse/lexer.cc"
yy705:
	yych = *++cur;
	if (yych <= 0x7F) goto yy704;
	if (yych <= 0xBF) goto yy697;
	goto yy704;
yy706:
	yyaccept = 1;
	yych = *(mar = ++cur);
	if (yych <= 0x9F) goto yy704;
	if (yych <= 0xBF) goto yy736;
	goto yy704;
yy707:
	yyaccept = 1;
	yych = *(mar = ++cur);
	if (yych <= 0x7F) goto yy704;
	if (yych <= 0xBF) goto yy736;
	goto yy704;
yy708:
	yyaccept = 1;
	yych = *(mar = ++cur);
	if (yych <= 0x8F) goto yy704;
	if (yych <= 0xBF) goto yy737;
	goto yy704;
yy709:
	yyaccept = 1;
	yych = *(mar = ++cur);
	if (yych <= 0x7F) goto yy704;
	if (yych <= 0xBF) goto yy737;
	goto yy704;
yy710:
	yyaccept = 1;
	yych = *(mar = ++cur);
	if (yych <= 0x7F) goto yy704;
	if (yych <= 0x8F) goto yy737;
	goto yy704;
yy711:
	++cur;
yy712:
#line 904 "../src/parse/lexer.re"
	{
        ast.chr = decode(tok + 1);
        if (tok[1] != quote) msg.warn.useless_escape(ast.loc, tok, cur);
        return Ret::OK;
    }
#line 6064 "src/parse/lexer.cc"
yy713:
	yych = *++cur;
	if (yych == '\n') goto yy699;
	goto yy712;
yy714:
	yyaccept = 2;
	yych = *(mar = ++cur);
	if (yych <= '/') goto yy715;
	if (yych <= '7') goto yy738;
yy715:
#line 889 "../src/parse/lexer.re"
	{ RET_FAIL(error_at(ast.loc, "syntax error in octal escape sequence")); }
#line 6077 "src/parse/lexer.cc"
yy716:
	++cur;
	goto yy715;
yy717:
	yyaccept = 3;
	yych = *(mar = ++cur);
	if (yych <= '@') {
		if (yych <= '/') goto yy718;
		if (yych <= '9') goto yy739;
	} else {
		if (yych <= 'F') goto yy739;
		if (yych <= '`') goto yy718;
		if (yych <= 'f') goto yy739;
	}
yy718:
#line 888 "../src/parse/lexer.re"
	{ RET_FAIL(error_at(ast.loc, "syntax error in hexadecimal escape sequence")); }
#line 6095 "src/parse/lexer.cc"
yy719:
	yyaccept = 3;
	yych = *(mar = ++cur);
	if (yych <= '@') {
		if (yych <= '/') goto yy718;
		if (yych <= '9') goto yy740;
		goto yy718;
	} else {
		if (yych <= 'F') goto yy740;
		if (yych <= '`') goto yy718;
		if (yych <= 'f') goto yy740;
		goto yy718;
	}
yy720:
	++cur;
#line 903 "../src/parse/lexer.re"
	{ ast.chr = '\\'_u8; return Ret::OK; }
#line 6113 "src/parse/lexer.cc"
yy721:
	++cur;
#line 896 "../src/parse/lexer.re"
	{ ast.chr = '\a'_u8; return Ret::OK; }
#line 6118 "src/parse/lexer.cc"
yy722:
	++cur;
#line 897 "../src/parse/lexer.re"
	{ ast.chr = '\b'_u8; return Ret::OK; }
#line 6123 "src/parse/lexer.cc"
yy723:
	++cur;
#line 898 "../src/parse/lexer.re"
	{ ast.chr = '\f'_u8; return Ret::OK; }
#line 6128 "src/parse/lexer.cc"
yy724:
	++cur;
#line 899 "../src/parse/lexer.re"
	{ ast.chr = '\n'_u8; return Ret::OK; }
#line 6133 "src/parse/lexer.cc"
yy725:
	++cur;
#line 900 "../src/parse/lexer.re"
	{ ast.chr = '\r'_u8; return Ret::OK; }
#line 6138 "src/parse/lexer.cc"
yy726:
	++cur;
#line 901 "../src/parse/lexer.re"
	{ ast.chr = '\t'_u8; return Ret::OK; }
#line 6143 "src/parse/lexer.cc"
yy727:
	++cur;
#line 902 "../src/parse/lexer.re"
	{ ast.chr = '\v'_u8; return Ret::OK; }
#line 6148 "src/parse/lexer.cc"
yy728:
	yyaccept = 3;
	yych = *(mar = ++cur);
	if (yych <= '@') {
		if (yych <= '/') goto yy718;
		if (yych <= '9') goto yy741;
		goto yy718;
	} else {
		if (yych <= 'F') goto yy741;
		if (yych <= '`') goto yy718;
		if (yych <= 'f') goto yy741;
		goto yy718;
	}
yy729:
	yych = *++cur;
	if (yych <= 0x7F) goto yy730;
	if (yych <= 0xBF) goto yy711;
yy730:
	cur = mar;
	if (yyaccept <= 1) {
		if (yyaccept == 0) goto yy702;
		else goto yy704;
	} else {
		if (yyaccept == 2) goto yy715;
		else goto yy718;
	}
yy731:
	yych = *++cur;
	if (yych <= 0x9F) goto yy730;
	if (yych <= 0xBF) goto yy729;
	goto yy730;
yy732:
	yych = *++cur;
	if (yych <= 0x7F) goto yy730;
	if (yych <= 0xBF) goto yy729;
	goto yy730;
yy733:
	yych = *++cur;
	if (yych <= 0x8F) goto yy730;
	if (yych <= 0xBF) goto yy732;
	goto yy730;
yy734:
	yych = *++cur;
	if (yych <= 0x7F) goto yy730;
	if (yych <= 0xBF) goto yy732;
	goto yy730;
yy735:
	yych = *++cur;
	if (yych <= 0x7F) goto yy730;
	if (yych <= 0x8F) goto yy732;
	goto yy730;
yy736:
	yych = *++cur;
	if (yych <= 0x7F) goto yy730;
	if (yych <= 0xBF) goto yy697;
	goto yy730;
yy737:
	yych = *++cur;
	if (yych <= 0x7F) goto yy730;
	if (yych <= 0xBF) goto yy736;
	goto yy730;
yy738:
	yych = *++cur;
	if (yych <= '/') goto yy730;
	if (yych <= '7') goto yy742;
	goto yy730;
yy739:
	yych = *++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy730;
		if (yych <= '9') goto yy743;
		goto yy730;
	} else {
		if (yych <= 'F') goto yy743;
		if (yych <= '`') goto yy730;
		if (yych <= 'f') goto yy743;
		goto yy730;
	}
yy740:
	yych = *++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy730;
		if (yych <= '9') goto yy744;
		goto yy730;
	} else {
		if (yych <= 'F') goto yy744;
		if (yych <= '`') goto yy730;
		if (yych <= 'f') goto yy744;
		goto yy730;
	}
yy741:
	yych = *++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy730;
		if (yych <= '9') goto yy745;
		goto yy730;
	} else {
		if (yych <= 'F') goto yy745;
		if (yych <= '`') goto yy730;
		if (yych <= 'f') goto yy745;
		goto yy730;
	}
yy742:
	++cur;
#line 895 "../src/parse/lexer.re"
	{ ast.chr = unesc_oct(tok, cur); return Ret::OK; }
#line 6255 "src/parse/lexer.cc"
yy743:
	yych = *++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy730;
		if (yych <= '9') goto yy746;
		goto yy730;
	} else {
		if (yych <= 'F') goto yy746;
		if (yych <= '`') goto yy730;
		if (yych <= 'f') goto yy746;
		goto yy730;
	}
yy744:
	yych = *++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy730;
		if (yych <= '9') goto yy741;
		goto yy730;
	} else {
		if (yych <= 'F') goto yy741;
		if (yych <= '`') goto yy730;
		if (yych <= 'f') goto yy741;
		goto yy730;
	}
yy745:
	++cur;
#line 894 "../src/parse/lexer.re"
	{ ast.chr = unesc_hex(tok, cur); return Ret::OK; }
#line 6284 "src/parse/lexer.cc"
yy746:
	yych = *++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy730;
		if (yych >= ':') goto yy730;
	} else {
		if (yych <= 'F') goto yy747;
		if (yych <= '`') goto yy730;
		if (yych >= 'g') goto yy730;
	}
yy747:
	yych = *++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy730;
		if (yych <= '9') goto yy740;
		goto yy730;
	} else {
		if (yych <= 'F') goto yy740;
		if (yych <= '`') goto yy730;
		if (yych <= 'f') goto yy740;
		goto yy730;
	}
}
#line 913 "../src/parse/lexer.re"

    }
}

Ret Input::lex_str(Ast& ast, uint8_t quote, const AstNode*& a) {
    const loc_t& loc = tok_loc();
    AstChar c;
    bool stop;
    for (;;) {
        CHECK_RET(lex_str_chr(quote, c, stop));
        if (stop) {
            a = ast.str(loc, quote == '\'');
            return Ret::OK;
        }
        ast.temp_chars.push_back(c);
    }
}

Ret Input::set_sourceline() {
sourceline:
    tok = cur;

#line 6331 "src/parse/lexer.cc"
{
	uint8_t yych;
	static const unsigned char yybm[256] = {
		  0, 128, 128, 128, 128, 128, 128, 128,
		128, 128,   0, 128, 128, 128, 128, 128,
		128, 128, 128, 128, 128, 128, 128, 128,
		128, 128, 128, 128, 128, 128, 128, 128,
		128, 128,   0, 128, 128, 128, 128, 128,
		128, 128, 128, 128, 128, 128, 128, 128,
		192, 192, 192, 192, 192, 192, 192, 192,
		192, 192, 128, 128, 128, 128, 128, 128,
		128, 128, 128, 128, 128, 128, 128, 128,
		128, 128, 128, 128, 128, 128, 128, 128,
		128, 128, 128, 128, 128, 128, 128, 128,
		128, 128, 128, 128,   0, 128, 128, 128,
		128, 128, 128, 128, 128, 128, 128, 128,
		128, 128, 128, 128, 128, 128, 128, 128,
		128, 128, 128, 128, 128, 128, 128, 128,
		128, 128, 128, 128, 128, 128, 128, 128,
		128, 128, 128, 128, 128, 128, 128, 128,
		128, 128, 128, 128, 128, 128, 128, 128,
		128, 128, 128, 128, 128, 128, 128, 128,
		128, 128, 128, 128, 128, 128, 128, 128,
		128, 128, 128, 128, 128, 128, 128, 128,
		128, 128, 128, 128, 128, 128, 128, 128,
		128, 128, 128, 128, 128, 128, 128, 128,
		128, 128, 128, 128, 128, 128, 128, 128,
		128, 128, 128, 128, 128, 128, 128, 128,
		128, 128, 128, 128, 128, 128, 128, 128,
		128, 128, 128, 128, 128, 128, 128, 128,
		128, 128, 128, 128, 128, 128, 128, 128,
		128, 128, 128, 128, 128, 128, 128, 128,
		128, 128, 128, 128, 128, 128, 128, 128,
		128, 128, 128, 128, 128, 128, 128, 128,
		128, 128, 128, 128, 128, 128, 128, 128
	};
	if ((lim - cur) < 2) if (!fill(2)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yych <= '\r') {
		if (yych <= '\t') {
			if (yych >= 0x01) goto yy749;
		} else {
			if (yych <= '\n') goto yy751;
			if (yych <= '\f') goto yy749;
			goto yy752;
		}
	} else {
		if (yych <= '"') {
			if (yych <= '!') goto yy749;
			goto yy753;
		} else {
			if (yych <= '0') goto yy749;
			if (yych <= '9') goto yy754;
			goto yy749;
		}
	}
	++cur;
#line 954 "../src/parse/lexer.re"
	{ --cur; return Ret::OK; }
#line 6391 "src/parse/lexer.cc"
yy749:
	++cur;
yy750:
#line 955 "../src/parse/lexer.re"
	{ goto sourceline; }
#line 6397 "src/parse/lexer.cc"
yy751:
	++cur;
#line 953 "../src/parse/lexer.re"
	{ pos = tok = cur; return Ret::OK; }
#line 6402 "src/parse/lexer.cc"
yy752:
	yych = *++cur;
	if (yych == '\n') goto yy751;
	goto yy750;
yy753:
	yych = *(mar = ++cur);
	if (yych <= 0x00) goto yy750;
	if (yych == '\n') goto yy750;
	goto yy756;
yy754:
	++cur;
	if (lim <= cur) if (!fill(1)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yybm[0+yych] & 64) goto yy754;
#line 935 "../src/parse/lexer.re"
	{
        uint32_t l;
        if (!s_to_u32_unsafe(tok, cur, l)) {
            RET_FAIL(error_at_tok("line number overflow"));
        }
        set_line(l);
        goto sourceline;
    }
#line 6426 "src/parse/lexer.cc"
yy755:
	++cur;
	if (lim <= cur) if (!fill(1)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
yy756:
	if (yybm[0+yych] & 128) goto yy755;
	if (yych <= '\n') goto yy757;
	if (yych <= '"') goto yy758;
	goto yy759;
yy757:
	cur = mar;
	goto yy750;
yy758:
	++cur;
#line 944 "../src/parse/lexer.re"
	{
        InputFile &in = get_input();
        std::string &name = in.escaped_name;
        name = escape_backslashes(getstr(tok + 1, cur - 1));
        in.fidx = static_cast<uint32_t>(msg.filenames.size());
        msg.filenames.push_back(name);
        goto sourceline;
    }
#line 6450 "src/parse/lexer.cc"
yy759:
	++cur;
	if (lim <= cur) if (!fill(1)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yych <= 0x00) goto yy757;
	if (yych == '\n') goto yy757;
	goto yy755;
}
#line 956 "../src/parse/lexer.re"

}

#undef YYFILL

} // end namespace re2c

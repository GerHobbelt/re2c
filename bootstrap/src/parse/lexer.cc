/* Generated by re2c 3.0 */
#line 1 "../src/parse/lexer.re"
#include <ctype.h>
#include <stdint.h>
#include <limits>
#include <string>
#include <utility>
#include <vector>

#include "src/codegen/helpers.h"
#include "src/codegen/output.h"
#include "src/encoding/enc.h"
#include "src/msg/location.h"
#include "src/msg/msg.h"
#include "src/msg/warn.h"
#include "src/options/opt.h"
#include "src/parse/ast.h"
#include "src/parse/input.h"
#include "src/parse/lexer.h"
#include "src/regexp/rule.h"
#include "src/util/check.h"
#include "src/util/string_utils.h"
#include "parser.h"

namespace re2c {

#line 28 "src/parse/lexer.cc"
size_t LexerState::maxfill_main() { return 18; }
#line 25 "../src/parse/lexer.re"


// Global re2c configurations and definitions.
#line 60 "../src/parse/lexer.re"


#line 132 "../src/parse/lexer.re"


#define RET_BLOCK(k) do { kind = k; return Ret::OK; } while(0)

Ret Input::lex_program(Output& out, std::string& block_name, InputBlock& kind) {
    const opt_t* opts = out.block().opts;
    const uint8_t* x, *y;

    if (is_eof()) RET_BLOCK(InputBlock::END);

next:
    tok = cur;
loop:
    location = cur_loc();
    ptr = cur;

#line 54 "src/parse/lexer.cc"
{
	uint8_t yych;
	unsigned int yyaccept = 0;
	static const unsigned char yybm[] = {
		  0, 128, 128, 128, 128, 128, 128, 128, 
		128, 160,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		160, 128,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		192, 192, 192, 192, 192, 192, 192, 192, 
		192, 192, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128,   0, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
	};
	if ((lim - cur) < 18) if (!fill(18)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yych <= '\r') {
		if (yych <= '\t') {
			if (yych >= 0x01) goto yy1;
		} else {
			if (yych <= '\n') goto yy3;
			if (yych <= '\f') goto yy1;
			goto yy5;
		}
	} else {
		if (yych <= '%') {
			if (yych <= '$') goto yy1;
			goto yy6;
		} else {
			if (yych == '/') goto yy7;
			goto yy1;
		}
	}
	++cur;
#line 262 "../src/parse/lexer.re"
	{
        if (is_eof()) {
            out.gen_raw(tok, ptr);
            RET_BLOCK(InputBlock::END);
        }
        goto loop;
    }
#line 120 "src/parse/lexer.cc"
yy1:
	++cur;
yy2:
#line 282 "../src/parse/lexer.re"
	{ goto loop; }
#line 126 "src/parse/lexer.cc"
yy3:
	yyaccept = 0;
	yych = *(mar = ++cur);
	if (yybm[0+yych] & 32) {
		goto yy8;
	}
	if (yych == '#') goto yy10;
yy4:
#line 277 "../src/parse/lexer.re"
	{
        next_line();
        goto loop;
    }
#line 140 "src/parse/lexer.cc"
yy5:
	yych = *++cur;
	if (yych == '\n') goto yy3;
	goto yy2;
yy6:
	yyaccept = 1;
	yych = *(mar = ++cur);
	if (yych == '{') goto yy11;
	goto yy2;
yy7:
	yyaccept = 1;
	yych = *(mar = ++cur);
	if (yych == '*') goto yy12;
	goto yy2;
yy8:
	++cur;
	if (lim <= cur) if (!fill(1)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yybm[0+yych] & 32) {
		goto yy8;
	}
	if (yych == '#') goto yy10;
yy9:
	cur = mar;
	if (yyaccept <= 2) {
		if (yyaccept <= 1) {
			if (yyaccept == 0) {
				goto yy4;
			} else {
				goto yy2;
			}
		} else {
			goto yy56;
		}
	} else {
		if (yyaccept <= 4) {
			if (yyaccept == 3) {
				goto yy128;
			} else {
				goto yy130;
			}
		} else {
			goto yy156;
		}
	}
yy10:
	++cur;
	if ((lim - cur) < 5) if (!fill(5)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy10;
		goto yy9;
	} else {
		if (yych <= ' ') goto yy10;
		if (yych == 'l') goto yy13;
		goto yy9;
	}
yy11:
	yych = *++cur;
	if (yych <= 'h') {
		if (yych <= '\r') {
			if (yych == '\n') {
				yyt1 = cur;
				goto yy14;
			}
			if (yych <= '\f') goto yy9;
			yyt1 = cur;
			goto yy15;
		} else {
			if (yych <= 'c') {
				if (yych <= 'b') goto yy9;
				goto yy16;
			} else {
				if (yych <= 'f') goto yy9;
				if (yych <= 'g') goto yy17;
				goto yy18;
			}
		}
	} else {
		if (yych <= 'q') {
			if (yych <= 'k') {
				if (yych <= 'i') goto yy19;
				goto yy9;
			} else {
				if (yych <= 'l') goto yy20;
				if (yych <= 'm') goto yy21;
				goto yy9;
			}
		} else {
			if (yych <= 's') {
				if (yych <= 'r') goto yy22;
				goto yy23;
			} else {
				if (yych == 'u') goto yy24;
				goto yy9;
			}
		}
	}
yy12:
	yych = *++cur;
	if (yych == '!') goto yy25;
	goto yy9;
yy13:
	yych = *++cur;
	if (yych == 'i') goto yy26;
	goto yy9;
yy14:
	++cur;
	cur = yyt1;
#line 148 "../src/parse/lexer.re"
	{
        out.gen_raw(tok, ptr);
        CHECK_RET(lex_opt_name(block_name));
        RET_BLOCK(InputBlock::GLOBAL);
    }
#line 256 "src/parse/lexer.cc"
yy15:
	yych = *++cur;
	if (yych == '\n') goto yy14;
	goto yy9;
yy16:
	yych = *++cur;
	if (yych == 'o') goto yy27;
	goto yy9;
yy17:
	yych = *++cur;
	if (yych == 'e') goto yy28;
	goto yy9;
yy18:
	yych = *++cur;
	if (yych == 'e') goto yy29;
	goto yy9;
yy19:
	yych = *++cur;
	if (yych == 'g') goto yy30;
	if (yych == 'n') goto yy31;
	goto yy9;
yy20:
	yych = *++cur;
	if (yych == 'o') goto yy32;
	goto yy9;
yy21:
	yych = *++cur;
	if (yych == 'a') goto yy33;
	if (yych == 't') goto yy34;
	goto yy9;
yy22:
	yych = *++cur;
	if (yych == 'u') goto yy35;
	goto yy9;
yy23:
	yych = *++cur;
	if (yych == 't') goto yy36;
	goto yy9;
yy24:
	yych = *++cur;
	if (yych == 's') goto yy37;
	goto yy9;
yy25:
	yych = *++cur;
	switch (yych) {
		case 'c': goto yy38;
		case 'g': goto yy39;
		case 'h': goto yy40;
		case 'i': goto yy41;
		case 'l': goto yy42;
		case 'm': goto yy43;
		case 'r': goto yy44;
		case 's': goto yy45;
		case 't': goto yy46;
		case 'u': goto yy47;
		default: goto yy9;
	}
yy26:
	yych = *++cur;
	if (yych == 'n') goto yy48;
	goto yy9;
yy27:
	yych = *++cur;
	if (yych == 'n') goto yy49;
	goto yy9;
yy28:
	yych = *++cur;
	if (yych == 't') goto yy50;
	goto yy9;
yy29:
	yych = *++cur;
	if (yych == 'a') goto yy51;
	goto yy9;
yy30:
	yych = *++cur;
	if (yych == 'n') goto yy52;
	goto yy9;
yy31:
	yych = *++cur;
	if (yych == 'c') goto yy53;
	goto yy9;
yy32:
	yych = *++cur;
	if (yych == 'c') goto yy54;
	goto yy9;
yy33:
	yych = *++cur;
	if (yych == 'x') goto yy55;
	goto yy9;
yy34:
	yych = *++cur;
	if (yych == 'a') goto yy57;
	goto yy9;
yy35:
	yych = *++cur;
	if (yych == 'l') goto yy58;
	goto yy9;
yy36:
	yych = *++cur;
	if (yych == 'a') goto yy59;
	goto yy9;
yy37:
	yych = *++cur;
	if (yych == 'e') goto yy60;
	goto yy9;
yy38:
	yych = *++cur;
	if (yych == 'o') goto yy61;
	goto yy9;
yy39:
	yych = *++cur;
	if (yych == 'e') goto yy62;
	goto yy9;
yy40:
	yych = *++cur;
	if (yych == 'e') goto yy63;
	goto yy9;
yy41:
	yych = *++cur;
	if (yych == 'g') goto yy64;
	if (yych == 'n') goto yy65;
	goto yy9;
yy42:
	yych = *++cur;
	if (yych == 'o') goto yy66;
	goto yy9;
yy43:
	yych = *++cur;
	if (yych == 'a') goto yy67;
	if (yych == 't') goto yy68;
	goto yy9;
yy44:
	yych = *++cur;
	if (yych == 'e') goto yy69;
	if (yych == 'u') goto yy70;
	goto yy9;
yy45:
	yych = *++cur;
	if (yych == 't') goto yy71;
	goto yy9;
yy46:
	yych = *++cur;
	if (yych == 'y') goto yy72;
	goto yy9;
yy47:
	yych = *++cur;
	if (yych == 's') goto yy73;
	goto yy9;
yy48:
	yych = *++cur;
	if (yych == 'e') goto yy74;
	goto yy9;
yy49:
	yych = *++cur;
	if (yych == 'd') goto yy75;
	goto yy9;
yy50:
	yych = *++cur;
	if (yych == 's') goto yy76;
	goto yy9;
yy51:
	yych = *++cur;
	if (yych == 'd') goto yy77;
	goto yy9;
yy52:
	yych = *++cur;
	if (yych == 'o') goto yy78;
	goto yy9;
yy53:
	yych = *++cur;
	if (yych == 'l') goto yy79;
	goto yy9;
yy54:
	yych = *++cur;
	if (yych == 'a') goto yy80;
	goto yy9;
yy55:
	yyaccept = 2;
	yych = *(mar = ++cur);
	if (yych == 'n') goto yy81;
yy56:
#line 178 "../src/parse/lexer.re"
	{
        CHECK_RET(lex_special_block(out, CodeKind::MAXFILL, DCONF_FORMAT));
        goto next;
    }
#line 443 "src/parse/lexer.cc"
yy57:
	yych = *++cur;
	if (yych == 'g') goto yy82;
	goto yy9;
yy58:
	yych = *++cur;
	if (yych == 'e') goto yy83;
	goto yy9;
yy59:
	yych = *++cur;
	if (yych == 'g') goto yy84;
	goto yy9;
yy60:
	++cur;
#line 172 "../src/parse/lexer.re"
	{
        out.gen_raw(tok, ptr);
        CHECK_RET(lex_opt_name(block_name));
        RET_BLOCK(InputBlock::USE);
    }
#line 464 "src/parse/lexer.cc"
yy61:
	yych = *++cur;
	if (yych == 'n') goto yy85;
	goto yy9;
yy62:
	yych = *++cur;
	if (yych == 't') goto yy86;
	goto yy9;
yy63:
	yych = *++cur;
	if (yych == 'a') goto yy87;
	goto yy9;
yy64:
	yych = *++cur;
	if (yych == 'n') goto yy88;
	goto yy9;
yy65:
	yych = *++cur;
	if (yych == 'c') goto yy89;
	goto yy9;
yy66:
	yych = *++cur;
	if (yych == 'c') goto yy90;
	goto yy9;
yy67:
	yych = *++cur;
	if (yych == 'x') goto yy91;
	goto yy9;
yy68:
	yych = *++cur;
	if (yych == 'a') goto yy92;
	goto yy9;
yy69:
	yych = *++cur;
	if (yych == '2') goto yy93;
	goto yy9;
yy70:
	yych = *++cur;
	if (yych == 'l') goto yy94;
	goto yy9;
yy71:
	yych = *++cur;
	if (yych == 'a') goto yy95;
	goto yy9;
yy72:
	yych = *++cur;
	if (yych == 'p') goto yy96;
	goto yy9;
yy73:
	yych = *++cur;
	if (yych == 'e') goto yy97;
	goto yy9;
yy74:
	yych = *++cur;
	if (yych <= '0') goto yy99;
	if (yych <= '9') goto yy9;
	goto yy99;
yy75:
	yych = *++cur;
	if (yych == 'i') goto yy100;
	goto yy9;
yy76:
	yych = *++cur;
	if (yych == 't') goto yy101;
	goto yy9;
yy77:
	yych = *++cur;
	if (yych == 'e') goto yy102;
	goto yy9;
yy78:
	yych = *++cur;
	if (yych == 'r') goto yy103;
	goto yy9;
yy79:
	yych = *++cur;
	if (yych == 'u') goto yy104;
	goto yy9;
yy80:
	yych = *++cur;
	if (yych == 'l') goto yy105;
	goto yy9;
yy81:
	yych = *++cur;
	if (yych == 'm') goto yy106;
	goto yy9;
yy82:
	yych = *++cur;
	if (yych == 's') goto yy107;
	goto yy9;
yy83:
	yych = *++cur;
	if (yych == 's') goto yy108;
	goto yy9;
yy84:
	yych = *++cur;
	if (yych == 's') goto yy109;
	goto yy9;
yy85:
	yych = *++cur;
	if (yych == 'd') goto yy110;
	goto yy9;
yy86:
	yych = *++cur;
	if (yych == 's') goto yy111;
	goto yy9;
yy87:
	yych = *++cur;
	if (yych == 'd') goto yy112;
	goto yy9;
yy88:
	yych = *++cur;
	if (yych == 'o') goto yy113;
	goto yy9;
yy89:
	yych = *++cur;
	if (yych == 'l') goto yy114;
	goto yy9;
yy90:
	yych = *++cur;
	if (yych == 'a') goto yy115;
	goto yy9;
yy91:
	yych = *++cur;
	if (yych == ':') goto yy116;
	if (yych == 'n') goto yy117;
	goto yy9;
yy92:
	yych = *++cur;
	if (yych == 'g') goto yy118;
	goto yy9;
yy93:
	yych = *++cur;
	if (yych == 'c') goto yy119;
	goto yy9;
yy94:
	yych = *++cur;
	if (yych == 'e') goto yy120;
	goto yy9;
yy95:
	yych = *++cur;
	if (yych == 'g') goto yy121;
	goto yy9;
yy96:
	yych = *++cur;
	if (yych == 'e') goto yy122;
	goto yy9;
yy97:
	yych = *++cur;
	if (yych == ':') goto yy123;
	goto yy9;
yy98:
	++cur;
	if (lim <= cur) if (!fill(1)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
yy99:
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy98;
		goto yy9;
	} else {
		if (yych <= ' ') goto yy98;
		if (yych <= '0') goto yy9;
		if (yych <= '9') {
			yyt1 = cur;
			goto yy124;
		}
		goto yy9;
	}
yy100:
	yych = *++cur;
	if (yych == 't') goto yy125;
	goto yy9;
yy101:
	yych = *++cur;
	if (yych == 'a') goto yy126;
	goto yy9;
yy102:
	yych = *++cur;
	if (yych == 'r') goto yy127;
	goto yy9;
yy103:
	yych = *++cur;
	if (yych == 'e') goto yy129;
	goto yy9;
yy104:
	yych = *++cur;
	if (yych == 'd') goto yy131;
	goto yy9;
yy105:
	++cur;
#line 160 "../src/parse/lexer.re"
	{
        out.gen_raw(tok, ptr);
        CHECK_RET(lex_opt_name(block_name));
        RET_BLOCK(InputBlock::LOCAL);
    }
#line 660 "src/parse/lexer.cc"
yy106:
	yych = *++cur;
	if (yych == 'a') goto yy132;
	goto yy9;
yy107:
	++cur;
#line 194 "../src/parse/lexer.re"
	{
        uint32_t allow = DCONF_FORMAT | DCONF_SEPARATOR;
        CHECK_RET(lex_special_block(out, CodeKind::MTAGS, allow));
        goto next;
    }
#line 673 "src/parse/lexer.cc"
yy108:
	++cur;
#line 166 "../src/parse/lexer.re"
	{
        out.gen_raw(tok, ptr);
        CHECK_RET(lex_opt_name(block_name));
        RET_BLOCK(InputBlock::RULES);
    }
#line 682 "src/parse/lexer.cc"
yy109:
	++cur;
#line 188 "../src/parse/lexer.re"
	{
        uint32_t allow = DCONF_FORMAT | DCONF_SEPARATOR;
        CHECK_RET(lex_special_block(out, CodeKind::STAGS, allow));
        goto next;
    }
#line 691 "src/parse/lexer.cc"
yy110:
	yych = *++cur;
	if (yych == 'i') goto yy133;
	goto yy9;
yy111:
	yych = *++cur;
	if (yych == 't') goto yy134;
	goto yy9;
yy112:
	yych = *++cur;
	if (yych == 'e') goto yy135;
	goto yy9;
yy113:
	yych = *++cur;
	if (yych == 'r') goto yy136;
	goto yy9;
yy114:
	yych = *++cur;
	if (yych == 'u') goto yy137;
	goto yy9;
yy115:
	yych = *++cur;
	if (yych == 'l') goto yy138;
	goto yy9;
yy116:
	yych = *++cur;
	if (yych == 'r') goto yy139;
	goto yy9;
yy117:
	yych = *++cur;
	if (yych == 'm') goto yy140;
	goto yy9;
yy118:
	yych = *++cur;
	if (yych == 's') goto yy141;
	goto yy9;
yy119:
	++cur;
#line 154 "../src/parse/lexer.re"
	{
        out.gen_raw(tok, ptr);
        CHECK_RET(lex_opt_name(block_name));
        RET_BLOCK(InputBlock::GLOBAL);
    }
#line 736 "src/parse/lexer.cc"
yy120:
	yych = *++cur;
	if (yych == 's') goto yy142;
	goto yy9;
yy121:
	yych = *++cur;
	if (yych == 's') goto yy143;
	goto yy9;
yy122:
	yych = *++cur;
	if (yych == 's') goto yy144;
	goto yy9;
yy123:
	yych = *++cur;
	if (yych == 'r') goto yy145;
	goto yy9;
yy124:
	++cur;
	if ((lim - cur) < 2) if (!fill(2)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yybm[0+yych] & 64) {
		goto yy124;
	}
	if (yych <= '\f') {
		if (yych <= 0x08) goto yy9;
		if (yych <= '\t') goto yy146;
		if (yych <= '\n') goto yy147;
		goto yy9;
	} else {
		if (yych <= '\r') goto yy148;
		if (yych == ' ') goto yy146;
		goto yy9;
	}
yy125:
	yych = *++cur;
	if (yych == 'i') goto yy149;
	goto yy9;
yy126:
	yych = *++cur;
	if (yych == 't') goto yy150;
	goto yy9;
yy127:
	yyaccept = 3;
	yych = *(mar = ++cur);
	if (yych == ':') goto yy151;
yy128:
#line 236 "../src/parse/lexer.re"
	{
        RET_FAIL(error_at_cur("ill-formed `header` directive: expected `:on` or `:off`"));
    }
#line 787 "src/parse/lexer.cc"
yy129:
	yyaccept = 4;
	yych = *(mar = ++cur);
	if (yych <= 0x1F) {
		if (yych <= '\n') {
			if (yych >= '\t') {
				yyt1 = cur;
				goto yy152;
			}
		} else {
			if (yych == '\r') {
				yyt1 = cur;
				goto yy152;
			}
		}
	} else {
		if (yych <= '%') {
			if (yych <= ' ') {
				yyt1 = cur;
				goto yy152;
			}
			if (yych >= '%') {
				yyt1 = cur;
				goto yy153;
			}
		} else {
			if (yych == '*') {
				yyt1 = cur;
				goto yy154;
			}
		}
	}
yy130:
#line 257 "../src/parse/lexer.re"
	{
        RET_FAIL(error_at_cur("ill-formed `ignore` block: "
                "expected a space, a newline, or the end of block"));
    }
#line 826 "src/parse/lexer.cc"
yy131:
	yych = *++cur;
	if (yych == 'e') goto yy155;
	goto yy9;
yy132:
	yych = *++cur;
	if (yych == 't') goto yy157;
	goto yy9;
yy133:
	yych = *++cur;
	if (yych == 't') goto yy158;
	goto yy9;
yy134:
	yych = *++cur;
	if (yych == 'a') goto yy159;
	goto yy9;
yy135:
	yych = *++cur;
	if (yych == 'r') goto yy160;
	goto yy9;
yy136:
	yych = *++cur;
	if (yych == 'e') goto yy161;
	goto yy9;
yy137:
	yych = *++cur;
	if (yych == 'd') goto yy162;
	goto yy9;
yy138:
	yych = *++cur;
	if (yych == ':') goto yy163;
	goto yy9;
yy139:
	yych = *++cur;
	if (yych == 'e') goto yy164;
	goto yy9;
yy140:
	yych = *++cur;
	if (yych == 'a') goto yy165;
	goto yy9;
yy141:
	yych = *++cur;
	if (yych == ':') goto yy166;
	goto yy9;
yy142:
	yych = *++cur;
	if (yych == ':') goto yy167;
	goto yy9;
yy143:
	yych = *++cur;
	if (yych == ':') goto yy168;
	goto yy9;
yy144:
	yych = *++cur;
	if (yych == ':') goto yy169;
	goto yy9;
yy145:
	yych = *++cur;
	if (yych == 'e') goto yy170;
	goto yy9;
yy146:
	++cur;
	if (lim <= cur) if (!fill(1)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy146;
		goto yy9;
	} else {
		if (yych <= ' ') goto yy146;
		if (yych == '"') goto yy171;
		goto yy9;
	}
yy147:
	++cur;
	cur = yyt1;
#line 270 "../src/parse/lexer.re"
	{
        out.gen_raw(tok, ptr);
        out.gen_stmt(code_newline(alc));
        CHECK_RET(set_sourceline());
        goto next;
    }
#line 909 "src/parse/lexer.cc"
yy148:
	yych = *++cur;
	if (yych == '\n') goto yy147;
	goto yy9;
yy149:
	yych = *++cur;
	if (yych == 'o') goto yy172;
	goto yy9;
yy150:
	yych = *++cur;
	if (yych == 'e') goto yy173;
	goto yy9;
yy151:
	yych = *++cur;
	if (yych == 'o') goto yy174;
	goto yy9;
yy152:
	++cur;
	cur = yyt1;
#line 251 "../src/parse/lexer.re"
	{
        out.gen_raw(tok, ptr);
        // allows arbitrary garbage before the end of the comment
        CHECK_RET(lex_block_end(out, true));
        goto next;
    }
#line 936 "src/parse/lexer.cc"
yy153:
	yych = *++cur;
	if (yych == '}') goto yy152;
	goto yy9;
yy154:
	yych = *++cur;
	if (yych == '/') goto yy152;
	goto yy9;
yy155:
	yyaccept = 5;
	yych = *(mar = ++cur);
	if (yych == '\t') goto yy175;
	if (yych == ' ') goto yy175;
yy156:
#line 247 "../src/parse/lexer.re"
	{
        RET_FAIL(error_at_cur("ill-formed `include` directive: expected filename in quotes"));
    }
#line 955 "src/parse/lexer.cc"
yy157:
	yych = *++cur;
	if (yych == 'c') goto yy176;
	goto yy9;
yy158:
	yych = *++cur;
	if (yych == 'i') goto yy177;
	goto yy9;
yy159:
	yych = *++cur;
	if (yych == 't') goto yy178;
	goto yy9;
yy160:
	yych = *++cur;
	if (yych == ':') goto yy179;
	goto yy9;
yy161:
	yych = *++cur;
	if (yych == ':') goto yy180;
	goto yy9;
yy162:
	yych = *++cur;
	if (yych == 'e') goto yy181;
	goto yy9;
yy163:
	yych = *++cur;
	if (yych == 'r') goto yy182;
	goto yy9;
yy164:
	yych = *++cur;
	if (yych == '2') goto yy183;
	goto yy9;
yy165:
	yych = *++cur;
	if (yych == 't') goto yy184;
	goto yy9;
yy166:
	yych = *++cur;
	if (yych == 'r') goto yy185;
	goto yy9;
yy167:
	yych = *++cur;
	if (yych == 'r') goto yy186;
	goto yy9;
yy168:
	yych = *++cur;
	if (yych == 'r') goto yy187;
	goto yy9;
yy169:
	yych = *++cur;
	if (yych == 'r') goto yy188;
	goto yy9;
yy170:
	yych = *++cur;
	if (yych == '2') goto yy189;
	goto yy9;
yy171:
	++cur;
	if ((lim - cur) < 3) if (!fill(3)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yybm[0+yych] & 128) {
		goto yy171;
	}
	if (yych <= '\n') goto yy9;
	if (yych <= '"') goto yy190;
	goto yy191;
yy172:
	yych = *++cur;
	if (yych == 'n') goto yy192;
	goto yy9;
yy173:
	++cur;
#line 208 "../src/parse/lexer.re"
	{
        out.state_goto = true;
        if (!opts->storable_state) {
            RET_FAIL(error_at_cur("`getstate` without `-f --storable-state` option"));
        } else if (opts->code_model == CodeModel::LOOP_SWITCH) {
            RET_FAIL(error_at_cur(
                    "`getstate` is incompatible with --loop-switch code model, it requires"
                    " cross-block `goto` transitions or function calls"));
        }
        CHECK_RET(lex_special_block(out, CodeKind::STATE_GOTO, 0));
        goto next;
    }
#line 1041 "src/parse/lexer.cc"
yy174:
	yych = *++cur;
	if (yych == 'f') goto yy193;
	if (yych == 'n') goto yy194;
	goto yy9;
yy175:
	++cur;
	if (lim <= cur) if (!fill(1)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy175;
		goto yy9;
	} else {
		if (yych <= ' ') goto yy175;
		if (yych == '"') {
			yyt1 = cur;
			goto yy195;
		}
		goto yy9;
	}
yy176:
	yych = *++cur;
	if (yych == 'h') goto yy196;
	goto yy9;
yy177:
	yych = *++cur;
	if (yych == 'o') goto yy197;
	goto yy9;
yy178:
	yych = *++cur;
	if (yych == 'e') goto yy198;
	goto yy9;
yy179:
	yych = *++cur;
	if (yych == 'r') goto yy199;
	goto yy9;
yy180:
	yych = *++cur;
	if (yych == 'r') goto yy200;
	goto yy9;
yy181:
	yych = *++cur;
	if (yych == ':') goto yy201;
	goto yy9;
yy182:
	yych = *++cur;
	if (yych == 'e') goto yy202;
	goto yy9;
yy183:
	yych = *++cur;
	if (yych == 'c') goto yy203;
	goto yy9;
yy184:
	yych = *++cur;
	if (yych == 'c') goto yy204;
	goto yy9;
yy185:
	yych = *++cur;
	if (yych == 'e') goto yy205;
	goto yy9;
yy186:
	yych = *++cur;
	if (yych == 'e') goto yy206;
	goto yy9;
yy187:
	yych = *++cur;
	if (yych == 'e') goto yy207;
	goto yy9;
yy188:
	yych = *++cur;
	if (yych == 'e') goto yy208;
	goto yy9;
yy189:
	yych = *++cur;
	if (yych == 'c') goto yy60;
	goto yy9;
yy190:
	yych = *++cur;
	if (yych == '\n') goto yy147;
	if (yych == '\r') goto yy148;
	goto yy9;
yy191:
	++cur;
	if (lim <= cur) if (!fill(1)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yych <= 0x00) goto yy9;
	if (yych == '\n') goto yy9;
	goto yy171;
yy192:
	yych = *++cur;
	if (yych == 's') goto yy209;
	goto yy9;
yy193:
	yych = *++cur;
	if (yych == 'f') goto yy210;
	goto yy9;
yy194:
	++cur;
#line 221 "../src/parse/lexer.re"
	{
        out.gen_raw(tok, ptr);
        out.header_mode(true);
        out.need_header = true;
        CHECK_RET(lex_block_end(out));
        goto next;
    }
#line 1148 "src/parse/lexer.cc"
yy195:
	++cur;
	if ((lim - cur) < 3) if (!fill(3)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yych <= '!') {
		if (yych <= 0x00) goto yy9;
		if (yych == '\n') goto yy9;
		goto yy195;
	} else {
		if (yych <= '"') goto yy211;
		if (yych == '\\') goto yy212;
		goto yy195;
	}
yy196:
	++cur;
#line 183 "../src/parse/lexer.re"
	{
        CHECK_RET(lex_special_block(out, CodeKind::MAXNMATCH, DCONF_FORMAT));
        goto next;
    }
#line 1169 "src/parse/lexer.cc"
yy197:
	yych = *++cur;
	if (yych == 'n') goto yy122;
	goto yy9;
yy198:
	yych = *++cur;
	if (yych == ':') goto yy213;
	goto yy9;
yy199:
	yych = *++cur;
	if (yych == 'e') goto yy214;
	goto yy9;
yy200:
	yych = *++cur;
	if (yych == 'e') goto yy215;
	goto yy9;
yy201:
	yych = *++cur;
	if (yych == 'r') goto yy216;
	goto yy9;
yy202:
	yych = *++cur;
	if (yych == '2') goto yy217;
	goto yy9;
yy203:
	++cur;
	goto yy56;
yy204:
	yych = *++cur;
	if (yych == 'h') goto yy218;
	goto yy9;
yy205:
	yych = *++cur;
	if (yych == '2') goto yy219;
	goto yy9;
yy206:
	yych = *++cur;
	if (yych == '2') goto yy220;
	goto yy9;
yy207:
	yych = *++cur;
	if (yych == '2') goto yy221;
	goto yy9;
yy208:
	yych = *++cur;
	if (yych == '2') goto yy222;
	goto yy9;
yy209:
	++cur;
#line 200 "../src/parse/lexer.re"
	{
        out.cond_enum_autogen = false;
        out.warn_condition_order = false; // see note [condition order]
        uint32_t allow = DCONF_FORMAT | DCONF_SEPARATOR;
        CHECK_RET(lex_special_block(out, CodeKind::COND_ENUM, allow));
        goto next;
    }
#line 1227 "src/parse/lexer.cc"
yy210:
	++cur;
#line 229 "../src/parse/lexer.re"
	{
        out.gen_raw(tok, ptr);
        out.header_mode(false);
        if (globopts->line_dirs) out.gen_stmt(code_line_info_input(alc, cur_loc()));
        CHECK_RET(lex_block_end(out));
        goto next;
    }
#line 1238 "src/parse/lexer.cc"
yy211:
	yych = *++cur;
	if (yych <= 0x1F) {
		if (yych <= '\n') {
			if (yych <= 0x08) goto yy9;
			yyt2 = cur;
			goto yy223;
		} else {
			if (yych == '\r') {
				yyt2 = cur;
				goto yy223;
			}
			goto yy9;
		}
	} else {
		if (yych <= '%') {
			if (yych <= ' ') {
				yyt2 = cur;
				goto yy223;
			}
			if (yych <= '$') goto yy9;
			yyt2 = cur;
			goto yy224;
		} else {
			if (yych == '*') {
				yyt2 = cur;
				goto yy225;
			}
			goto yy9;
		}
	}
yy212:
	++cur;
	if (lim <= cur) if (!fill(1)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yych <= 0x00) goto yy9;
	if (yych == '\n') goto yy9;
	goto yy195;
yy213:
	yych = *++cur;
	if (yych == 'r') goto yy226;
	goto yy9;
yy214:
	yych = *++cur;
	if (yych == '2') goto yy227;
	goto yy9;
yy215:
	yych = *++cur;
	if (yych == '2') goto yy228;
	goto yy9;
yy216:
	yych = *++cur;
	if (yych == 'e') goto yy229;
	goto yy9;
yy217:
	yych = *++cur;
	if (yych == 'c') goto yy105;
	goto yy9;
yy218:
	yych = *++cur;
	if (yych == ':') goto yy230;
	goto yy9;
yy219:
	yych = *++cur;
	if (yych == 'c') goto yy107;
	goto yy9;
yy220:
	yych = *++cur;
	if (yych == 'c') goto yy108;
	goto yy9;
yy221:
	yych = *++cur;
	if (yych == 'c') goto yy109;
	goto yy9;
yy222:
	yych = *++cur;
	if (yych == 'c') goto yy209;
	goto yy9;
yy223:
	++cur;
	x = yyt1;
	y = yyt2;
	cur = yyt2;
#line 240 "../src/parse/lexer.re"
	{
        out.gen_raw(tok, ptr);
        CHECK_RET(lex_block_end(out));
        CHECK_RET(include(getstr(x + 1, y - 1), ptr));
        if (globopts->line_dirs) out.gen_stmt(code_line_info_input(alc, cur_loc()));
        goto next;
    }
#line 1330 "src/parse/lexer.cc"
yy224:
	yych = *++cur;
	if (yych == '}') goto yy223;
	goto yy9;
yy225:
	yych = *++cur;
	if (yych == '/') goto yy223;
	goto yy9;
yy226:
	yych = *++cur;
	if (yych == 'e') goto yy231;
	goto yy9;
yy227:
	yych = *++cur;
	if (yych == 'c') goto yy127;
	goto yy9;
yy228:
	yych = *++cur;
	if (yych == 'c') goto yy129;
	goto yy9;
yy229:
	yych = *++cur;
	if (yych == '2') goto yy232;
	goto yy9;
yy230:
	yych = *++cur;
	if (yych == 'r') goto yy233;
	goto yy9;
yy231:
	yych = *++cur;
	if (yych == '2') goto yy234;
	goto yy9;
yy232:
	yych = *++cur;
	if (yych == 'c') goto yy155;
	goto yy9;
yy233:
	yych = *++cur;
	if (yych == 'e') goto yy235;
	goto yy9;
yy234:
	yych = *++cur;
	if (yych == 'c') goto yy173;
	goto yy9;
yy235:
	yych = *++cur;
	if (yych != '2') goto yy9;
	yych = *++cur;
	if (yych == 'c') goto yy196;
	goto yy9;
}
#line 283 "../src/parse/lexer.re"

}

#undef RET_BLOCK

Ret Input::lex_opt_name(std::string& name) {
    tok = cur;

#line 1391 "src/parse/lexer.cc"
{
	uint8_t yych;
	static const unsigned char yybm[] = {
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128,   0,   0,   0,   0,   0,   0, 
		  0, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128,   0,   0,   0,   0, 128, 
		  0, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
	};
	if ((lim - cur) < 2) if (!fill(2)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *(mar = cur);
	if (yych <= ' ') {
		if (yych <= '\f') {
			if (yych <= 0x08) goto yy237;
			if (yych <= '\n') {
				yyt1 = cur;
				goto yy238;
			}
		} else {
			if (yych <= '\r') {
				yyt1 = cur;
				goto yy238;
			}
			if (yych >= ' ') {
				yyt1 = cur;
				goto yy238;
			}
		}
	} else {
		if (yych <= ')') {
			if (yych == '%') {
				yyt1 = cur;
				goto yy239;
			}
		} else {
			if (yych <= '*') {
				yyt1 = cur;
				goto yy241;
			}
			if (yych == ':') goto yy242;
		}
	}
yy237:
#line 291 "../src/parse/lexer.re"
	{
        RET_FAIL(error_at_cur(
                "ill-formed start of a block: expected a space, a newline, a colon "
                "followed by a block name, or the end of block"));
    }
#line 1468 "src/parse/lexer.cc"
yy238:
	++cur;
	cur = yyt1;
#line 297 "../src/parse/lexer.re"
	{ name.clear();              return Ret::OK; }
#line 1474 "src/parse/lexer.cc"
yy239:
	yych = *++cur;
	if (yych == '}') goto yy238;
yy240:
	cur = mar;
	goto yy237;
yy241:
	yych = *++cur;
	if (yych == '/') goto yy238;
	goto yy240;
yy242:
	yych = *++cur;
	if (yych <= '^') {
		if (yych <= '@') goto yy240;
		if (yych >= '[') goto yy240;
	} else {
		if (yych == '`') goto yy240;
		if (yych >= '{') goto yy240;
	}
yy243:
	++cur;
	if ((lim - cur) < 2) if (!fill(2)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yybm[0+yych] & 128) {
		goto yy243;
	}
	if (yych <= 0x1F) {
		if (yych <= '\n') {
			if (yych <= 0x08) goto yy240;
			yyt1 = cur;
		} else {
			if (yych != '\r') goto yy240;
			yyt1 = cur;
		}
	} else {
		if (yych <= '%') {
			if (yych <= ' ') {
				yyt1 = cur;
				goto yy244;
			}
			if (yych <= '$') goto yy240;
			yyt1 = cur;
			goto yy245;
		} else {
			if (yych == '*') {
				yyt1 = cur;
				goto yy246;
			}
			goto yy240;
		}
	}
yy244:
	++cur;
	cur = yyt1;
#line 298 "../src/parse/lexer.re"
	{ name.assign(tok + 1, cur); return Ret::OK; }
#line 1531 "src/parse/lexer.cc"
yy245:
	yych = *++cur;
	if (yych == '}') goto yy244;
	goto yy240;
yy246:
	yych = *++cur;
	if (yych == '/') goto yy244;
	goto yy240;
}
#line 299 "../src/parse/lexer.re"

}

Ret Input::lex_name_list(BlockNameList** ptail) {
    BlockNameList** phead = ptail;
loop:
    tok = cur;

#line 1550 "src/parse/lexer.cc"
{
	uint8_t yych;
	static const unsigned char yybm[] = {
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128,   0,   0,   0,   0,   0,   0, 
		  0, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128,   0,   0,   0,   0, 128, 
		  0, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
	};
	if ((lim - cur) < 2) if (!fill(2)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *(mar = cur);
	if (yych <= ' ') {
		if (yych <= '\f') {
			if (yych <= 0x08) goto yy248;
			if (yych <= '\n') {
				yyt1 = cur;
				goto yy249;
			}
		} else {
			if (yych <= '\r') {
				yyt1 = cur;
				goto yy249;
			}
			if (yych >= ' ') {
				yyt1 = cur;
				goto yy249;
			}
		}
	} else {
		if (yych <= ')') {
			if (yych == '%') {
				yyt1 = cur;
				goto yy250;
			}
		} else {
			if (yych <= '*') {
				yyt1 = cur;
				goto yy252;
			}
			if (yych == ':') goto yy253;
		}
	}
yy248:
#line 307 "../src/parse/lexer.re"
	{
        RET_FAIL(error_at_cur(
                "ill-formed start of a block: expected a space, a newline, a colon followed by a"
                " list of colon-separated block names, or the end of block `*" "/`"));
    }
#line 1627 "src/parse/lexer.cc"
yy249:
	++cur;
	cur = yyt1;
#line 313 "../src/parse/lexer.re"
	{ *ptail = nullptr; return Ret::OK; }
#line 1633 "src/parse/lexer.cc"
yy250:
	yych = *++cur;
	if (yych == '}') goto yy249;
yy251:
	cur = mar;
	goto yy248;
yy252:
	yych = *++cur;
	if (yych == '/') goto yy249;
	goto yy251;
yy253:
	yych = *++cur;
	if (yych <= '^') {
		if (yych <= '@') goto yy251;
		if (yych >= '[') goto yy251;
	} else {
		if (yych == '`') goto yy251;
		if (yych >= '{') goto yy251;
	}
yy254:
	++cur;
	if (lim <= cur) if (!fill(1)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yybm[0+yych] & 128) {
		goto yy254;
	}
#line 315 "../src/parse/lexer.re"
	{
        BlockNameList *l = alc.alloct<BlockNameList>(1);
        l->name = newcstr(tok + 1, cur, alc);
        l->next = nullptr;
        *ptail = l;
        ptail = &l->next;

        // Check that the added name is unique.
        for (const BlockNameList *p = *phead; p != l; p = p->next) {
            if (strcmp(p->name, l->name) == 0) {
                RET_FAIL(error_at_cur("duplicate block '%s' on the list", p->name));
            }
        }

        goto loop;
    }
#line 1677 "src/parse/lexer.cc"
}
#line 331 "../src/parse/lexer.re"

}

Ret Input::lex_block_end(Output& out, bool allow_garbage) {
    bool multiline = false;
loop: 
#line 1686 "src/parse/lexer.cc"
{
	uint8_t yych;
	static const unsigned char yybm[] = {
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0, 128,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		128,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
	};
	if ((lim - cur) < 2) if (!fill(2)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yybm[0+yych] & 128) {
		goto yy258;
	}
	if (yych <= '\r') {
		if (yych <= 0x08) goto yy256;
		if (yych <= '\n') goto yy259;
		if (yych >= '\r') goto yy260;
	} else {
		if (yych <= '%') {
			if (yych >= '%') goto yy261;
		} else {
			if (yych == '*') goto yy262;
		}
	}
yy256:
	++cur;
yy257:
#line 337 "../src/parse/lexer.re"
	{
        if (allow_garbage && !is_eof()) goto loop;
        RET_FAIL(error_at_cur(
                "ill-formed end of block: expected optional whitespaces followed by `*" "/`"));
    }
#line 1748 "src/parse/lexer.cc"
yy258:
	++cur;
	if (lim <= cur) if (!fill(1)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yybm[0+yych] & 128) {
		goto yy258;
	}
#line 348 "../src/parse/lexer.re"
	{ goto loop; }
#line 1758 "src/parse/lexer.cc"
yy259:
	++cur;
#line 349 "../src/parse/lexer.re"
	{ next_line(); multiline = true; goto loop; }
#line 1763 "src/parse/lexer.cc"
yy260:
	yych = *++cur;
	if (yych == '\n') goto yy259;
	goto yy257;
yy261:
	yych = *++cur;
	if (yych == '}') goto yy263;
	goto yy257;
yy262:
	yych = *++cur;
	if (yych != '/') goto yy257;
yy263:
	++cur;
#line 342 "../src/parse/lexer.re"
	{
        if (multiline && globopts->line_dirs) {
            out.gen_stmt(code_line_info_input(out.allocator, cur_loc()));
        }
        return Ret::OK;
    }
#line 1784 "src/parse/lexer.cc"
}
#line 350 "../src/parse/lexer.re"

}

Ret Input::lex_special_block(Output& out, CodeKind kind, uint32_t mask) {
    const char* fmt = nullptr, *sep = nullptr;
    BlockNameList* blocks;

    out.gen_raw(tok, ptr, globopts->line_dirs);
    CHECK_RET(lex_name_list(&blocks));

loop: 
#line 1798 "src/parse/lexer.cc"
{
	uint8_t yych;
	static const unsigned char yybm[] = {
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0, 128,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		128,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
	};
	if ((lim - cur) < 9) if (!fill(9)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yybm[0+yych] & 128) {
		goto yy267;
	}
	if (yych <= '%') {
		if (yych <= '\f') {
			if (yych <= 0x08) goto yy265;
			if (yych <= '\n') goto yy268;
		} else {
			if (yych <= '\r') goto yy269;
			if (yych >= '%') goto yy270;
		}
	} else {
		if (yych <= 'e') {
			if (yych == '*') goto yy271;
		} else {
			if (yych <= 'f') goto yy272;
			if (yych == 's') goto yy273;
		}
	}
yy265:
	++cur;
yy266:
#line 361 "../src/parse/lexer.re"
	{
        RET_FAIL(error_at_cur(
                "ill-formed directive: expected optional configurations followed by the end of"
                " block `*" "/`"));
    }
#line 1865 "src/parse/lexer.cc"
yy267:
	++cur;
	if (lim <= cur) if (!fill(1)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yybm[0+yych] & 128) {
		goto yy267;
	}
#line 385 "../src/parse/lexer.re"
	{ goto loop; }
#line 1875 "src/parse/lexer.cc"
yy268:
	++cur;
#line 387 "../src/parse/lexer.re"
	{ next_line(); goto loop; }
#line 1880 "src/parse/lexer.cc"
yy269:
	yych = *++cur;
	if (yych == '\n') goto yy268;
	goto yy266;
yy270:
	yych = *++cur;
	if (yych == '}') goto yy274;
	goto yy266;
yy271:
	yych = *++cur;
	if (yych == '/') goto yy274;
	goto yy266;
yy272:
	yych = *(mar = ++cur);
	if (yych == 'o') goto yy275;
	goto yy266;
yy273:
	yych = *(mar = ++cur);
	if (yych == 'e') goto yy277;
	goto yy266;
yy274:
	++cur;
#line 389 "../src/parse/lexer.re"
	{
        if (globopts->line_dirs) out.gen_stmt(code_line_info_output(alc));
        out.gen_stmt(code_fmt(alc, kind, blocks, fmt, sep));
        if (globopts->line_dirs) out.gen_stmt(code_line_info_input(alc, cur_loc()));
        return Ret::OK;
    }
#line 1910 "src/parse/lexer.cc"
yy275:
	yych = *++cur;
	if (yych == 'r') goto yy278;
yy276:
	cur = mar;
	goto yy266;
yy277:
	yych = *++cur;
	if (yych == 'p') goto yy279;
	goto yy276;
yy278:
	yych = *++cur;
	if (yych == 'm') goto yy280;
	goto yy276;
yy279:
	yych = *++cur;
	if (yych == 'a') goto yy281;
	goto yy276;
yy280:
	yych = *++cur;
	if (yych == 'a') goto yy282;
	goto yy276;
yy281:
	yych = *++cur;
	if (yych == 'r') goto yy283;
	goto yy276;
yy282:
	yych = *++cur;
	if (yych == 't') goto yy284;
	goto yy276;
yy283:
	yych = *++cur;
	if (yych == 'a') goto yy285;
	goto yy276;
yy284:
	++cur;
#line 367 "../src/parse/lexer.re"
	{
        if ((mask & DCONF_FORMAT) == 0) {
            RET_FAIL(error_at_cur("unexpected configuration 'format'"));
        }
        CHECK_RET(lex_conf_string_legacy());
        fmt = copystr(tmp_str, alc);
        goto loop;
    }
#line 1956 "src/parse/lexer.cc"
yy285:
	yych = *++cur;
	if (yych != 't') goto yy276;
	yych = *++cur;
	if (yych != 'o') goto yy276;
	yych = *++cur;
	if (yych != 'r') goto yy276;
	++cur;
#line 376 "../src/parse/lexer.re"
	{
        if ((mask & DCONF_SEPARATOR) == 0) {
            RET_FAIL(error_at_cur("unexpected configuration 'separator'"));
        }
        CHECK_RET(lex_conf_string_legacy());
        sep = copystr(tmp_str, alc);
        goto loop;
    }
#line 1974 "src/parse/lexer.cc"
}
#line 395 "../src/parse/lexer.re"

}

#define RET_TOK(t) do { token = t; return Ret::OK; } while(0)

Ret Input::lex_block(YYSTYPE* yylval, Ast& ast, int& token) {
    const uint8_t* p, *x, *y;
scan:
    tok = cur;
    location = cur_loc();

#line 1988 "src/parse/lexer.cc"
{
	uint8_t yych;
	unsigned int yyaccept = 0;
	static const unsigned char yybm[] = {
		  0, 128, 128, 128, 128, 128, 128, 128, 
		128, 144,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		144, 128,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		224, 224, 224, 224, 224, 224, 224, 224, 
		224, 224, 128, 128, 128, 128, 128, 128, 
		128, 160, 160, 160, 160, 160, 160, 160, 
		160, 160, 160, 160, 160, 160, 160, 160, 
		160, 160, 160, 160, 160, 160, 160, 160, 
		160, 160, 160, 128,   0, 128, 128, 160, 
		128, 160, 160, 160, 160, 160, 160, 160, 
		160, 160, 160, 160, 160, 160, 160, 160, 
		160, 160, 160, 160, 160, 160, 160, 160, 
		160, 160, 160, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
	};
	if ((lim - cur) < 9) if (!fill(9)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yybm[0+yych] & 16) {
		goto yy289;
	}
	if (yych <= '9') {
		if (yych <= '$') {
			if (yych <= '\r') {
				if (yych <= 0x08) goto yy287;
				if (yych <= '\n') goto yy290;
				if (yych >= '\r') goto yy292;
			} else {
				if (yych <= '!') {
					if (yych >= ' ') goto yy293;
				} else {
					if (yych <= '"') goto yy295;
					if (yych <= '#') goto yy296;
					goto yy297;
				}
			}
		} else {
			if (yych <= '*') {
				if (yych <= '&') {
					if (yych <= '%') goto yy298;
				} else {
					if (yych <= '\'') goto yy299;
					if (yych <= ')') goto yy297;
					goto yy300;
				}
			} else {
				if (yych <= '-') {
					if (yych <= '+') goto yy297;
				} else {
					if (yych <= '.') goto yy301;
					if (yych <= '/') goto yy302;
					goto yy303;
				}
			}
		}
	} else {
		if (yych <= '[') {
			if (yych <= '=') {
				if (yych <= ':') goto yy304;
				if (yych <= ';') goto yy297;
				if (yych <= '<') goto yy305;
				goto yy306;
			} else {
				if (yych <= '?') {
					if (yych >= '?') goto yy297;
				} else {
					if (yych <= '@') goto yy296;
					if (yych <= 'Z') goto yy307;
					goto yy309;
				}
			}
		} else {
			if (yych <= 'q') {
				if (yych <= '^') {
					if (yych <= '\\') goto yy297;
				} else {
					if (yych != '`') goto yy307;
				}
			} else {
				if (yych <= 'z') {
					if (yych <= 'r') goto yy310;
					goto yy307;
				} else {
					if (yych <= '{') goto yy311;
					if (yych <= '|') goto yy297;
				}
			}
		}
	}
yy287:
	++cur;
yy288:
#line 545 "../src/parse/lexer.re"
	{
        if (globopts->flex_syntax && globopts->input_encoding == Enc::Type::UTF8) {
            // Try to lex this as a raw UTF-8 code point (not captured by the `name` rule above
            // because it is restricted to alphanumeric ASCII characters and underscore).
            --cur;
            uint32_t c;
            CHECK_RET(lex_cls_chr(c));
            ast.temp_chars.push_back({c, tok_loc()});
            yylval->regexp = ast.str(tok_loc(), false);
            RET_TOK(TOKEN_REGEXP);
        }
        RET_FAIL(error_at_tok("unexpected character: '%c'", *tok));
    }
#line 2116 "src/parse/lexer.cc"
yy289:
	++cur;
	if (lim <= cur) if (!fill(1)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yybm[0+yych] & 16) {
		goto yy289;
	}
#line 532 "../src/parse/lexer.re"
	{ goto scan; }
#line 2126 "src/parse/lexer.cc"
yy290:
	yyaccept = 0;
	yych = *(mar = ++cur);
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy313;
	} else {
		if (yych <= ' ') goto yy313;
		if (yych == '#') goto yy315;
	}
yy291:
#line 536 "../src/parse/lexer.re"
	{
        next_line();
        if (mode == LexMode::FLEX_NAME) {
            mode = LexMode::NORMAL;
            RET_TOK(TOKEN_FID_END);
        }
        goto scan;
    }
#line 2146 "src/parse/lexer.cc"
yy292:
	yych = *++cur;
	if (yych == '\n') goto yy290;
	goto yy288;
yy293:
	yyaccept = 1;
	yych = *(mar = ++cur);
	if (yych == 'i') goto yy316;
	if (yych == 'u') goto yy317;
yy294:
#line 432 "../src/parse/lexer.re"
	{ RET_TOK(*tok); }
#line 2159 "src/parse/lexer.cc"
yy295:
	++cur;
#line 423 "../src/parse/lexer.re"
	{ CHECK_RET(lex_str(ast, '"',   yylval->regexp)); RET_TOK(TOKEN_REGEXP); }
#line 2164 "src/parse/lexer.cc"
yy296:
	yych = *++cur;
	if (yych <= '^') {
		if (yych <= '@') goto yy288;
		if (yych <= 'Z') goto yy318;
		goto yy288;
	} else {
		if (yych == '`') goto yy288;
		if (yych <= 'z') goto yy318;
		goto yy288;
	}
yy297:
	++cur;
	goto yy294;
yy298:
	yych = *++cur;
	if (yych == '}') goto yy320;
	goto yy288;
yy299:
	++cur;
#line 422 "../src/parse/lexer.re"
	{ CHECK_RET(lex_str(ast, '\'',  yylval->regexp)); RET_TOK(TOKEN_REGEXP); }
#line 2187 "src/parse/lexer.cc"
yy300:
	yych = *++cur;
	if (yych == '/') goto yy320;
	goto yy294;
yy301:
	++cur;
#line 530 "../src/parse/lexer.re"
	{ yylval->regexp = ast.dot(tok_loc()); RET_TOK(TOKEN_REGEXP); }
#line 2196 "src/parse/lexer.cc"
yy302:
	yych = *++cur;
	if (yych == '*') goto yy321;
	if (yych == '/') goto yy322;
	goto yy294;
yy303:
	++cur;
#line 497 "../src/parse/lexer.re"
	{
        if (!globopts->flex_syntax) {
            RET_FAIL(error_at_tok("unexpected character: '%c'", *tok));
        }
        ast.temp_chars.push_back({*tok, tok_loc()});
        yylval->regexp = ast.str(tok_loc(), false);
        RET_TOK(TOKEN_REGEXP);
    }
#line 2213 "src/parse/lexer.cc"
yy304:
	yych = *++cur;
	if (yych == '=') goto yy323;
	goto yy288;
yy305:
	++cur;
#line 415 "../src/parse/lexer.re"
	{ return lex_clist(ast, token); }
#line 2222 "src/parse/lexer.cc"
yy306:
	yyaccept = 1;
	yych = *(mar = ++cur);
	if (yych == '>') goto yy325;
	goto yy294;
yy307:
	++cur;
	if (lim <= cur) if (!fill(1)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
yy308:
	if (yybm[0+yych] & 32) {
		goto yy307;
	}
#line 476 "../src/parse/lexer.re"
	{
        bool yes;
        CHECK_RET(lex_namedef_context_re2c(yes));
        if (!globopts->flex_syntax || yes) {
            yylval->cstr = ast.cstr_local(tok, cur);
            RET_TOK(TOKEN_ID);
        }
        CHECK_RET(lex_namedef_context_flex(yes));
        if (yes) {
            yylval->cstr = ast.cstr_local(tok, cur);
            mode = LexMode::FLEX_NAME;
            RET_TOK(TOKEN_FID);
        }
        // consume one character, otherwise we risk breaking operator precedence in cases like
        // `ab*`: it should be `a(b)*`, not `(ab)*`
        cur = tok + 1;
        ast.temp_chars.push_back({tok[0], tok_loc()});
        yylval->regexp = ast.str(tok_loc(), false);
        RET_TOK(TOKEN_REGEXP);
    }
#line 2257 "src/parse/lexer.cc"
yy309:
	yych = *++cur;
	if (yych == '^') goto yy326;
#line 424 "../src/parse/lexer.re"
	{ CHECK_RET(lex_cls(ast, false, yylval->regexp)); RET_TOK(TOKEN_REGEXP); }
#line 2263 "src/parse/lexer.cc"
yy310:
	yych = *++cur;
	if (yych == 'e') goto yy327;
	goto yy308;
yy311:
	yyaccept = 2;
	yych = *(mar = ++cur);
	if (yybm[0+yych] & 64) {
		goto yy330;
	}
	if (yych <= 'Z') {
		if (yych == ',') goto yy328;
		if (yych >= 'A') goto yy331;
	} else {
		if (yych <= '_') {
			if (yych >= '_') goto yy331;
		} else {
			if (yych <= '`') goto yy312;
			if (yych <= 'z') goto yy331;
		}
	}
yy312:
#line 407 "../src/parse/lexer.re"
	{ CHECK_RET(lex_code_in_braces(yylval, ast)); RET_TOK(TOKEN_CODE); }
#line 2288 "src/parse/lexer.cc"
yy313:
	++cur;
	if (lim <= cur) if (!fill(1)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy313;
	} else {
		if (yych <= ' ') goto yy313;
		if (yych == '#') goto yy315;
	}
yy314:
	cur = mar;
	if (yyaccept <= 3) {
		if (yyaccept <= 1) {
			if (yyaccept == 0) {
				goto yy291;
			} else {
				goto yy294;
			}
		} else {
			if (yyaccept == 2) {
				goto yy312;
			} else {
				goto yy324;
			}
		}
	} else {
		if (yyaccept <= 5) {
			if (yyaccept == 4) {
				goto yy329;
			} else {
				goto yy344;
			}
		} else {
			goto yy363;
		}
	}
yy315:
	++cur;
	if ((lim - cur) < 5) if (!fill(5)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy315;
		goto yy314;
	} else {
		if (yych <= ' ') goto yy315;
		if (yych == 'l') goto yy332;
		goto yy314;
	}
yy316:
	yych = *++cur;
	if (yych == 'n') goto yy333;
	goto yy314;
yy317:
	yych = *++cur;
	if (yych == 's') goto yy334;
	goto yy314;
yy318:
	++cur;
	if (lim <= cur) if (!fill(1)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yych <= 'Z') {
		if (yych <= '/') goto yy319;
		if (yych <= '9') goto yy318;
		if (yych >= 'A') goto yy318;
	} else {
		if (yych <= '_') {
			if (yych >= '_') goto yy318;
		} else {
			if (yych <= '`') goto yy319;
			if (yych <= 'z') goto yy318;
		}
	}
yy319:
#line 427 "../src/parse/lexer.re"
	{
        yylval->regexp = ast.tag(tok_loc(), ast.cstr_global(tok + 1, cur), tok[0] == '#');
        RET_TOK(TOKEN_REGEXP);
    }
#line 2368 "src/parse/lexer.cc"
yy320:
	++cur;
#line 420 "../src/parse/lexer.re"
	{ tok = cur; RET_TOK(0); }
#line 2373 "src/parse/lexer.cc"
yy321:
	++cur;
#line 418 "../src/parse/lexer.re"
	{ CHECK_RET(lex_c_comment());   goto scan; }
#line 2378 "src/parse/lexer.cc"
yy322:
	++cur;
#line 417 "../src/parse/lexer.re"
	{ CHECK_RET(lex_cpp_comment()); goto scan; }
#line 2383 "src/parse/lexer.cc"
yy323:
	yyaccept = 3;
	yych = *(mar = ++cur);
	if (yych == '>') goto yy325;
yy324:
#line 408 "../src/parse/lexer.re"
	{ CHECK_RET(lex_code_indented(yylval, ast));  RET_TOK(TOKEN_CODE); }
#line 2391 "src/parse/lexer.cc"
yy325:
	++cur;
	if (lim <= cur) if (!fill(1)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yych <= '@') {
		if (yych <= '\t') {
			if (yych <= 0x08) goto yy314;
			goto yy325;
		} else {
			if (yych == ' ') goto yy325;
			goto yy314;
		}
	} else {
		if (yych <= '_') {
			if (yych <= 'Z') {
				yyt1 = cur;
				goto yy335;
			}
			if (yych <= '^') goto yy314;
			yyt1 = cur;
			goto yy335;
		} else {
			if (yych <= '`') goto yy314;
			if (yych <= 'z') {
				yyt1 = cur;
				goto yy335;
			}
			goto yy314;
		}
	}
yy326:
	++cur;
#line 425 "../src/parse/lexer.re"
	{ CHECK_RET(lex_cls(ast, true,  yylval->regexp)); RET_TOK(TOKEN_REGEXP); }
#line 2426 "src/parse/lexer.cc"
yy327:
	yych = *++cur;
	if (yych == '2') goto yy337;
	goto yy308;
yy328:
	++cur;
yy329:
#line 461 "../src/parse/lexer.re"
	{
        RET_FAIL(error_at_tok(
                "illegal closure form, use '{n}', '{n,}', '{n,m}' where n and m are numbers"));
    }
#line 2439 "src/parse/lexer.cc"
yy330:
	++cur;
	if ((lim - cur) < 2) if (!fill(2)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yybm[0+yych] & 64) {
		goto yy330;
	}
	if (yych == ',') {
		yyt1 = cur;
		goto yy338;
	}
	if (yych == '}') goto yy339;
	goto yy314;
yy331:
	++cur;
	if (lim <= cur) if (!fill(1)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yych <= '^') {
		if (yych <= '9') {
			if (yych <= '/') goto yy314;
			goto yy331;
		} else {
			if (yych <= '@') goto yy314;
			if (yych <= 'Z') goto yy331;
			goto yy314;
		}
	} else {
		if (yych <= 'z') {
			if (yych == '`') goto yy314;
			goto yy331;
		} else {
			if (yych == '}') goto yy340;
			goto yy314;
		}
	}
yy332:
	yych = *++cur;
	if (yych == 'i') goto yy341;
	goto yy314;
yy333:
	yych = *++cur;
	if (yych == 'c') goto yy342;
	goto yy314;
yy334:
	yych = *++cur;
	if (yych == 'e') goto yy343;
	goto yy314;
yy335:
	++cur;
	if (lim <= cur) if (!fill(1)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yych <= 'Z') {
		if (yych <= '/') goto yy336;
		if (yych <= '9') goto yy335;
		if (yych >= 'A') goto yy335;
	} else {
		if (yych <= '_') {
			if (yych >= '_') goto yy335;
		} else {
			if (yych <= '`') goto yy336;
			if (yych <= 'z') goto yy335;
		}
	}
yy336:
	p = yyt1;
#line 410 "../src/parse/lexer.re"
	{
        yylval->cstr = ast.cstr_global(p, cur);
        RET_TOK(tok[0] == ':' ? TOKEN_CJUMP : TOKEN_CNEXT);
    }
#line 2510 "src/parse/lexer.cc"
yy337:
	yych = *++cur;
	if (yych == 'c') goto yy345;
	goto yy308;
yy338:
	yyaccept = 4;
	yych = *(mar = ++cur);
	if (yych <= '/') goto yy329;
	if (yych <= '9') goto yy346;
	if (yych == '}') goto yy347;
	goto yy329;
yy339:
	++cur;
#line 434 "../src/parse/lexer.re"
	{
        if (!s_to_u32_unsafe (tok + 1, cur - 1, yylval->bounds.min)) {
            RET_FAIL(error_at_tok("repetition count overflow"));
        }
        yylval->bounds.max = yylval->bounds.min;
        RET_TOK(TOKEN_CLOSESIZE);
    }
#line 2532 "src/parse/lexer.cc"
yy340:
	++cur;
#line 466 "../src/parse/lexer.re"
	{
        if (!globopts->flex_syntax) {
            RET_FAIL(error_at_tok("curly braces for names only allowed with -F switch"));
        }
        yylval->cstr = ast.cstr_local(tok + 1, cur - 1);
        RET_TOK(TOKEN_ID);
    }
#line 2543 "src/parse/lexer.cc"
yy341:
	yych = *++cur;
	if (yych == 'n') goto yy348;
	goto yy314;
yy342:
	yych = *++cur;
	if (yych == 'l') goto yy349;
	goto yy314;
yy343:
	yyaccept = 5;
	yych = *(mar = ++cur);
	if (yych == ':') goto yy350;
yy344:
#line 523 "../src/parse/lexer.re"
	{
        RET_FAIL(error_at_tok(
                "ill-formed use directive: expected `!use` followed by a colon, a block name,"
                " optional spaces, a semicolon, and finally a space, a newline, or the end of"
                " block"));
    }
#line 2564 "src/parse/lexer.cc"
yy345:
	yych = *++cur;
	if (yych == ':') goto yy351;
	goto yy308;
yy346:
	++cur;
	if (lim <= cur) if (!fill(1)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yych <= '/') goto yy314;
	if (yych <= '9') goto yy346;
	if (yych == '}') goto yy352;
	goto yy314;
yy347:
	++cur;
#line 453 "../src/parse/lexer.re"
	{
        if (!s_to_u32_unsafe (tok + 1, cur - 2, yylval->bounds.min)) {
            RET_FAIL(error_at_tok("repetition lower bound overflow"));
        }
        yylval->bounds.max = std::numeric_limits<uint32_t>::max();
        RET_TOK(TOKEN_CLOSESIZE);
    }
#line 2587 "src/parse/lexer.cc"
yy348:
	yych = *++cur;
	if (yych == 'e') goto yy353;
	goto yy314;
yy349:
	yych = *++cur;
	if (yych == 'u') goto yy354;
	goto yy314;
yy350:
	yych = *++cur;
	if (yych <= '^') {
		if (yych <= '@') goto yy314;
		if (yych <= 'Z') {
			yyt1 = cur;
			goto yy355;
		}
		goto yy314;
	} else {
		if (yych == '`') goto yy314;
		if (yych <= 'z') {
			yyt1 = cur;
			goto yy355;
		}
		goto yy314;
	}
yy351:
	++cur;
#line 474 "../src/parse/lexer.re"
	{ RET_TOK(TOKEN_CONF); }
#line 2617 "src/parse/lexer.cc"
yy352:
	++cur;
	p = yyt1;
#line 442 "../src/parse/lexer.re"
	{
        if (!s_to_u32_unsafe(tok + 1, p, yylval->bounds.min)) {
            RET_FAIL(error_at_tok("repetition lower bound overflow"));
        } else if (!s_to_u32_unsafe(p + 1, cur - 1, yylval->bounds.max)) {
            RET_FAIL(error_at_tok("repetition upper bound overflow"));
        } else if (yylval->bounds.min > yylval->bounds.max) {
            RET_FAIL(error_at_tok("repetition lower bound exceeds upper bound"));
        }
        RET_TOK(TOKEN_CLOSESIZE);
    }
#line 2632 "src/parse/lexer.cc"
yy353:
	yych = *++cur;
	if (yych <= '0') goto yy357;
	if (yych <= '9') goto yy314;
	goto yy357;
yy354:
	yych = *++cur;
	if (yych == 'd') goto yy358;
	goto yy314;
yy355:
	++cur;
	if ((lim - cur) < 3) if (!fill(3)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yych <= ':') {
		if (yych <= 0x1F) {
			if (yych == '\t') {
				yyt2 = cur;
				goto yy359;
			}
			goto yy314;
		} else {
			if (yych <= ' ') {
				yyt2 = cur;
				goto yy359;
			}
			if (yych <= '/') goto yy314;
			if (yych <= '9') goto yy355;
			goto yy314;
		}
	} else {
		if (yych <= '^') {
			if (yych <= ';') {
				yyt2 = cur;
				goto yy360;
			}
			if (yych <= '@') goto yy314;
			if (yych <= 'Z') goto yy355;
			goto yy314;
		} else {
			if (yych == '`') goto yy314;
			if (yych <= 'z') goto yy355;
			goto yy314;
		}
	}
yy356:
	++cur;
	if (lim <= cur) if (!fill(1)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
yy357:
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy356;
		goto yy314;
	} else {
		if (yych <= ' ') goto yy356;
		if (yych <= '0') goto yy314;
		if (yych <= '9') {
			yyt1 = cur;
			goto yy361;
		}
		goto yy314;
	}
yy358:
	yych = *++cur;
	if (yych == 'e') goto yy362;
	goto yy314;
yy359:
	++cur;
	if ((lim - cur) < 3) if (!fill(3)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy359;
		goto yy314;
	} else {
		if (yych <= ' ') goto yy359;
		if (yych != ';') goto yy314;
	}
yy360:
	yych = *++cur;
	if (yych <= 0x1F) {
		if (yych <= '\n') {
			if (yych <= 0x08) goto yy314;
			yyt3 = cur;
			goto yy364;
		} else {
			if (yych == '\r') {
				yyt3 = cur;
				goto yy364;
			}
			goto yy314;
		}
	} else {
		if (yych <= '%') {
			if (yych <= ' ') {
				yyt3 = cur;
				goto yy364;
			}
			if (yych <= '$') goto yy314;
			yyt3 = cur;
			goto yy365;
		} else {
			if (yych == '*') {
				yyt3 = cur;
				goto yy366;
			}
			goto yy314;
		}
	}
yy361:
	++cur;
	if ((lim - cur) < 2) if (!fill(2)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yych <= '\r') {
		if (yych <= '\t') {
			if (yych <= 0x08) goto yy314;
			goto yy367;
		} else {
			if (yych <= '\n') goto yy368;
			if (yych <= '\f') goto yy314;
			goto yy369;
		}
	} else {
		if (yych <= ' ') {
			if (yych <= 0x1F) goto yy314;
			goto yy367;
		} else {
			if (yych <= '/') goto yy314;
			if (yych <= '9') goto yy361;
			goto yy314;
		}
	}
yy362:
	yyaccept = 6;
	yych = *(mar = ++cur);
	if (yych == '\t') goto yy370;
	if (yych == ' ') goto yy370;
yy363:
#line 510 "../src/parse/lexer.re"
	{
        RET_FAIL(error_at_tok(
                "ill-formed include directive: expected `!include` followed by spaces, a"
                " double-quoted file path, optional spaces, a semicolon, and finally a space, a"
                " newline, or the end of block"));
    }
#line 2776 "src/parse/lexer.cc"
yy364:
	++cur;
	x = yyt1;
	y = yyt2;
	cur = yyt3;
#line 517 "../src/parse/lexer.re"
	{
        // Save the name of the used block in a temporary buffer (ensure it is empty).
        CHECK(ast.temp_blockname.empty());
        ast.temp_blockname.assign(x, y);
        RET_TOK(TOKEN_BLOCK);
    }
#line 2789 "src/parse/lexer.cc"
yy365:
	yych = *++cur;
	if (yych == '}') goto yy364;
	goto yy314;
yy366:
	yych = *++cur;
	if (yych == '/') goto yy364;
	goto yy314;
yy367:
	++cur;
	if (lim <= cur) if (!fill(1)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy367;
		goto yy314;
	} else {
		if (yych <= ' ') goto yy367;
		if (yych == '"') goto yy371;
		goto yy314;
	}
yy368:
	++cur;
	cur = yyt1;
#line 534 "../src/parse/lexer.re"
	{ CHECK_RET(set_sourceline()); RET_TOK(TOKEN_LINE_INFO); }
#line 2815 "src/parse/lexer.cc"
yy369:
	yych = *++cur;
	if (yych == '\n') goto yy368;
	goto yy314;
yy370:
	++cur;
	if (lim <= cur) if (!fill(1)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy370;
		goto yy314;
	} else {
		if (yych <= ' ') goto yy370;
		if (yych == '"') {
			yyt1 = cur;
			goto yy372;
		}
		goto yy314;
	}
yy371:
	++cur;
	if ((lim - cur) < 3) if (!fill(3)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yybm[0+yych] & 128) {
		goto yy371;
	}
	if (yych <= '\n') goto yy314;
	if (yych <= '"') goto yy373;
	goto yy374;
yy372:
	++cur;
	if ((lim - cur) < 4) if (!fill(4)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yych <= '!') {
		if (yych <= 0x00) goto yy314;
		if (yych == '\n') goto yy314;
		goto yy372;
	} else {
		if (yych <= '"') goto yy375;
		if (yych == '\\') goto yy376;
		goto yy372;
	}
yy373:
	yych = *++cur;
	if (yych == '\n') goto yy368;
	if (yych == '\r') goto yy369;
	goto yy314;
yy374:
	++cur;
	if (lim <= cur) if (!fill(1)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yych <= 0x00) goto yy314;
	if (yych == '\n') goto yy314;
	goto yy371;
yy375:
	yych = *++cur;
	if (yych <= 0x1F) {
		if (yych == '\t') {
			yyt2 = cur;
			goto yy377;
		}
		goto yy314;
	} else {
		if (yych <= ' ') {
			yyt2 = cur;
			goto yy377;
		}
		if (yych == ';') {
			yyt2 = cur;
			goto yy378;
		}
		goto yy314;
	}
yy376:
	++cur;
	if (lim <= cur) if (!fill(1)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yych <= 0x00) goto yy314;
	if (yych == '\n') goto yy314;
	goto yy372;
yy377:
	++cur;
	if ((lim - cur) < 3) if (!fill(3)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy377;
		goto yy314;
	} else {
		if (yych <= ' ') goto yy377;
		if (yych != ';') goto yy314;
	}
yy378:
	yych = *++cur;
	if (yych <= 0x1F) {
		if (yych <= '\n') {
			if (yych <= 0x08) goto yy314;
			yyt3 = cur;
		} else {
			if (yych != '\r') goto yy314;
			yyt3 = cur;
		}
	} else {
		if (yych <= '%') {
			if (yych <= ' ') {
				yyt3 = cur;
				goto yy379;
			}
			if (yych <= '$') goto yy314;
			yyt3 = cur;
			goto yy380;
		} else {
			if (yych == '*') {
				yyt3 = cur;
				goto yy381;
			}
			goto yy314;
		}
	}
yy379:
	++cur;
	x = yyt1;
	y = yyt2;
	cur = yyt3;
#line 506 "../src/parse/lexer.re"
	{
        CHECK_RET(include(getstr(x + 1, y - 1), tok));
        goto scan;
    }
#line 2944 "src/parse/lexer.cc"
yy380:
	yych = *++cur;
	if (yych == '}') goto yy379;
	goto yy314;
yy381:
	yych = *++cur;
	if (yych == '/') goto yy379;
	goto yy314;
}
#line 558 "../src/parse/lexer.re"

}

#undef RET_TOK

Ret Input::lex_namedef_context_re2c(bool& yes) {

#line 2962 "src/parse/lexer.cc"
{
	uint8_t yych;
	static const unsigned char yybm[] = {
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0, 128,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		128,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
	};
	if ((lim - cur) < 2) if (!fill(2)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *(mar = cur);
	if (yych <= 0x1F) {
		if (yych == '\t') {
			yyt1 = cur;
			goto yy384;
		}
	} else {
		if (yych <= ' ') {
			yyt1 = cur;
			goto yy384;
		}
		if (yych == '=') {
			yyt1 = cur;
			goto yy386;
		}
	}
yy383:
#line 566 "../src/parse/lexer.re"
	{ yes = false; return Ret::OK; }
#line 3019 "src/parse/lexer.cc"
yy384:
	++cur;
	if ((lim - cur) < 2) if (!fill(2)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yybm[0+yych] & 128) {
		goto yy384;
	}
	if (yych == '=') goto yy386;
yy385:
	cur = mar;
	goto yy383;
yy386:
	yych = *++cur;
	if (yych == '>') goto yy385;
	++cur;
	cur = yyt1;
#line 565 "../src/parse/lexer.re"
	{ yes = true;  return Ret::OK; }
#line 3038 "src/parse/lexer.cc"
}
#line 567 "../src/parse/lexer.re"

}

Ret Input::lex_namedef_context_flex(bool& yes) {

#line 3046 "src/parse/lexer.cc"
{
	uint8_t yych;
	static const unsigned char yybm[] = {
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0, 128,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		128,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
	};
	if (lim <= cur) if (!fill(1)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yych == '\t') {
		yyt1 = cur;
		goto yy388;
	}
	if (yych == ' ') {
		yyt1 = cur;
		goto yy388;
	}
#line 574 "../src/parse/lexer.re"
	{ yes = false; return Ret::OK; }
#line 3095 "src/parse/lexer.cc"
yy388:
	++cur;
	if (lim <= cur) if (!fill(1)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yybm[0+yych] & 128) {
		goto yy388;
	}
	if (yych <= '<') {
		if (yych == ':') goto yy389;
	} else {
		if (yych <= '=') goto yy389;
		if (yych == '{') goto yy389;
	}
	cur = yyt1;
#line 573 "../src/parse/lexer.re"
	{ yes = true;  return Ret::OK; }
#line 3112 "src/parse/lexer.cc"
yy389:
	++cur;
	cur = yyt1;
#line 572 "../src/parse/lexer.re"
	{ yes = false; return Ret::OK; }
#line 3118 "src/parse/lexer.cc"
}
#line 575 "../src/parse/lexer.re"

}

Ret Input::lex_clist(Ast& ast, int& token) {
    token = TOKEN_CLIST;
    std::set<std::string>& cl = ast.temp_condlist;
    // Due to the re2c grammar parser must reduce each condition list before shifing a new one.
    CHECK(cl.empty());

#line 3130 "src/parse/lexer.cc"
{
	uint8_t yych;
	static const unsigned char yybm[] = {
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0, 128,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		128,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
	};
	goto yy390;
yy391:
	++cur;
yy390:
	if (lim <= cur) if (!fill(1)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yybm[0+yych] & 128) {
		goto yy391;
	}
	if (yych <= 0x1F) goto yy392;
	if (yych <= '!') goto yy393;
	if (yych == '>') goto yy394;
yy392:
#line 586 "../src/parse/lexer.re"
	{ goto cond; }
#line 3182 "src/parse/lexer.cc"
yy393:
	++cur;
	if (lim <= cur) if (!fill(1)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yych == '\t') goto yy393;
	if (yych == ' ') goto yy393;
#line 584 "../src/parse/lexer.re"
	{ token = TOKEN_CSETUP; goto cond; }
#line 3191 "src/parse/lexer.cc"
yy394:
	++cur;
#line 585 "../src/parse/lexer.re"
	{ token = TOKEN_CZERO;  goto end; }
#line 3196 "src/parse/lexer.cc"
}
#line 587 "../src/parse/lexer.re"

cond:
    tok = cur;

#line 3203 "src/parse/lexer.cc"
{
	uint8_t yych;
	static const unsigned char yybm[] = {
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128,   0,   0,   0,   0,   0,   0, 
		  0, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128,   0,   0,   0,   0, 128, 
		  0, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
	};
	if (lim <= cur) if (!fill(1)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yych <= 'Z') {
		if (yych == '*') goto yy397;
		if (yych >= 'A') goto yy398;
	} else {
		if (yych <= '_') {
			if (yych >= '_') goto yy398;
		} else {
			if (yych <= '`') goto yy396;
			if (yych <= 'z') goto yy398;
		}
	}
yy396:
	++cur;
#line 593 "../src/parse/lexer.re"
	{ goto error; }
#line 3257 "src/parse/lexer.cc"
yy397:
	++cur;
#line 592 "../src/parse/lexer.re"
	{ if (!cl.empty()) goto error; cl.insert("*"); goto next; }
#line 3262 "src/parse/lexer.cc"
yy398:
	++cur;
	if (lim <= cur) if (!fill(1)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yybm[0+yych] & 128) {
		goto yy398;
	}
#line 591 "../src/parse/lexer.re"
	{ cl.insert(getstr(tok, cur)); goto next; }
#line 3272 "src/parse/lexer.cc"
}
#line 594 "../src/parse/lexer.re"

next: 
#line 3277 "src/parse/lexer.cc"
{
	uint8_t yych;
	static const unsigned char yybm[] = {
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0, 128,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		128,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
	};
	if ((lim - cur) < 2) if (!fill(2)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yych <= ' ') {
		if (yych == '\t') goto yy401;
		if (yych >= ' ') goto yy401;
	} else {
		if (yych <= ',') {
			if (yych >= ',') goto yy402;
		} else {
			if (yych == '>') goto yy403;
		}
	}
	++cur;
yy400:
#line 598 "../src/parse/lexer.re"
	{ goto error; }
#line 3330 "src/parse/lexer.cc"
yy401:
	yych = *(mar = ++cur);
	if (yych <= ' ') {
		if (yych == '\t') goto yy404;
		if (yych <= 0x1F) goto yy400;
		goto yy404;
	} else {
		if (yych <= ',') {
			if (yych <= '+') goto yy400;
		} else {
			if (yych == '>') goto yy403;
			goto yy400;
		}
	}
yy402:
	++cur;
	if (lim <= cur) if (!fill(1)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yybm[0+yych] & 128) {
		goto yy402;
	}
#line 596 "../src/parse/lexer.re"
	{ goto cond; }
#line 3354 "src/parse/lexer.cc"
yy403:
	++cur;
#line 597 "../src/parse/lexer.re"
	{ goto end; }
#line 3359 "src/parse/lexer.cc"
yy404:
	++cur;
	if (lim <= cur) if (!fill(1)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yych <= ' ') {
		if (yych == '\t') goto yy404;
		if (yych >= ' ') goto yy404;
	} else {
		if (yych <= ',') {
			if (yych >= ',') goto yy402;
		} else {
			if (yych == '>') goto yy403;
		}
	}
	cur = mar;
	goto yy400;
}
#line 599 "../src/parse/lexer.re"

end:
    // semantic value `yylval` is implicitly passed in temporary condition list
    return Ret::OK;
error:
    cl.clear();
    RET_FAIL(error_at_cur("syntax error in condition list"));
}

Ret Input::process_semact(YYSTYPE* yylval, Ast& ast, const uint8_t* p, const uint8_t* q) {
    const char* text = "";
    if (globopts->indentation_sensitive) {
        // Cut off any leading or trailing newlines to make the code uniform.
        while (p <= q && *p == '\n') ++p;
        while (p <= q && *q == '\n') --q;

        if (p <= q) {
            // Split semantic action by newlines (note: last character `*q` is not a newline).
            // Drop blank lines (this simplifies the code below that removes indentation).
            auto is_blank = [](const uint8_t* s, const uint8_t* e) {
                while (s < e && is_space(*s)) ++s;
                return s == e;
            };
            tmp_list.clear();
            for (const uint8_t* s = p; s < q; ++s) {
                if (*s == '\n') {
                    if (!is_blank(p, s)) tmp_list.push_back(std::string(p, s + 1));
                    p = s + 1;
                }
            }
            if (!is_blank(p, q + 1)) tmp_list.push_back(std::string(p, q + 1) + "\n");

            if (!tmp_list.empty()) {
                // Find first line indentation and use it as base indentation.
                const std::string& first = tmp_list[0];
                uint32_t indent = 0;
                while (is_space_nonl(static_cast<uint8_t>(first[indent]))) ++indent;
                std::string indstr = first.substr(0, indent);

                // Cut off base indentation from every line and glue them together.
                tmp_str.clear();
                for (std::string& line: tmp_list) {
                    if (line.compare(0, indent, indstr) == 0) {
                        tmp_str += line.substr(indent, std::string::npos); // remove indent
                    } else {
                        RET_FAIL(error_at_tok("inconsistent indentation in semantic action"));
                    }
                }
                text = copystr(tmp_str, alc);
            }
        }
    } else {
        // copy the entire semantic action verbatim
        text = ast.cstr_global(p, q + 1);
    }

    yylval->semact = ast.sem_act(tok_loc(), text, nullptr, false);
    return Ret::OK;
}

Ret Input::lex_code_indented(YYSTYPE* yylval, Ast& ast) {
    tok = cur;
code: 
#line 3441 "src/parse/lexer.cc"
{
	uint8_t yych;
	if ((lim - cur) < 2) if (!fill(2)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yych <= '\'') {
		if (yych <= '\r') {
			if (yych == '\n') goto yy407;
			if (yych >= '\r') goto yy408;
		} else {
			if (yych == '"') goto yy409;
			if (yych >= '\'') goto yy409;
		}
	} else {
		if (yych <= '`') {
			if (yych == '/') goto yy410;
			if (yych >= '`') goto yy409;
		} else {
			if (yych <= '{') {
				if (yych >= '{') goto yy411;
			} else {
				if (yych == '}') goto yy411;
			}
		}
	}
	++cur;
yy406:
#line 667 "../src/parse/lexer.re"
	{ goto code; }
#line 3470 "src/parse/lexer.cc"
yy407:
	++cur;
#line 662 "../src/parse/lexer.re"
	{ next_line(); goto indent; }
#line 3475 "src/parse/lexer.cc"
yy408:
	yych = *++cur;
	if (yych == '\n') goto yy407;
	goto yy406;
yy409:
	++cur;
#line 665 "../src/parse/lexer.re"
	{ CHECK_RET(try_lex_literal_in_code(cur[-1])); goto code; }
#line 3484 "src/parse/lexer.cc"
yy410:
	yych = *++cur;
	if (yych == '*') goto yy412;
	if (yych == '/') goto yy413;
	goto yy406;
yy411:
	++cur;
#line 666 "../src/parse/lexer.re"
	{ RET_FAIL(error_at_cur("Curly braces are not allowed after ':='")); }
#line 3494 "src/parse/lexer.cc"
yy412:
	++cur;
#line 664 "../src/parse/lexer.re"
	{ CHECK_RET(lex_c_comment()); goto code; }
#line 3499 "src/parse/lexer.cc"
yy413:
	++cur;
#line 663 "../src/parse/lexer.re"
	{ CHECK_RET(lex_cpp_comment()); goto indent; }
#line 3504 "src/parse/lexer.cc"
}
#line 668 "../src/parse/lexer.re"

indent: 
#line 3509 "src/parse/lexer.cc"
{
	uint8_t yych;
	if (lim <= cur) if (!fill(1)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yych <= '\f') {
		if (yych <= 0x08) goto yy415;
		if (yych <= '\n') goto yy416;
	} else {
		if (yych <= '\r') goto yy416;
		if (yych == ' ') goto yy416;
	}
yy415:
#line 671 "../src/parse/lexer.re"
	{
        const uint8_t* p = tok, *q = cur - 1;
        if (!globopts->indentation_sensitive) {
            while (p <= q && is_space(*p)) ++p;
            while (p <= q && is_space(*q)) --q;
        }
        return process_semact(yylval, ast, p, q);
    }
#line 3531 "src/parse/lexer.cc"
yy416:
	++cur;
	cur -= 1;
#line 670 "../src/parse/lexer.re"
	{ goto code; }
#line 3537 "src/parse/lexer.cc"
}
#line 679 "../src/parse/lexer.re"

}

Ret Input::lex_code_in_braces(YYSTYPE* yylval, Ast& ast) {
    uint32_t depth = 1;
code: 
#line 3546 "src/parse/lexer.cc"
{
	uint8_t yych;
	static const unsigned char yybm[] = {
		  0, 128, 128, 128, 128, 128, 128, 128, 
		128, 160,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		160, 128,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		192, 192, 192, 192, 192, 192, 192, 192, 
		192, 192, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128,   0, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
	};
	if ((lim - cur) < 3) if (!fill(3)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yych <= '\'') {
		if (yych <= '\r') {
			if (yych == '\n') goto yy419;
			if (yych >= '\r') goto yy421;
		} else {
			if (yych == '"') goto yy422;
			if (yych >= '\'') goto yy422;
		}
	} else {
		if (yych <= '`') {
			if (yych == '/') goto yy423;
			if (yych >= '`') goto yy422;
		} else {
			if (yych <= '{') {
				if (yych >= '{') goto yy424;
			} else {
				if (yych == '}') goto yy425;
			}
		}
	}
	++cur;
yy418:
#line 706 "../src/parse/lexer.re"
	{ goto code; }
#line 3609 "src/parse/lexer.cc"
yy419:
	yych = *(mar = ++cur);
	if (yybm[0+yych] & 32) {
		goto yy426;
	}
	if (yych == '#') goto yy428;
yy420:
#line 702 "../src/parse/lexer.re"
	{ next_line(); goto code; }
#line 3619 "src/parse/lexer.cc"
yy421:
	yych = *++cur;
	if (yych == '\n') goto yy419;
	goto yy418;
yy422:
	++cur;
#line 705 "../src/parse/lexer.re"
	{ CHECK_RET(try_lex_literal_in_code(cur[-1])); goto code; }
#line 3628 "src/parse/lexer.cc"
yy423:
	yych = *++cur;
	if (yych == '*') goto yy429;
	if (yych == '/') goto yy430;
	goto yy418;
yy424:
	++cur;
#line 700 "../src/parse/lexer.re"
	{ ++depth; goto code; }
#line 3638 "src/parse/lexer.cc"
yy425:
	++cur;
#line 685 "../src/parse/lexer.re"
	{
        --depth;
        if (depth > 0) goto code;

        const uint8_t* p = tok, *q = cur - 1;
        if (globopts->code_model == CodeModel::REC_FUNC || !globopts->wrap_blocks_in_braces) {
            // Strip curly braces and adjacent whitespace. In rec/func mode it is always safe
            // to do, as the code is in a separate function and won't cause name collisions.
            ++p; --q; // skip '{' and '}'
            while (p <= q && is_space_nonl(*p)) ++p;
            while (p <= q && is_space_nonl(*q)) --q;
        }
        return process_semact(yylval, ast, p, q);
    }
#line 3656 "src/parse/lexer.cc"
yy426:
	++cur;
	if (lim <= cur) if (!fill(1)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yybm[0+yych] & 32) {
		goto yy426;
	}
	if (yych == '#') goto yy428;
yy427:
	cur = mar;
	goto yy420;
yy428:
	++cur;
	if ((lim - cur) < 5) if (!fill(5)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy428;
		goto yy427;
	} else {
		if (yych <= ' ') goto yy428;
		if (yych == 'l') goto yy431;
		goto yy427;
	}
yy429:
	++cur;
#line 703 "../src/parse/lexer.re"
	{ CHECK_RET(lex_c_comment()); goto code; }
#line 3684 "src/parse/lexer.cc"
yy430:
	++cur;
#line 704 "../src/parse/lexer.re"
	{ CHECK_RET(lex_cpp_comment()); goto code; }
#line 3689 "src/parse/lexer.cc"
yy431:
	yych = *++cur;
	if (yych != 'i') goto yy427;
	yych = *++cur;
	if (yych != 'n') goto yy427;
	yych = *++cur;
	if (yych != 'e') goto yy427;
	yych = *++cur;
	if (yych <= '0') goto yy433;
	if (yych <= '9') goto yy427;
	goto yy433;
yy432:
	++cur;
	if (lim <= cur) if (!fill(1)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
yy433:
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy432;
		goto yy427;
	} else {
		if (yych <= ' ') goto yy432;
		if (yych <= '0') goto yy427;
		if (yych >= ':') goto yy427;
		yyt1 = cur;
	}
yy434:
	++cur;
	if ((lim - cur) < 2) if (!fill(2)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yybm[0+yych] & 64) {
		goto yy434;
	}
	if (yych <= '\f') {
		if (yych <= 0x08) goto yy427;
		if (yych <= '\t') goto yy435;
		if (yych <= '\n') goto yy436;
		goto yy427;
	} else {
		if (yych <= '\r') goto yy437;
		if (yych != ' ') goto yy427;
	}
yy435:
	++cur;
	if (lim <= cur) if (!fill(1)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy435;
		goto yy427;
	} else {
		if (yych <= ' ') goto yy435;
		if (yych == '"') goto yy438;
		goto yy427;
	}
yy436:
	++cur;
	cur = yyt1;
#line 701 "../src/parse/lexer.re"
	{ CHECK_RET(set_sourceline()); goto code; }
#line 3748 "src/parse/lexer.cc"
yy437:
	yych = *++cur;
	if (yych == '\n') goto yy436;
	goto yy427;
yy438:
	++cur;
	if ((lim - cur) < 3) if (!fill(3)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yybm[0+yych] & 128) {
		goto yy438;
	}
	if (yych <= '\n') goto yy427;
	if (yych >= '#') goto yy439;
	yych = *++cur;
	if (yych == '\n') goto yy436;
	if (yych == '\r') goto yy437;
	goto yy427;
yy439:
	++cur;
	if (lim <= cur) if (!fill(1)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yych <= 0x00) goto yy427;
	if (yych == '\n') goto yy427;
	goto yy438;
}
#line 707 "../src/parse/lexer.re"

}

Ret Input::lex_dqstring_in_code() {
loop: 
#line 3780 "src/parse/lexer.cc"
{
	uint8_t yych;
	if ((lim - cur) < 2) if (!fill(2)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yych <= '\r') {
		if (yych == '\n') goto yy442;
		if (yych >= '\r') goto yy443;
	} else {
		if (yych <= '"') {
			if (yych >= '"') goto yy444;
		} else {
			if (yych == '\\') goto yy445;
		}
	}
	++cur;
yy441:
#line 715 "../src/parse/lexer.re"
	{ goto loop; }
#line 3799 "src/parse/lexer.cc"
yy442:
	++cur;
#line 714 "../src/parse/lexer.re"
	{ next_line(); goto loop; }
#line 3804 "src/parse/lexer.cc"
yy443:
	yych = *++cur;
	if (yych == '\n') goto yy442;
	goto yy441;
yy444:
	++cur;
#line 712 "../src/parse/lexer.re"
	{ return Ret::OK; }
#line 3813 "src/parse/lexer.cc"
yy445:
	yych = *++cur;
	if (yych == '"') goto yy446;
	if (yych != '\\') goto yy441;
yy446:
	++cur;
#line 713 "../src/parse/lexer.re"
	{ goto loop; }
#line 3822 "src/parse/lexer.cc"
}
#line 716 "../src/parse/lexer.re"

}

Ret Input::lex_sqstring_in_code() {
loop: 
#line 3830 "src/parse/lexer.cc"
{
	uint8_t yych;
	if ((lim - cur) < 2) if (!fill(2)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yych <= '\r') {
		if (yych == '\n') goto yy449;
		if (yych >= '\r') goto yy450;
	} else {
		if (yych <= '\'') {
			if (yych >= '\'') goto yy451;
		} else {
			if (yych == '\\') goto yy452;
		}
	}
	++cur;
yy448:
#line 724 "../src/parse/lexer.re"
	{ goto loop; }
#line 3849 "src/parse/lexer.cc"
yy449:
	++cur;
#line 723 "../src/parse/lexer.re"
	{ next_line(); goto loop; }
#line 3854 "src/parse/lexer.cc"
yy450:
	yych = *++cur;
	if (yych == '\n') goto yy449;
	goto yy448;
yy451:
	++cur;
#line 721 "../src/parse/lexer.re"
	{ return Ret::OK; }
#line 3863 "src/parse/lexer.cc"
yy452:
	yych = *++cur;
	if (yych == '\'') goto yy453;
	if (yych != '\\') goto yy448;
yy453:
	++cur;
#line 722 "../src/parse/lexer.re"
	{ goto loop; }
#line 3872 "src/parse/lexer.cc"
}
#line 725 "../src/parse/lexer.re"

}

Ret Input::lex_bqstring_in_code() {
loop: 
#line 3880 "src/parse/lexer.cc"
{
	uint8_t yych;
	if ((lim - cur) < 2) if (!fill(2)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yych <= '\f') {
		if (yych == '\n') goto yy456;
	} else {
		if (yych <= '\r') goto yy457;
		if (yych == '`') goto yy458;
	}
	++cur;
yy455:
#line 732 "../src/parse/lexer.re"
	{ goto loop; }
#line 3895 "src/parse/lexer.cc"
yy456:
	++cur;
#line 731 "../src/parse/lexer.re"
	{ next_line(); goto loop; }
#line 3900 "src/parse/lexer.cc"
yy457:
	yych = *++cur;
	if (yych == '\n') goto yy456;
	goto yy455;
yy458:
	++cur;
#line 730 "../src/parse/lexer.re"
	{ return Ret::OK; }
#line 3909 "src/parse/lexer.cc"
}
#line 733 "../src/parse/lexer.re"

}

// Generalized rule for char literals (covering various languages).
///
// Char literals may contain closing curly brace, e.g. '}'. We must lex all possible forms of
// char literals, otherwise we might erroneously lex closing single quote as the beginning of
// another literal and overlook a real closing brace (e.g. in 'a'}'b' we might recognize '}'
// as a literal).
//
#line 754 "../src/parse/lexer.re"


Ret Input::lex_sqchar_or_standalone_in_code() {

#line 3927 "src/parse/lexer.cc"
{
	uint8_t yych;
	static const unsigned char yybm[] = {
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		192, 192, 192, 192, 192, 192, 192, 192, 
		128, 128,   0,   0,   0,   0,   0,   0, 
		  0, 128, 128, 128, 128, 128, 128,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0, 128, 128, 128, 128, 128, 128,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
	};
	if ((lim - cur) < 11) if (!fill(11)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *(mar = cur);
	if (yych <= 0xDF) {
		if (yych <= '\\') {
			if (yych <= '[') goto yy461;
			goto yy463;
		} else {
			if (yych <= 0x7F) goto yy461;
			if (yych >= 0xC2) goto yy464;
		}
	} else {
		if (yych <= 0xF0) {
			if (yych <= 0xE0) goto yy465;
			if (yych <= 0xEF) goto yy466;
			goto yy467;
		} else {
			if (yych <= 0xF3) goto yy468;
			if (yych <= 0xF4) goto yy469;
		}
	}
yy460:
#line 760 "../src/parse/lexer.re"
	{ return Ret::OK; }
#line 3987 "src/parse/lexer.cc"
yy461:
	yych = *++cur;
	if (yych == '\'') goto yy470;
yy462:
	cur = mar;
	goto yy460;
yy463:
	yych = *++cur;
	if (yych <= 'b') {
		if (yych <= '>') {
			if (yych <= '/') {
				if (yych == '\'') goto yy472;
				goto yy462;
			} else {
				if (yych <= '0') goto yy473;
				if (yych <= '7') goto yy474;
				goto yy462;
			}
		} else {
			if (yych <= 'U') {
				if (yych <= '?') goto yy461;
				if (yych <= 'T') goto yy462;
				goto yy475;
			} else {
				if (yych == '\\') goto yy461;
				if (yych <= '`') goto yy462;
				goto yy461;
			}
		}
	} else {
		if (yych <= 'r') {
			if (yych <= 'm') {
				if (yych == 'f') goto yy461;
				goto yy462;
			} else {
				if (yych <= 'n') goto yy461;
				if (yych <= 'o') goto yy476;
				if (yych <= 'q') goto yy462;
				goto yy461;
			}
		} else {
			if (yych <= 'u') {
				if (yych <= 's') goto yy462;
				if (yych <= 't') goto yy461;
				goto yy477;
			} else {
				if (yych <= 'v') goto yy461;
				if (yych == 'x') goto yy478;
				goto yy462;
			}
		}
	}
yy464:
	yych = *++cur;
	if (yych <= 0x7F) goto yy462;
	if (yych <= 0xBF) goto yy461;
	goto yy462;
yy465:
	yych = *++cur;
	if (yych <= 0x9F) goto yy462;
	if (yych <= 0xBF) goto yy464;
	goto yy462;
yy466:
	yych = *++cur;
	if (yych <= 0x7F) goto yy462;
	if (yych <= 0xBF) goto yy464;
	goto yy462;
yy467:
	yych = *++cur;
	if (yych <= 0x8F) goto yy462;
	if (yych <= 0xBF) goto yy466;
	goto yy462;
yy468:
	yych = *++cur;
	if (yych <= 0x7F) goto yy462;
	if (yych <= 0xBF) goto yy466;
	goto yy462;
yy469:
	yych = *++cur;
	if (yych <= 0x7F) goto yy462;
	if (yych <= 0x8F) goto yy466;
	goto yy462;
yy470:
	++cur;
yy471:
#line 759 "../src/parse/lexer.re"
	{ return Ret::OK; }
#line 4075 "src/parse/lexer.cc"
yy472:
	yych = *++cur;
	if (yych == '\'') goto yy470;
	goto yy471;
yy473:
	yych = *++cur;
	if (yych == '\'') goto yy470;
	if (yych <= '/') goto yy462;
	if (yych <= '7') goto yy479;
	goto yy462;
yy474:
	yych = *++cur;
	if (yych <= '/') goto yy462;
	if (yych <= '7') goto yy479;
	goto yy462;
yy475:
	yych = *++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy462;
		if (yych <= '9') goto yy480;
		goto yy462;
	} else {
		if (yych <= 'F') goto yy480;
		if (yych <= '`') goto yy462;
		if (yych <= 'f') goto yy480;
		goto yy462;
	}
yy476:
	yych = *++cur;
	if (yych == '{') goto yy481;
	goto yy462;
yy477:
	yych = *++cur;
	if (yych <= 'F') {
		if (yych <= '/') goto yy462;
		if (yych <= '9') goto yy482;
		if (yych <= '@') goto yy462;
		goto yy482;
	} else {
		if (yych <= 'f') {
			if (yych <= '`') goto yy462;
			goto yy482;
		} else {
			if (yych == '{') goto yy483;
			goto yy462;
		}
	}
yy478:
	yych = *++cur;
	if (yych <= 'F') {
		if (yych <= '/') goto yy462;
		if (yych <= '9') goto yy484;
		if (yych <= '@') goto yy462;
		goto yy484;
	} else {
		if (yych <= 'f') {
			if (yych <= '`') goto yy462;
			goto yy484;
		} else {
			if (yych == '{') goto yy483;
			goto yy462;
		}
	}
yy479:
	yych = *++cur;
	if (yych <= '/') goto yy462;
	if (yych <= '7') goto yy461;
	goto yy462;
yy480:
	yych = *++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy462;
		if (yych <= '9') goto yy485;
		goto yy462;
	} else {
		if (yych <= 'F') goto yy485;
		if (yych <= '`') goto yy462;
		if (yych <= 'f') goto yy485;
		goto yy462;
	}
yy481:
	yych = *++cur;
	if (yybm[0+yych] & 64) {
		goto yy486;
	}
	goto yy462;
yy482:
	yych = *++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy462;
		if (yych <= '9') goto yy487;
		goto yy462;
	} else {
		if (yych <= 'F') goto yy487;
		if (yych <= '`') goto yy462;
		if (yych <= 'f') goto yy487;
		goto yy462;
	}
yy483:
	yych = *++cur;
	if (yych == '}') goto yy462;
	goto yy489;
yy484:
	yych = *++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy462;
		if (yych <= '9') goto yy461;
		goto yy462;
	} else {
		if (yych <= 'F') goto yy461;
		if (yych <= '`') goto yy462;
		if (yych <= 'f') goto yy461;
		goto yy462;
	}
yy485:
	yych = *++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy462;
		if (yych <= '9') goto yy490;
		goto yy462;
	} else {
		if (yych <= 'F') goto yy490;
		if (yych <= '`') goto yy462;
		if (yych <= 'f') goto yy490;
		goto yy462;
	}
yy486:
	++cur;
	if ((lim - cur) < 2) if (!fill(2)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yybm[0+yych] & 64) {
		goto yy486;
	}
	if (yych == '}') goto yy461;
	goto yy462;
yy487:
	yych = *++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy462;
		if (yych <= '9') goto yy484;
		goto yy462;
	} else {
		if (yych <= 'F') goto yy484;
		if (yych <= '`') goto yy462;
		if (yych <= 'f') goto yy484;
		goto yy462;
	}
yy488:
	++cur;
	if ((lim - cur) < 2) if (!fill(2)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
yy489:
	if (yybm[0+yych] & 128) {
		goto yy488;
	}
	if (yych == '}') goto yy461;
	goto yy462;
yy490:
	yych = *++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy462;
		if (yych >= ':') goto yy462;
	} else {
		if (yych <= 'F') goto yy491;
		if (yych <= '`') goto yy462;
		if (yych >= 'g') goto yy462;
	}
yy491:
	yych = *++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy462;
		if (yych <= '9') goto yy482;
		goto yy462;
	} else {
		if (yych <= 'F') goto yy482;
		if (yych <= '`') goto yy462;
		if (yych <= 'f') goto yy482;
		goto yy462;
	}
}
#line 761 "../src/parse/lexer.re"

}

Ret Input::lex_bqchar_or_standalone_in_code() {

#line 4262 "src/parse/lexer.cc"
{
	uint8_t yych;
	static const unsigned char yybm[] = {
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		192, 192, 192, 192, 192, 192, 192, 192, 
		128, 128,   0,   0,   0,   0,   0,   0, 
		  0, 128, 128, 128, 128, 128, 128,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0, 128, 128, 128, 128, 128, 128,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
	};
	if ((lim - cur) < 11) if (!fill(11)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *(mar = cur);
	if (yych <= 0xDF) {
		if (yych <= '\\') {
			if (yych <= '[') goto yy494;
			goto yy496;
		} else {
			if (yych <= 0x7F) goto yy494;
			if (yych >= 0xC2) goto yy497;
		}
	} else {
		if (yych <= 0xF0) {
			if (yych <= 0xE0) goto yy498;
			if (yych <= 0xEF) goto yy499;
			goto yy500;
		} else {
			if (yych <= 0xF3) goto yy501;
			if (yych <= 0xF4) goto yy502;
		}
	}
yy493:
#line 768 "../src/parse/lexer.re"
	{ return Ret::OK; }
#line 4322 "src/parse/lexer.cc"
yy494:
	yych = *++cur;
	if (yych == '`') goto yy503;
yy495:
	cur = mar;
	goto yy493;
yy496:
	yych = *++cur;
	if (yych <= 'b') {
		if (yych <= '?') {
			if (yych <= '/') {
				if (yych == '\'') goto yy494;
				goto yy495;
			} else {
				if (yych <= '0') goto yy504;
				if (yych <= '7') goto yy505;
				if (yych <= '>') goto yy495;
				goto yy494;
			}
		} else {
			if (yych <= '[') {
				if (yych == 'U') goto yy506;
				goto yy495;
			} else {
				if (yych <= '\\') goto yy494;
				if (yych <= '_') goto yy495;
				if (yych <= '`') goto yy503;
				goto yy494;
			}
		}
	} else {
		if (yych <= 'r') {
			if (yych <= 'm') {
				if (yych == 'f') goto yy494;
				goto yy495;
			} else {
				if (yych <= 'n') goto yy494;
				if (yych <= 'o') goto yy507;
				if (yych <= 'q') goto yy495;
				goto yy494;
			}
		} else {
			if (yych <= 'u') {
				if (yych <= 's') goto yy495;
				if (yych <= 't') goto yy494;
				goto yy508;
			} else {
				if (yych <= 'v') goto yy494;
				if (yych == 'x') goto yy509;
				goto yy495;
			}
		}
	}
yy497:
	yych = *++cur;
	if (yych <= 0x7F) goto yy495;
	if (yych <= 0xBF) goto yy494;
	goto yy495;
yy498:
	yych = *++cur;
	if (yych <= 0x9F) goto yy495;
	if (yych <= 0xBF) goto yy497;
	goto yy495;
yy499:
	yych = *++cur;
	if (yych <= 0x7F) goto yy495;
	if (yych <= 0xBF) goto yy497;
	goto yy495;
yy500:
	yych = *++cur;
	if (yych <= 0x8F) goto yy495;
	if (yych <= 0xBF) goto yy499;
	goto yy495;
yy501:
	yych = *++cur;
	if (yych <= 0x7F) goto yy495;
	if (yych <= 0xBF) goto yy499;
	goto yy495;
yy502:
	yych = *++cur;
	if (yych <= 0x7F) goto yy495;
	if (yych <= 0x8F) goto yy499;
	goto yy495;
yy503:
	++cur;
#line 767 "../src/parse/lexer.re"
	{ return Ret::OK; }
#line 4410 "src/parse/lexer.cc"
yy504:
	yych = *++cur;
	if (yych <= '/') goto yy495;
	if (yych <= '7') goto yy510;
	if (yych == '`') goto yy503;
	goto yy495;
yy505:
	yych = *++cur;
	if (yych <= '/') goto yy495;
	if (yych <= '7') goto yy510;
	goto yy495;
yy506:
	yych = *++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy495;
		if (yych <= '9') goto yy511;
		goto yy495;
	} else {
		if (yych <= 'F') goto yy511;
		if (yych <= '`') goto yy495;
		if (yych <= 'f') goto yy511;
		goto yy495;
	}
yy507:
	yych = *++cur;
	if (yych == '{') goto yy512;
	goto yy495;
yy508:
	yych = *++cur;
	if (yych <= 'F') {
		if (yych <= '/') goto yy495;
		if (yych <= '9') goto yy513;
		if (yych <= '@') goto yy495;
		goto yy513;
	} else {
		if (yych <= 'f') {
			if (yych <= '`') goto yy495;
			goto yy513;
		} else {
			if (yych == '{') goto yy514;
			goto yy495;
		}
	}
yy509:
	yych = *++cur;
	if (yych <= 'F') {
		if (yych <= '/') goto yy495;
		if (yych <= '9') goto yy515;
		if (yych <= '@') goto yy495;
		goto yy515;
	} else {
		if (yych <= 'f') {
			if (yych <= '`') goto yy495;
			goto yy515;
		} else {
			if (yych == '{') goto yy514;
			goto yy495;
		}
	}
yy510:
	yych = *++cur;
	if (yych <= '/') goto yy495;
	if (yych <= '7') goto yy494;
	goto yy495;
yy511:
	yych = *++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy495;
		if (yych <= '9') goto yy516;
		goto yy495;
	} else {
		if (yych <= 'F') goto yy516;
		if (yych <= '`') goto yy495;
		if (yych <= 'f') goto yy516;
		goto yy495;
	}
yy512:
	yych = *++cur;
	if (yybm[0+yych] & 64) {
		goto yy517;
	}
	goto yy495;
yy513:
	yych = *++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy495;
		if (yych <= '9') goto yy518;
		goto yy495;
	} else {
		if (yych <= 'F') goto yy518;
		if (yych <= '`') goto yy495;
		if (yych <= 'f') goto yy518;
		goto yy495;
	}
yy514:
	yych = *++cur;
	if (yych == '}') goto yy495;
	goto yy520;
yy515:
	yych = *++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy495;
		if (yych <= '9') goto yy494;
		goto yy495;
	} else {
		if (yych <= 'F') goto yy494;
		if (yych <= '`') goto yy495;
		if (yych <= 'f') goto yy494;
		goto yy495;
	}
yy516:
	yych = *++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy495;
		if (yych <= '9') goto yy521;
		goto yy495;
	} else {
		if (yych <= 'F') goto yy521;
		if (yych <= '`') goto yy495;
		if (yych <= 'f') goto yy521;
		goto yy495;
	}
yy517:
	++cur;
	if ((lim - cur) < 2) if (!fill(2)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yybm[0+yych] & 64) {
		goto yy517;
	}
	if (yych == '}') goto yy494;
	goto yy495;
yy518:
	yych = *++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy495;
		if (yych <= '9') goto yy515;
		goto yy495;
	} else {
		if (yych <= 'F') goto yy515;
		if (yych <= '`') goto yy495;
		if (yych <= 'f') goto yy515;
		goto yy495;
	}
yy519:
	++cur;
	if ((lim - cur) < 2) if (!fill(2)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
yy520:
	if (yybm[0+yych] & 128) {
		goto yy519;
	}
	if (yych == '}') goto yy494;
	goto yy495;
yy521:
	yych = *++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy495;
		if (yych >= ':') goto yy495;
	} else {
		if (yych <= 'F') goto yy522;
		if (yych <= '`') goto yy495;
		if (yych >= 'g') goto yy495;
	}
yy522:
	yych = *++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy495;
		if (yych <= '9') goto yy513;
		goto yy495;
	} else {
		if (yych <= 'F') goto yy513;
		if (yych <= '`') goto yy495;
		if (yych <= 'f') goto yy513;
		goto yy495;
	}
}
#line 769 "../src/parse/lexer.re"

}

Ret Input::try_lex_literal_in_code(uint8_t quote) {
    // We need to lex string and char literals in code blocks because they may contain closing
    // brace or newline that would otherwise be erroneously lexed as block terminator symbols.
    switch (quote) {
    case '"':
        return lex_dqstring_in_code();
    case '\'':
        return globopts->single_quoted_strings
            ? lex_sqstring_in_code()
            : lex_sqchar_or_standalone_in_code();
    case '`':
        return globopts->backtick_quoted_strings
            ? lex_bqstring_in_code()
            : lex_bqchar_or_standalone_in_code();
    default:
        return Ret::FAIL;
    }
}

Ret Input::lex_c_comment() {
loop: 
#line 4612 "src/parse/lexer.cc"
{
	uint8_t yych;
	if ((lim - cur) < 2) if (!fill(2)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yych <= '\f') {
		if (yych == '\n') goto yy525;
	} else {
		if (yych <= '\r') goto yy526;
		if (yych == '*') goto yy527;
	}
	++cur;
yy524:
#line 795 "../src/parse/lexer.re"
	{ goto loop; }
#line 4627 "src/parse/lexer.cc"
yy525:
	++cur;
#line 794 "../src/parse/lexer.re"
	{ next_line(); goto loop; }
#line 4632 "src/parse/lexer.cc"
yy526:
	yych = *++cur;
	if (yych == '\n') goto yy525;
	goto yy524;
yy527:
	yych = *++cur;
	if (yych != '/') goto yy524;
	++cur;
#line 793 "../src/parse/lexer.re"
	{ return Ret::OK; }
#line 4643 "src/parse/lexer.cc"
}
#line 796 "../src/parse/lexer.re"

}

Ret Input::lex_cpp_comment() {
loop: 
#line 4651 "src/parse/lexer.cc"
{
	uint8_t yych;
	if ((lim - cur) < 2) if (!fill(2)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yych == '\n') goto yy530;
	if (yych == '\r') goto yy531;
	++cur;
yy529:
#line 802 "../src/parse/lexer.re"
	{ goto loop; }
#line 4662 "src/parse/lexer.cc"
yy530:
	++cur;
#line 801 "../src/parse/lexer.re"
	{ next_line(); return Ret::OK; }
#line 4667 "src/parse/lexer.cc"
yy531:
	yych = *++cur;
	if (yych == '\n') goto yy530;
	goto yy529;
}
#line 803 "../src/parse/lexer.re"

}

Ret Input::lex_cls(Ast& ast, bool neg, const AstNode*& a) {
    uint32_t u, l;
    const loc_t& loc0 = tok_loc();
    loc_t loc = cur_loc();
fst:
    tok = cur;

#line 4684 "src/parse/lexer.cc"
{
	uint8_t yych;
	if (lim <= cur) if (!fill(1)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yych == ']') goto yy533;
#line 814 "../src/parse/lexer.re"
	{ CHECK_RET(lex_cls_chr(l)); goto snd; }
#line 4692 "src/parse/lexer.cc"
yy533:
	++cur;
#line 813 "../src/parse/lexer.re"
	{ a = ast.cls(loc0, neg); return Ret::OK; }
#line 4697 "src/parse/lexer.cc"
}
#line 815 "../src/parse/lexer.re"

snd: 
#line 4702 "src/parse/lexer.cc"
{
	uint8_t yych;
	if ((lim - cur) < 2) if (!fill(2)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *(mar = cur);
	if (yych == '-') goto yy536;
yy535:
#line 817 "../src/parse/lexer.re"
	{ u = l; goto add; }
#line 4711 "src/parse/lexer.cc"
yy536:
	yych = *++cur;
	if (yych != ']') goto yy537;
	cur = mar;
	goto yy535;
yy537:
	++cur;
	cur -= 1;
#line 818 "../src/parse/lexer.re"
	{
        CHECK_RET(lex_cls_chr(u));
        if (l > u) {
            msg.warn.swapped_range(loc, l, u);
            std::swap(l, u);
        }
        goto add;
    }
#line 4729 "src/parse/lexer.cc"
}
#line 826 "../src/parse/lexer.re"

add:
    ast.temp_ranges.push_back(AstRange(l, u, loc));
    loc = cur_loc();
    goto fst;
}

Ret Input::lex_cls_chr(uint32_t& c) {
    tok = cur;
    const loc_t& loc = cur_loc();
#line 861 "../src/parse/lexer.re"

    if (globopts->input_encoding == Enc::Type::ASCII) {
        
#line 4746 "src/parse/lexer.cc"
{
	uint8_t yych;
	unsigned int yyaccept = 0;
	if ((lim - cur) < 10) if (!fill(10)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yych <= '\f') {
		if (yych == '\n') goto yy540;
	} else {
		if (yych <= '\r') goto yy541;
		if (yych == '\\') goto yy542;
	}
	++cur;
yy539:
#line 843 "../src/parse/lexer.re"
	{ c = decode(tok); return Ret::OK; }
#line 4762 "src/parse/lexer.cc"
yy540:
	++cur;
#line 837 "../src/parse/lexer.re"
	{ RET_FAIL(error_at(loc, "newline in character class")); }
#line 4767 "src/parse/lexer.cc"
yy541:
	yych = *++cur;
	if (yych == '\n') goto yy540;
	goto yy539;
yy542:
	yych = *++cur;
	if (yych <= '\\') {
		if (yych <= '/') {
			if (yych <= '\f') {
				if (yych <= 0x00) goto yy543;
				if (yych == '\n') goto yy540;
				goto yy544;
			} else {
				if (yych <= '\r') goto yy546;
				if (yych == '-') goto yy547;
				goto yy544;
			}
		} else {
			if (yych <= 'U') {
				if (yych <= '3') goto yy548;
				if (yych <= '7') goto yy550;
				if (yych <= 'T') goto yy544;
				goto yy551;
			} else {
				if (yych == 'X') goto yy553;
				if (yych <= '[') goto yy544;
				goto yy554;
			}
		}
	} else {
		if (yych <= 'n') {
			if (yych <= 'b') {
				if (yych <= ']') goto yy555;
				if (yych <= '`') goto yy544;
				if (yych <= 'a') goto yy556;
				goto yy557;
			} else {
				if (yych == 'f') goto yy558;
				if (yych <= 'm') goto yy544;
				goto yy559;
			}
		} else {
			if (yych <= 't') {
				if (yych == 'r') goto yy560;
				if (yych <= 's') goto yy544;
				goto yy561;
			} else {
				if (yych <= 'v') {
					if (yych <= 'u') goto yy553;
					goto yy562;
				} else {
					if (yych == 'x') goto yy563;
					goto yy544;
				}
			}
		}
	}
yy543:
#line 840 "../src/parse/lexer.re"
	{ RET_FAIL(error_at(loc, "syntax error in escape sequence")); }
#line 4828 "src/parse/lexer.cc"
yy544:
	++cur;
yy545:
#line 856 "../src/parse/lexer.re"
	{
        msg.warn.useless_escape(loc, tok, cur);
        c = decode(tok + 1);
        return Ret::OK;
    }
#line 4838 "src/parse/lexer.cc"
yy546:
	yych = *++cur;
	if (yych == '\n') goto yy540;
	goto yy545;
yy547:
	++cur;
#line 854 "../src/parse/lexer.re"
	{ c = '-'_u8; return Ret::OK; }
#line 4847 "src/parse/lexer.cc"
yy548:
	yyaccept = 0;
	yych = *(mar = ++cur);
	if (yych <= '/') goto yy549;
	if (yych <= '7') goto yy564;
yy549:
#line 839 "../src/parse/lexer.re"
	{ RET_FAIL(error_at(loc, "syntax error in octal escape sequence")); }
#line 4856 "src/parse/lexer.cc"
yy550:
	++cur;
	goto yy549;
yy551:
	yyaccept = 1;
	yych = *(mar = ++cur);
	if (yych <= '@') {
		if (yych <= '/') goto yy552;
		if (yych <= '9') goto yy566;
	} else {
		if (yych <= 'F') goto yy566;
		if (yych <= '`') goto yy552;
		if (yych <= 'f') goto yy566;
	}
yy552:
#line 838 "../src/parse/lexer.re"
	{ RET_FAIL(error_at(loc, "syntax error in hexadecimal escape sequence")); }
#line 4874 "src/parse/lexer.cc"
yy553:
	yyaccept = 1;
	yych = *(mar = ++cur);
	if (yych <= '@') {
		if (yych <= '/') goto yy552;
		if (yych <= '9') goto yy567;
		goto yy552;
	} else {
		if (yych <= 'F') goto yy567;
		if (yych <= '`') goto yy552;
		if (yych <= 'f') goto yy567;
		goto yy552;
	}
yy554:
	++cur;
#line 853 "../src/parse/lexer.re"
	{ c = '\\'_u8; return Ret::OK; }
#line 4892 "src/parse/lexer.cc"
yy555:
	++cur;
#line 855 "../src/parse/lexer.re"
	{ c = ']'_u8; return Ret::OK; }
#line 4897 "src/parse/lexer.cc"
yy556:
	++cur;
#line 846 "../src/parse/lexer.re"
	{ c = '\a'_u8; return Ret::OK; }
#line 4902 "src/parse/lexer.cc"
yy557:
	++cur;
#line 847 "../src/parse/lexer.re"
	{ c = '\b'_u8; return Ret::OK; }
#line 4907 "src/parse/lexer.cc"
yy558:
	++cur;
#line 848 "../src/parse/lexer.re"
	{ c = '\f'_u8; return Ret::OK; }
#line 4912 "src/parse/lexer.cc"
yy559:
	++cur;
#line 849 "../src/parse/lexer.re"
	{ c = '\n'_u8; return Ret::OK; }
#line 4917 "src/parse/lexer.cc"
yy560:
	++cur;
#line 850 "../src/parse/lexer.re"
	{ c = '\r'_u8; return Ret::OK; }
#line 4922 "src/parse/lexer.cc"
yy561:
	++cur;
#line 851 "../src/parse/lexer.re"
	{ c = '\t'_u8; return Ret::OK; }
#line 4927 "src/parse/lexer.cc"
yy562:
	++cur;
#line 852 "../src/parse/lexer.re"
	{ c = '\v'_u8; return Ret::OK; }
#line 4932 "src/parse/lexer.cc"
yy563:
	yyaccept = 1;
	yych = *(mar = ++cur);
	if (yych <= '@') {
		if (yych <= '/') goto yy552;
		if (yych <= '9') goto yy568;
		goto yy552;
	} else {
		if (yych <= 'F') goto yy568;
		if (yych <= '`') goto yy552;
		if (yych <= 'f') goto yy568;
		goto yy552;
	}
yy564:
	yych = *++cur;
	if (yych <= '/') goto yy565;
	if (yych <= '7') goto yy569;
yy565:
	cur = mar;
	if (yyaccept == 0) {
		goto yy549;
	} else {
		goto yy552;
	}
yy566:
	yych = *++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy565;
		if (yych <= '9') goto yy570;
		goto yy565;
	} else {
		if (yych <= 'F') goto yy570;
		if (yych <= '`') goto yy565;
		if (yych <= 'f') goto yy570;
		goto yy565;
	}
yy567:
	yych = *++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy565;
		if (yych <= '9') goto yy571;
		goto yy565;
	} else {
		if (yych <= 'F') goto yy571;
		if (yych <= '`') goto yy565;
		if (yych <= 'f') goto yy571;
		goto yy565;
	}
yy568:
	yych = *++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy565;
		if (yych <= '9') goto yy572;
		goto yy565;
	} else {
		if (yych <= 'F') goto yy572;
		if (yych <= '`') goto yy565;
		if (yych <= 'f') goto yy572;
		goto yy565;
	}
yy569:
	++cur;
#line 845 "../src/parse/lexer.re"
	{ c = unesc_oct(tok, cur); return Ret::OK; }
#line 4997 "src/parse/lexer.cc"
yy570:
	yych = *++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy565;
		if (yych <= '9') goto yy573;
		goto yy565;
	} else {
		if (yych <= 'F') goto yy573;
		if (yych <= '`') goto yy565;
		if (yych <= 'f') goto yy573;
		goto yy565;
	}
yy571:
	yych = *++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy565;
		if (yych <= '9') goto yy568;
		goto yy565;
	} else {
		if (yych <= 'F') goto yy568;
		if (yych <= '`') goto yy565;
		if (yych <= 'f') goto yy568;
		goto yy565;
	}
yy572:
	++cur;
#line 844 "../src/parse/lexer.re"
	{ c = unesc_hex(tok, cur); return Ret::OK; }
#line 5026 "src/parse/lexer.cc"
yy573:
	yych = *++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy565;
		if (yych >= ':') goto yy565;
	} else {
		if (yych <= 'F') goto yy574;
		if (yych <= '`') goto yy565;
		if (yych >= 'g') goto yy565;
	}
yy574:
	yych = *++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy565;
		if (yych <= '9') goto yy567;
		goto yy565;
	} else {
		if (yych <= 'F') goto yy567;
		if (yych <= '`') goto yy565;
		if (yych <= 'f') goto yy567;
		goto yy565;
	}
}
#line 863 "../src/parse/lexer.re"

    } else {
        
#line 5054 "src/parse/lexer.cc"
{
	uint8_t yych;
	unsigned int yyaccept = 0;
	if ((lim - cur) < 10) if (!fill(10)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yych <= 0x7F) {
		if (yych <= '\f') {
			if (yych == '\n') goto yy578;
		} else {
			if (yych <= '\r') goto yy579;
			if (yych == '\\') goto yy580;
		}
	} else {
		if (yych <= 0xEF) {
			if (yych <= 0xC1) goto yy582;
			if (yych <= 0xDF) goto yy584;
			if (yych <= 0xE0) goto yy585;
			goto yy586;
		} else {
			if (yych <= 0xF0) goto yy587;
			if (yych <= 0xF3) goto yy588;
			if (yych <= 0xF4) goto yy589;
			goto yy582;
		}
	}
yy576:
	++cur;
yy577:
#line 843 "../src/parse/lexer.re"
	{ c = decode(tok); return Ret::OK; }
#line 5085 "src/parse/lexer.cc"
yy578:
	++cur;
#line 837 "../src/parse/lexer.re"
	{ RET_FAIL(error_at(loc, "newline in character class")); }
#line 5090 "src/parse/lexer.cc"
yy579:
	yych = *++cur;
	if (yych == '\n') goto yy578;
	goto yy577;
yy580:
	yyaccept = 0;
	yych = *(mar = ++cur);
	if (yych <= 'b') {
		if (yych <= '7') {
			if (yych <= '\r') {
				if (yych <= '\t') {
					if (yych >= 0x01) goto yy590;
				} else {
					if (yych <= '\n') goto yy578;
					if (yych <= '\f') goto yy590;
					goto yy592;
				}
			} else {
				if (yych <= '-') {
					if (yych <= ',') goto yy590;
					goto yy593;
				} else {
					if (yych <= '/') goto yy590;
					if (yych <= '3') goto yy594;
					goto yy596;
				}
			}
		} else {
			if (yych <= '[') {
				if (yych <= 'U') {
					if (yych <= 'T') goto yy590;
					goto yy597;
				} else {
					if (yych == 'X') goto yy599;
					goto yy590;
				}
			} else {
				if (yych <= ']') {
					if (yych <= '\\') goto yy600;
					goto yy601;
				} else {
					if (yych <= '`') goto yy590;
					if (yych <= 'a') goto yy602;
					goto yy603;
				}
			}
		}
	} else {
		if (yych <= 'v') {
			if (yych <= 'q') {
				if (yych <= 'f') {
					if (yych <= 'e') goto yy590;
					goto yy604;
				} else {
					if (yych == 'n') goto yy605;
					goto yy590;
				}
			} else {
				if (yych <= 's') {
					if (yych <= 'r') goto yy606;
					goto yy590;
				} else {
					if (yych <= 't') goto yy607;
					if (yych <= 'u') goto yy599;
					goto yy608;
				}
			}
		} else {
			if (yych <= 0xDF) {
				if (yych <= 'x') {
					if (yych <= 'w') goto yy590;
					goto yy609;
				} else {
					if (yych <= 0x7F) goto yy590;
					if (yych >= 0xC2) goto yy610;
				}
			} else {
				if (yych <= 0xF0) {
					if (yych <= 0xE0) goto yy612;
					if (yych <= 0xEF) goto yy613;
					goto yy614;
				} else {
					if (yych <= 0xF3) goto yy615;
					if (yych <= 0xF4) goto yy616;
				}
			}
		}
	}
yy581:
#line 840 "../src/parse/lexer.re"
	{ RET_FAIL(error_at(loc, "syntax error in escape sequence")); }
#line 5182 "src/parse/lexer.cc"
yy582:
	++cur;
yy583:
#line 841 "../src/parse/lexer.re"
	{ RET_FAIL(error_at(loc, "syntax error")); }
#line 5188 "src/parse/lexer.cc"
yy584:
	yych = *++cur;
	if (yych <= 0x7F) goto yy583;
	if (yych <= 0xBF) goto yy576;
	goto yy583;
yy585:
	yyaccept = 1;
	yych = *(mar = ++cur);
	if (yych <= 0x9F) goto yy583;
	if (yych <= 0xBF) goto yy617;
	goto yy583;
yy586:
	yyaccept = 1;
	yych = *(mar = ++cur);
	if (yych <= 0x7F) goto yy583;
	if (yych <= 0xBF) goto yy617;
	goto yy583;
yy587:
	yyaccept = 1;
	yych = *(mar = ++cur);
	if (yych <= 0x8F) goto yy583;
	if (yych <= 0xBF) goto yy618;
	goto yy583;
yy588:
	yyaccept = 1;
	yych = *(mar = ++cur);
	if (yych <= 0x7F) goto yy583;
	if (yych <= 0xBF) goto yy618;
	goto yy583;
yy589:
	yyaccept = 1;
	yych = *(mar = ++cur);
	if (yych <= 0x7F) goto yy583;
	if (yych <= 0x8F) goto yy618;
	goto yy583;
yy590:
	++cur;
yy591:
#line 856 "../src/parse/lexer.re"
	{
        msg.warn.useless_escape(loc, tok, cur);
        c = decode(tok + 1);
        return Ret::OK;
    }
#line 5233 "src/parse/lexer.cc"
yy592:
	yych = *++cur;
	if (yych == '\n') goto yy578;
	goto yy591;
yy593:
	++cur;
#line 854 "../src/parse/lexer.re"
	{ c = '-'_u8; return Ret::OK; }
#line 5242 "src/parse/lexer.cc"
yy594:
	yyaccept = 2;
	yych = *(mar = ++cur);
	if (yych <= '/') goto yy595;
	if (yych <= '7') goto yy619;
yy595:
#line 839 "../src/parse/lexer.re"
	{ RET_FAIL(error_at(loc, "syntax error in octal escape sequence")); }
#line 5251 "src/parse/lexer.cc"
yy596:
	++cur;
	goto yy595;
yy597:
	yyaccept = 3;
	yych = *(mar = ++cur);
	if (yych <= '@') {
		if (yych <= '/') goto yy598;
		if (yych <= '9') goto yy620;
	} else {
		if (yych <= 'F') goto yy620;
		if (yych <= '`') goto yy598;
		if (yych <= 'f') goto yy620;
	}
yy598:
#line 838 "../src/parse/lexer.re"
	{ RET_FAIL(error_at(loc, "syntax error in hexadecimal escape sequence")); }
#line 5269 "src/parse/lexer.cc"
yy599:
	yyaccept = 3;
	yych = *(mar = ++cur);
	if (yych <= '@') {
		if (yych <= '/') goto yy598;
		if (yych <= '9') goto yy621;
		goto yy598;
	} else {
		if (yych <= 'F') goto yy621;
		if (yych <= '`') goto yy598;
		if (yych <= 'f') goto yy621;
		goto yy598;
	}
yy600:
	++cur;
#line 853 "../src/parse/lexer.re"
	{ c = '\\'_u8; return Ret::OK; }
#line 5287 "src/parse/lexer.cc"
yy601:
	++cur;
#line 855 "../src/parse/lexer.re"
	{ c = ']'_u8; return Ret::OK; }
#line 5292 "src/parse/lexer.cc"
yy602:
	++cur;
#line 846 "../src/parse/lexer.re"
	{ c = '\a'_u8; return Ret::OK; }
#line 5297 "src/parse/lexer.cc"
yy603:
	++cur;
#line 847 "../src/parse/lexer.re"
	{ c = '\b'_u8; return Ret::OK; }
#line 5302 "src/parse/lexer.cc"
yy604:
	++cur;
#line 848 "../src/parse/lexer.re"
	{ c = '\f'_u8; return Ret::OK; }
#line 5307 "src/parse/lexer.cc"
yy605:
	++cur;
#line 849 "../src/parse/lexer.re"
	{ c = '\n'_u8; return Ret::OK; }
#line 5312 "src/parse/lexer.cc"
yy606:
	++cur;
#line 850 "../src/parse/lexer.re"
	{ c = '\r'_u8; return Ret::OK; }
#line 5317 "src/parse/lexer.cc"
yy607:
	++cur;
#line 851 "../src/parse/lexer.re"
	{ c = '\t'_u8; return Ret::OK; }
#line 5322 "src/parse/lexer.cc"
yy608:
	++cur;
#line 852 "../src/parse/lexer.re"
	{ c = '\v'_u8; return Ret::OK; }
#line 5327 "src/parse/lexer.cc"
yy609:
	yyaccept = 3;
	yych = *(mar = ++cur);
	if (yych <= '@') {
		if (yych <= '/') goto yy598;
		if (yych <= '9') goto yy622;
		goto yy598;
	} else {
		if (yych <= 'F') goto yy622;
		if (yych <= '`') goto yy598;
		if (yych <= 'f') goto yy622;
		goto yy598;
	}
yy610:
	yych = *++cur;
	if (yych <= 0x7F) goto yy611;
	if (yych <= 0xBF) goto yy590;
yy611:
	cur = mar;
	if (yyaccept <= 1) {
		if (yyaccept == 0) {
			goto yy581;
		} else {
			goto yy583;
		}
	} else {
		if (yyaccept == 2) {
			goto yy595;
		} else {
			goto yy598;
		}
	}
yy612:
	yych = *++cur;
	if (yych <= 0x9F) goto yy611;
	if (yych <= 0xBF) goto yy610;
	goto yy611;
yy613:
	yych = *++cur;
	if (yych <= 0x7F) goto yy611;
	if (yych <= 0xBF) goto yy610;
	goto yy611;
yy614:
	yych = *++cur;
	if (yych <= 0x8F) goto yy611;
	if (yych <= 0xBF) goto yy613;
	goto yy611;
yy615:
	yych = *++cur;
	if (yych <= 0x7F) goto yy611;
	if (yych <= 0xBF) goto yy613;
	goto yy611;
yy616:
	yych = *++cur;
	if (yych <= 0x7F) goto yy611;
	if (yych <= 0x8F) goto yy613;
	goto yy611;
yy617:
	yych = *++cur;
	if (yych <= 0x7F) goto yy611;
	if (yych <= 0xBF) goto yy576;
	goto yy611;
yy618:
	yych = *++cur;
	if (yych <= 0x7F) goto yy611;
	if (yych <= 0xBF) goto yy617;
	goto yy611;
yy619:
	yych = *++cur;
	if (yych <= '/') goto yy611;
	if (yych <= '7') goto yy623;
	goto yy611;
yy620:
	yych = *++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy611;
		if (yych <= '9') goto yy624;
		goto yy611;
	} else {
		if (yych <= 'F') goto yy624;
		if (yych <= '`') goto yy611;
		if (yych <= 'f') goto yy624;
		goto yy611;
	}
yy621:
	yych = *++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy611;
		if (yych <= '9') goto yy625;
		goto yy611;
	} else {
		if (yych <= 'F') goto yy625;
		if (yych <= '`') goto yy611;
		if (yych <= 'f') goto yy625;
		goto yy611;
	}
yy622:
	yych = *++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy611;
		if (yych <= '9') goto yy626;
		goto yy611;
	} else {
		if (yych <= 'F') goto yy626;
		if (yych <= '`') goto yy611;
		if (yych <= 'f') goto yy626;
		goto yy611;
	}
yy623:
	++cur;
#line 845 "../src/parse/lexer.re"
	{ c = unesc_oct(tok, cur); return Ret::OK; }
#line 5440 "src/parse/lexer.cc"
yy624:
	yych = *++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy611;
		if (yych <= '9') goto yy627;
		goto yy611;
	} else {
		if (yych <= 'F') goto yy627;
		if (yych <= '`') goto yy611;
		if (yych <= 'f') goto yy627;
		goto yy611;
	}
yy625:
	yych = *++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy611;
		if (yych <= '9') goto yy622;
		goto yy611;
	} else {
		if (yych <= 'F') goto yy622;
		if (yych <= '`') goto yy611;
		if (yych <= 'f') goto yy622;
		goto yy611;
	}
yy626:
	++cur;
#line 844 "../src/parse/lexer.re"
	{ c = unesc_hex(tok, cur); return Ret::OK; }
#line 5469 "src/parse/lexer.cc"
yy627:
	yych = *++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy611;
		if (yych >= ':') goto yy611;
	} else {
		if (yych <= 'F') goto yy628;
		if (yych <= '`') goto yy611;
		if (yych >= 'g') goto yy611;
	}
yy628:
	yych = *++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy611;
		if (yych <= '9') goto yy621;
		goto yy611;
	} else {
		if (yych <= 'F') goto yy621;
		if (yych <= '`') goto yy611;
		if (yych <= 'f') goto yy621;
		goto yy611;
	}
}
#line 865 "../src/parse/lexer.re"

    }
}

Ret Input::lex_str_chr(uint8_t quote, AstChar& ast, bool& stop) {
    tok = cur;
    stop = false;
    ast.loc = cur_loc();
#line 896 "../src/parse/lexer.re"

    if (globopts->input_encoding == Enc::Type::ASCII) {
        
#line 5506 "src/parse/lexer.cc"
{
	uint8_t yych;
	unsigned int yyaccept = 0;
	if ((lim - cur) < 10) if (!fill(10)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yych <= '\f') {
		if (yych == '\n') goto yy631;
	} else {
		if (yych <= '\r') goto yy632;
		if (yych == '\\') goto yy633;
	}
	++cur;
yy630:
#line 880 "../src/parse/lexer.re"
	{ ast.chr = decode(tok); stop = (tok[0] == quote); return Ret::OK; }
#line 5522 "src/parse/lexer.cc"
yy631:
	++cur;
#line 874 "../src/parse/lexer.re"
	{ RET_FAIL(error_at(ast.loc, "newline in character string")); }
#line 5527 "src/parse/lexer.cc"
yy632:
	yych = *++cur;
	if (yych == '\n') goto yy631;
	goto yy630;
yy633:
	yych = *++cur;
	if (yych <= '`') {
		if (yych <= '3') {
			if (yych <= '\n') {
				if (yych <= 0x00) goto yy634;
				if (yych <= '\t') goto yy635;
				goto yy631;
			} else {
				if (yych == '\r') goto yy637;
				if (yych <= '/') goto yy635;
				goto yy638;
			}
		} else {
			if (yych <= 'W') {
				if (yych <= '7') goto yy640;
				if (yych == 'U') goto yy641;
				goto yy635;
			} else {
				if (yych <= 'X') goto yy643;
				if (yych == '\\') goto yy644;
				goto yy635;
			}
		}
	} else {
		if (yych <= 'q') {
			if (yych <= 'e') {
				if (yych <= 'a') goto yy645;
				if (yych <= 'b') goto yy646;
				goto yy635;
			} else {
				if (yych <= 'f') goto yy647;
				if (yych == 'n') goto yy648;
				goto yy635;
			}
		} else {
			if (yych <= 'u') {
				if (yych <= 'r') goto yy649;
				if (yych <= 's') goto yy635;
				if (yych <= 't') goto yy650;
				goto yy643;
			} else {
				if (yych <= 'v') goto yy651;
				if (yych == 'x') goto yy652;
				goto yy635;
			}
		}
	}
yy634:
#line 877 "../src/parse/lexer.re"
	{ RET_FAIL(error_at(ast.loc, "syntax error in escape sequence")); }
#line 5583 "src/parse/lexer.cc"
yy635:
	++cur;
yy636:
#line 891 "../src/parse/lexer.re"
	{
        ast.chr = decode(tok + 1);
        if (tok[1] != quote) msg.warn.useless_escape(ast.loc, tok, cur);
        return Ret::OK;
    }
#line 5593 "src/parse/lexer.cc"
yy637:
	yych = *++cur;
	if (yych == '\n') goto yy631;
	goto yy636;
yy638:
	yyaccept = 0;
	yych = *(mar = ++cur);
	if (yych <= '/') goto yy639;
	if (yych <= '7') goto yy653;
yy639:
#line 876 "../src/parse/lexer.re"
	{ RET_FAIL(error_at(ast.loc, "syntax error in octal escape sequence")); }
#line 5606 "src/parse/lexer.cc"
yy640:
	++cur;
	goto yy639;
yy641:
	yyaccept = 1;
	yych = *(mar = ++cur);
	if (yych <= '@') {
		if (yych <= '/') goto yy642;
		if (yych <= '9') goto yy655;
	} else {
		if (yych <= 'F') goto yy655;
		if (yych <= '`') goto yy642;
		if (yych <= 'f') goto yy655;
	}
yy642:
#line 875 "../src/parse/lexer.re"
	{ RET_FAIL(error_at(ast.loc, "syntax error in hexadecimal escape sequence")); }
#line 5624 "src/parse/lexer.cc"
yy643:
	yyaccept = 1;
	yych = *(mar = ++cur);
	if (yych <= '@') {
		if (yych <= '/') goto yy642;
		if (yych <= '9') goto yy656;
		goto yy642;
	} else {
		if (yych <= 'F') goto yy656;
		if (yych <= '`') goto yy642;
		if (yych <= 'f') goto yy656;
		goto yy642;
	}
yy644:
	++cur;
#line 890 "../src/parse/lexer.re"
	{ ast.chr = '\\'_u8; return Ret::OK; }
#line 5642 "src/parse/lexer.cc"
yy645:
	++cur;
#line 883 "../src/parse/lexer.re"
	{ ast.chr = '\a'_u8; return Ret::OK; }
#line 5647 "src/parse/lexer.cc"
yy646:
	++cur;
#line 884 "../src/parse/lexer.re"
	{ ast.chr = '\b'_u8; return Ret::OK; }
#line 5652 "src/parse/lexer.cc"
yy647:
	++cur;
#line 885 "../src/parse/lexer.re"
	{ ast.chr = '\f'_u8; return Ret::OK; }
#line 5657 "src/parse/lexer.cc"
yy648:
	++cur;
#line 886 "../src/parse/lexer.re"
	{ ast.chr = '\n'_u8; return Ret::OK; }
#line 5662 "src/parse/lexer.cc"
yy649:
	++cur;
#line 887 "../src/parse/lexer.re"
	{ ast.chr = '\r'_u8; return Ret::OK; }
#line 5667 "src/parse/lexer.cc"
yy650:
	++cur;
#line 888 "../src/parse/lexer.re"
	{ ast.chr = '\t'_u8; return Ret::OK; }
#line 5672 "src/parse/lexer.cc"
yy651:
	++cur;
#line 889 "../src/parse/lexer.re"
	{ ast.chr = '\v'_u8; return Ret::OK; }
#line 5677 "src/parse/lexer.cc"
yy652:
	yyaccept = 1;
	yych = *(mar = ++cur);
	if (yych <= '@') {
		if (yych <= '/') goto yy642;
		if (yych <= '9') goto yy657;
		goto yy642;
	} else {
		if (yych <= 'F') goto yy657;
		if (yych <= '`') goto yy642;
		if (yych <= 'f') goto yy657;
		goto yy642;
	}
yy653:
	yych = *++cur;
	if (yych <= '/') goto yy654;
	if (yych <= '7') goto yy658;
yy654:
	cur = mar;
	if (yyaccept == 0) {
		goto yy639;
	} else {
		goto yy642;
	}
yy655:
	yych = *++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy654;
		if (yych <= '9') goto yy659;
		goto yy654;
	} else {
		if (yych <= 'F') goto yy659;
		if (yych <= '`') goto yy654;
		if (yych <= 'f') goto yy659;
		goto yy654;
	}
yy656:
	yych = *++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy654;
		if (yych <= '9') goto yy660;
		goto yy654;
	} else {
		if (yych <= 'F') goto yy660;
		if (yych <= '`') goto yy654;
		if (yych <= 'f') goto yy660;
		goto yy654;
	}
yy657:
	yych = *++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy654;
		if (yych <= '9') goto yy661;
		goto yy654;
	} else {
		if (yych <= 'F') goto yy661;
		if (yych <= '`') goto yy654;
		if (yych <= 'f') goto yy661;
		goto yy654;
	}
yy658:
	++cur;
#line 882 "../src/parse/lexer.re"
	{ ast.chr = unesc_oct(tok, cur); return Ret::OK; }
#line 5742 "src/parse/lexer.cc"
yy659:
	yych = *++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy654;
		if (yych <= '9') goto yy662;
		goto yy654;
	} else {
		if (yych <= 'F') goto yy662;
		if (yych <= '`') goto yy654;
		if (yych <= 'f') goto yy662;
		goto yy654;
	}
yy660:
	yych = *++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy654;
		if (yych <= '9') goto yy657;
		goto yy654;
	} else {
		if (yych <= 'F') goto yy657;
		if (yych <= '`') goto yy654;
		if (yych <= 'f') goto yy657;
		goto yy654;
	}
yy661:
	++cur;
#line 881 "../src/parse/lexer.re"
	{ ast.chr = unesc_hex(tok, cur); return Ret::OK; }
#line 5771 "src/parse/lexer.cc"
yy662:
	yych = *++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy654;
		if (yych >= ':') goto yy654;
	} else {
		if (yych <= 'F') goto yy663;
		if (yych <= '`') goto yy654;
		if (yych >= 'g') goto yy654;
	}
yy663:
	yych = *++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy654;
		if (yych <= '9') goto yy656;
		goto yy654;
	} else {
		if (yych <= 'F') goto yy656;
		if (yych <= '`') goto yy654;
		if (yych <= 'f') goto yy656;
		goto yy654;
	}
}
#line 898 "../src/parse/lexer.re"

    } else {
        
#line 5799 "src/parse/lexer.cc"
{
	uint8_t yych;
	unsigned int yyaccept = 0;
	if ((lim - cur) < 10) if (!fill(10)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yych <= 0x7F) {
		if (yych <= '\f') {
			if (yych == '\n') goto yy667;
		} else {
			if (yych <= '\r') goto yy668;
			if (yych == '\\') goto yy669;
		}
	} else {
		if (yych <= 0xEF) {
			if (yych <= 0xC1) goto yy671;
			if (yych <= 0xDF) goto yy673;
			if (yych <= 0xE0) goto yy674;
			goto yy675;
		} else {
			if (yych <= 0xF0) goto yy676;
			if (yych <= 0xF3) goto yy677;
			if (yych <= 0xF4) goto yy678;
			goto yy671;
		}
	}
yy665:
	++cur;
yy666:
#line 880 "../src/parse/lexer.re"
	{ ast.chr = decode(tok); stop = (tok[0] == quote); return Ret::OK; }
#line 5830 "src/parse/lexer.cc"
yy667:
	++cur;
#line 874 "../src/parse/lexer.re"
	{ RET_FAIL(error_at(ast.loc, "newline in character string")); }
#line 5835 "src/parse/lexer.cc"
yy668:
	yych = *++cur;
	if (yych == '\n') goto yy667;
	goto yy666;
yy669:
	yyaccept = 0;
	yych = *(mar = ++cur);
	if (yych <= 'f') {
		if (yych <= 'T') {
			if (yych <= '\f') {
				if (yych <= 0x00) goto yy670;
				if (yych == '\n') goto yy667;
				goto yy679;
			} else {
				if (yych <= '/') {
					if (yych <= '\r') goto yy681;
					goto yy679;
				} else {
					if (yych <= '3') goto yy682;
					if (yych <= '7') goto yy684;
					goto yy679;
				}
			}
		} else {
			if (yych <= '\\') {
				if (yych <= 'W') {
					if (yych <= 'U') goto yy685;
					goto yy679;
				} else {
					if (yych <= 'X') goto yy687;
					if (yych <= '[') goto yy679;
					goto yy688;
				}
			} else {
				if (yych <= 'a') {
					if (yych <= '`') goto yy679;
					goto yy689;
				} else {
					if (yych <= 'b') goto yy690;
					if (yych <= 'e') goto yy679;
					goto yy691;
				}
			}
		}
	} else {
		if (yych <= 'w') {
			if (yych <= 'r') {
				if (yych == 'n') goto yy692;
				if (yych <= 'q') goto yy679;
				goto yy693;
			} else {
				if (yych <= 't') {
					if (yych <= 's') goto yy679;
					goto yy694;
				} else {
					if (yych <= 'u') goto yy687;
					if (yych <= 'v') goto yy695;
					goto yy679;
				}
			}
		} else {
			if (yych <= 0xE0) {
				if (yych <= 0x7F) {
					if (yych <= 'x') goto yy696;
					goto yy679;
				} else {
					if (yych <= 0xC1) goto yy670;
					if (yych <= 0xDF) goto yy697;
					goto yy699;
				}
			} else {
				if (yych <= 0xF0) {
					if (yych <= 0xEF) goto yy700;
					goto yy701;
				} else {
					if (yych <= 0xF3) goto yy702;
					if (yych <= 0xF4) goto yy703;
				}
			}
		}
	}
yy670:
#line 877 "../src/parse/lexer.re"
	{ RET_FAIL(error_at(ast.loc, "syntax error in escape sequence")); }
#line 5920 "src/parse/lexer.cc"
yy671:
	++cur;
yy672:
#line 878 "../src/parse/lexer.re"
	{ RET_FAIL(error_at(ast.loc, "syntax error")); }
#line 5926 "src/parse/lexer.cc"
yy673:
	yych = *++cur;
	if (yych <= 0x7F) goto yy672;
	if (yych <= 0xBF) goto yy665;
	goto yy672;
yy674:
	yyaccept = 1;
	yych = *(mar = ++cur);
	if (yych <= 0x9F) goto yy672;
	if (yych <= 0xBF) goto yy704;
	goto yy672;
yy675:
	yyaccept = 1;
	yych = *(mar = ++cur);
	if (yych <= 0x7F) goto yy672;
	if (yych <= 0xBF) goto yy704;
	goto yy672;
yy676:
	yyaccept = 1;
	yych = *(mar = ++cur);
	if (yych <= 0x8F) goto yy672;
	if (yych <= 0xBF) goto yy705;
	goto yy672;
yy677:
	yyaccept = 1;
	yych = *(mar = ++cur);
	if (yych <= 0x7F) goto yy672;
	if (yych <= 0xBF) goto yy705;
	goto yy672;
yy678:
	yyaccept = 1;
	yych = *(mar = ++cur);
	if (yych <= 0x7F) goto yy672;
	if (yych <= 0x8F) goto yy705;
	goto yy672;
yy679:
	++cur;
yy680:
#line 891 "../src/parse/lexer.re"
	{
        ast.chr = decode(tok + 1);
        if (tok[1] != quote) msg.warn.useless_escape(ast.loc, tok, cur);
        return Ret::OK;
    }
#line 5971 "src/parse/lexer.cc"
yy681:
	yych = *++cur;
	if (yych == '\n') goto yy667;
	goto yy680;
yy682:
	yyaccept = 2;
	yych = *(mar = ++cur);
	if (yych <= '/') goto yy683;
	if (yych <= '7') goto yy706;
yy683:
#line 876 "../src/parse/lexer.re"
	{ RET_FAIL(error_at(ast.loc, "syntax error in octal escape sequence")); }
#line 5984 "src/parse/lexer.cc"
yy684:
	++cur;
	goto yy683;
yy685:
	yyaccept = 3;
	yych = *(mar = ++cur);
	if (yych <= '@') {
		if (yych <= '/') goto yy686;
		if (yych <= '9') goto yy707;
	} else {
		if (yych <= 'F') goto yy707;
		if (yych <= '`') goto yy686;
		if (yych <= 'f') goto yy707;
	}
yy686:
#line 875 "../src/parse/lexer.re"
	{ RET_FAIL(error_at(ast.loc, "syntax error in hexadecimal escape sequence")); }
#line 6002 "src/parse/lexer.cc"
yy687:
	yyaccept = 3;
	yych = *(mar = ++cur);
	if (yych <= '@') {
		if (yych <= '/') goto yy686;
		if (yych <= '9') goto yy708;
		goto yy686;
	} else {
		if (yych <= 'F') goto yy708;
		if (yych <= '`') goto yy686;
		if (yych <= 'f') goto yy708;
		goto yy686;
	}
yy688:
	++cur;
#line 890 "../src/parse/lexer.re"
	{ ast.chr = '\\'_u8; return Ret::OK; }
#line 6020 "src/parse/lexer.cc"
yy689:
	++cur;
#line 883 "../src/parse/lexer.re"
	{ ast.chr = '\a'_u8; return Ret::OK; }
#line 6025 "src/parse/lexer.cc"
yy690:
	++cur;
#line 884 "../src/parse/lexer.re"
	{ ast.chr = '\b'_u8; return Ret::OK; }
#line 6030 "src/parse/lexer.cc"
yy691:
	++cur;
#line 885 "../src/parse/lexer.re"
	{ ast.chr = '\f'_u8; return Ret::OK; }
#line 6035 "src/parse/lexer.cc"
yy692:
	++cur;
#line 886 "../src/parse/lexer.re"
	{ ast.chr = '\n'_u8; return Ret::OK; }
#line 6040 "src/parse/lexer.cc"
yy693:
	++cur;
#line 887 "../src/parse/lexer.re"
	{ ast.chr = '\r'_u8; return Ret::OK; }
#line 6045 "src/parse/lexer.cc"
yy694:
	++cur;
#line 888 "../src/parse/lexer.re"
	{ ast.chr = '\t'_u8; return Ret::OK; }
#line 6050 "src/parse/lexer.cc"
yy695:
	++cur;
#line 889 "../src/parse/lexer.re"
	{ ast.chr = '\v'_u8; return Ret::OK; }
#line 6055 "src/parse/lexer.cc"
yy696:
	yyaccept = 3;
	yych = *(mar = ++cur);
	if (yych <= '@') {
		if (yych <= '/') goto yy686;
		if (yych <= '9') goto yy709;
		goto yy686;
	} else {
		if (yych <= 'F') goto yy709;
		if (yych <= '`') goto yy686;
		if (yych <= 'f') goto yy709;
		goto yy686;
	}
yy697:
	yych = *++cur;
	if (yych <= 0x7F) goto yy698;
	if (yych <= 0xBF) goto yy679;
yy698:
	cur = mar;
	if (yyaccept <= 1) {
		if (yyaccept == 0) {
			goto yy670;
		} else {
			goto yy672;
		}
	} else {
		if (yyaccept == 2) {
			goto yy683;
		} else {
			goto yy686;
		}
	}
yy699:
	yych = *++cur;
	if (yych <= 0x9F) goto yy698;
	if (yych <= 0xBF) goto yy697;
	goto yy698;
yy700:
	yych = *++cur;
	if (yych <= 0x7F) goto yy698;
	if (yych <= 0xBF) goto yy697;
	goto yy698;
yy701:
	yych = *++cur;
	if (yych <= 0x8F) goto yy698;
	if (yych <= 0xBF) goto yy700;
	goto yy698;
yy702:
	yych = *++cur;
	if (yych <= 0x7F) goto yy698;
	if (yych <= 0xBF) goto yy700;
	goto yy698;
yy703:
	yych = *++cur;
	if (yych <= 0x7F) goto yy698;
	if (yych <= 0x8F) goto yy700;
	goto yy698;
yy704:
	yych = *++cur;
	if (yych <= 0x7F) goto yy698;
	if (yych <= 0xBF) goto yy665;
	goto yy698;
yy705:
	yych = *++cur;
	if (yych <= 0x7F) goto yy698;
	if (yych <= 0xBF) goto yy704;
	goto yy698;
yy706:
	yych = *++cur;
	if (yych <= '/') goto yy698;
	if (yych <= '7') goto yy710;
	goto yy698;
yy707:
	yych = *++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy698;
		if (yych <= '9') goto yy711;
		goto yy698;
	} else {
		if (yych <= 'F') goto yy711;
		if (yych <= '`') goto yy698;
		if (yych <= 'f') goto yy711;
		goto yy698;
	}
yy708:
	yych = *++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy698;
		if (yych <= '9') goto yy712;
		goto yy698;
	} else {
		if (yych <= 'F') goto yy712;
		if (yych <= '`') goto yy698;
		if (yych <= 'f') goto yy712;
		goto yy698;
	}
yy709:
	yych = *++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy698;
		if (yych <= '9') goto yy713;
		goto yy698;
	} else {
		if (yych <= 'F') goto yy713;
		if (yych <= '`') goto yy698;
		if (yych <= 'f') goto yy713;
		goto yy698;
	}
yy710:
	++cur;
#line 882 "../src/parse/lexer.re"
	{ ast.chr = unesc_oct(tok, cur); return Ret::OK; }
#line 6168 "src/parse/lexer.cc"
yy711:
	yych = *++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy698;
		if (yych <= '9') goto yy714;
		goto yy698;
	} else {
		if (yych <= 'F') goto yy714;
		if (yych <= '`') goto yy698;
		if (yych <= 'f') goto yy714;
		goto yy698;
	}
yy712:
	yych = *++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy698;
		if (yych <= '9') goto yy709;
		goto yy698;
	} else {
		if (yych <= 'F') goto yy709;
		if (yych <= '`') goto yy698;
		if (yych <= 'f') goto yy709;
		goto yy698;
	}
yy713:
	++cur;
#line 881 "../src/parse/lexer.re"
	{ ast.chr = unesc_hex(tok, cur); return Ret::OK; }
#line 6197 "src/parse/lexer.cc"
yy714:
	yych = *++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy698;
		if (yych >= ':') goto yy698;
	} else {
		if (yych <= 'F') goto yy715;
		if (yych <= '`') goto yy698;
		if (yych >= 'g') goto yy698;
	}
yy715:
	yych = *++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy698;
		if (yych <= '9') goto yy708;
		goto yy698;
	} else {
		if (yych <= 'F') goto yy708;
		if (yych <= '`') goto yy698;
		if (yych <= 'f') goto yy708;
		goto yy698;
	}
}
#line 900 "../src/parse/lexer.re"

    }
}

Ret Input::lex_str(Ast& ast, uint8_t quote, const AstNode*& a) {
    const loc_t& loc = tok_loc();
    AstChar c;
    bool stop;
    for (;;) {
        CHECK_RET(lex_str_chr(quote, c, stop));
        if (stop) {
            a = ast.str(loc, quote == '\'');
            return Ret::OK;
        }
        ast.temp_chars.push_back(c);
    }
}

Ret Input::set_sourceline() {
sourceline:
    tok = cur;

#line 6244 "src/parse/lexer.cc"
{
	uint8_t yych;
	static const unsigned char yybm[] = {
		  0, 128, 128, 128, 128, 128, 128, 128, 
		128, 128,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		192, 192, 192, 192, 192, 192, 192, 192, 
		192, 192, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128,   0, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
	};
	if ((lim - cur) < 2) if (!fill(2)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yych <= '\r') {
		if (yych <= '\t') {
			if (yych >= 0x01) goto yy717;
		} else {
			if (yych <= '\n') goto yy719;
			if (yych <= '\f') goto yy717;
			goto yy720;
		}
	} else {
		if (yych <= '"') {
			if (yych <= '!') goto yy717;
			goto yy721;
		} else {
			if (yych <= '0') goto yy717;
			if (yych <= '9') goto yy722;
			goto yy717;
		}
	}
	++cur;
#line 941 "../src/parse/lexer.re"
	{ --cur; return Ret::OK; }
#line 6304 "src/parse/lexer.cc"
yy717:
	++cur;
yy718:
#line 942 "../src/parse/lexer.re"
	{ goto sourceline; }
#line 6310 "src/parse/lexer.cc"
yy719:
	++cur;
#line 940 "../src/parse/lexer.re"
	{ pos = tok = cur; return Ret::OK; }
#line 6315 "src/parse/lexer.cc"
yy720:
	yych = *++cur;
	if (yych == '\n') goto yy719;
	goto yy718;
yy721:
	yych = *(mar = ++cur);
	if (yych <= 0x00) goto yy718;
	if (yych == '\n') goto yy718;
	goto yy724;
yy722:
	++cur;
	if (lim <= cur) if (!fill(1)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yybm[0+yych] & 64) {
		goto yy722;
	}
#line 922 "../src/parse/lexer.re"
	{
        uint32_t l;
        if (!s_to_u32_unsafe(tok, cur, l)) {
            RET_FAIL(error_at_tok("line number overflow"));
        }
        set_line(l);
        goto sourceline;
    }
#line 6341 "src/parse/lexer.cc"
yy723:
	++cur;
	if (lim <= cur) if (!fill(1)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
yy724:
	if (yybm[0+yych] & 128) {
		goto yy723;
	}
	if (yych <= '\n') goto yy725;
	if (yych <= '"') goto yy726;
	goto yy727;
yy725:
	cur = mar;
	goto yy718;
yy726:
	++cur;
#line 931 "../src/parse/lexer.re"
	{
        InputFile &in = get_input();
        std::string &name = in.escaped_name;
        name = escape_backslashes(getstr(tok + 1, cur - 1));
        in.fidx = static_cast<uint32_t>(msg.filenames.size());
        msg.filenames.push_back(name);
        goto sourceline;
    }
#line 6367 "src/parse/lexer.cc"
yy727:
	++cur;
	if (lim <= cur) if (!fill(1)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yych <= 0x00) goto yy725;
	if (yych == '\n') goto yy725;
	goto yy723;
}
#line 943 "../src/parse/lexer.re"

}

#undef YYFILL

} // end namespace re2c

/* Generated by re2c 3.0 */
#line 1 "../src/parse/lexer.re"
#include <ctype.h>
#include <stdint.h>
#include <limits>
#include <string>
#include <utility>
#include <vector>

#include "src/codegen/output.h"
#include "src/encoding/enc.h"
#include "src/msg/location.h"
#include "src/msg/msg.h"
#include "src/msg/warn.h"
#include "src/options/opt.h"
#include "src/parse/ast.h"
#include "src/parse/input.h"
#include "src/parse/lexer.h"
#include "src/regexp/rule.h"
#include "src/util/check.h"
#include "src/util/string_utils.h"
#include "parser.h"

namespace re2c {

#line 27 "src/parse/lexer.cc"
size_t LexerState::maxfill_main() { return 18; }
#line 24 "../src/parse/lexer.re"


// Global re2c configurations and definitions.
#line 59 "../src/parse/lexer.re"


#line 132 "../src/parse/lexer.re"


#define RET_BLOCK(k) do { kind = k; return Ret::OK; } while(0)

Ret Input::lex_program(Output& out, std::string& block_name, InputBlock& kind) {
    const opt_t* opts = out.block().opts;
    OutAllocator& alc = out.allocator;
    const uint8_t* x, *y;

    if (is_eof()) RET_BLOCK(InputBlock::END);

next:
    tok = cur;
loop:
    location = cur_loc();
    ptr = cur;

#line 54 "src/parse/lexer.cc"
{
	uint8_t yych;
	unsigned int yyaccept = 0;
	static const unsigned char yybm[] = {
		  0, 128, 128, 128, 128, 128, 128, 128, 
		128, 160,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		160, 128,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		192, 192, 192, 192, 192, 192, 192, 192, 
		192, 192, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128,   0, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
	};
	if ((lim - cur) < 18) if (!fill(18)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yych <= '\r') {
		if (yych <= '\t') {
			if (yych <= 0x00) goto yy1;
			if (yych <= 0x08) goto yy2;
			goto yy4;
		} else {
			if (yych <= '\n') goto yy5;
			if (yych <= '\f') goto yy2;
			goto yy7;
		}
	} else {
		if (yych <= '$') {
			if (yych == ' ') goto yy4;
			goto yy2;
		} else {
			if (yych <= '%') goto yy8;
			if (yych == '/') goto yy9;
			goto yy2;
		}
	}
yy1:
	++cur;
#line 276 "../src/parse/lexer.re"
	{
        if (is_eof()) {
            out.gen_raw(tok, ptr);
            RET_BLOCK(InputBlock::END);
        }
        goto loop;
    }
#line 124 "src/parse/lexer.cc"
yy2:
	++cur;
yy3:
#line 296 "../src/parse/lexer.re"
	{ goto loop; }
#line 130 "src/parse/lexer.cc"
yy4:
	yyaccept = 0;
	yych = *(mar = ++cur);
	if (yybm[0+yych] & 32) {
		goto yy10;
	}
	if (yych == '%') goto yy12;
	goto yy3;
yy5:
	yyaccept = 1;
	yych = *(mar = ++cur);
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy13;
	} else {
		if (yych <= ' ') goto yy13;
		if (yych == '#') goto yy14;
	}
yy6:
#line 291 "../src/parse/lexer.re"
	{
        next_line();
        goto loop;
    }
#line 154 "src/parse/lexer.cc"
yy7:
	yych = *++cur;
	if (yych == '\n') goto yy5;
	goto yy3;
yy8:
	yych = *++cur;
	if (yych == '{') goto yy15;
	goto yy3;
yy9:
	yyaccept = 0;
	yych = *(mar = ++cur);
	if (yych == '*') goto yy16;
	goto yy3;
yy10:
	++cur;
	if ((lim - cur) < 2) if (!fill(2)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yybm[0+yych] & 32) {
		goto yy10;
	}
	if (yych == '%') goto yy12;
yy11:
	cur = mar;
	if (yyaccept <= 2) {
		if (yyaccept <= 1) {
			if (yyaccept == 0) {
				goto yy3;
			} else {
				goto yy6;
			}
		} else {
			goto yy155;
		}
	} else {
		if (yyaccept == 3) {
			goto yy157;
		} else {
			goto yy165;
		}
	}
yy12:
	yych = *++cur;
	if (yych == '{') goto yy15;
	goto yy11;
yy13:
	++cur;
	if (lim <= cur) if (!fill(1)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy13;
		goto yy11;
	} else {
		if (yych <= ' ') goto yy13;
		if (yych != '#') goto yy11;
	}
yy14:
	++cur;
	if ((lim - cur) < 5) if (!fill(5)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy14;
		goto yy11;
	} else {
		if (yych <= ' ') goto yy14;
		if (yych == 'l') goto yy17;
		goto yy11;
	}
yy15:
	++cur;
#line 149 "../src/parse/lexer.re"
	{
        if (pos != ptr) {
            // re2c does not parse user-defined code outside of re2c blocks, therefore it can
            // confuse `%{` in the middle of a string or a comment with a block start. To avoid this
            // recognize `%{` as a block start only on a new line, possibly preceded by whitespaces.
            goto loop;
        }
        out.gen_raw(tok, ptr);
        block_name.clear();
        RET_BLOCK(InputBlock::GLOBAL);
    }
#line 236 "src/parse/lexer.cc"
yy16:
	yych = *++cur;
	if (yych == '!') goto yy18;
	goto yy11;
yy17:
	yych = *++cur;
	if (yych == 'i') goto yy19;
	goto yy11;
yy18:
	yych = *++cur;
	switch (yych) {
		case 'c': goto yy20;
		case 'g': goto yy21;
		case 'h': goto yy22;
		case 'i': goto yy23;
		case 'l': goto yy24;
		case 'm': goto yy25;
		case 'r': goto yy26;
		case 's': goto yy27;
		case 't': goto yy28;
		case 'u': goto yy29;
		default: goto yy11;
	}
yy19:
	yych = *++cur;
	if (yych == 'n') goto yy30;
	goto yy11;
yy20:
	yych = *++cur;
	if (yych == 'o') goto yy31;
	goto yy11;
yy21:
	yych = *++cur;
	if (yych == 'e') goto yy32;
	goto yy11;
yy22:
	yych = *++cur;
	if (yych == 'e') goto yy33;
	goto yy11;
yy23:
	yych = *++cur;
	if (yych == 'g') goto yy34;
	if (yych == 'n') goto yy35;
	goto yy11;
yy24:
	yych = *++cur;
	if (yych == 'o') goto yy36;
	goto yy11;
yy25:
	yych = *++cur;
	if (yych == 'a') goto yy37;
	if (yych == 't') goto yy38;
	goto yy11;
yy26:
	yych = *++cur;
	if (yych == 'e') goto yy39;
	if (yych == 'u') goto yy40;
	goto yy11;
yy27:
	yych = *++cur;
	if (yych == 't') goto yy41;
	goto yy11;
yy28:
	yych = *++cur;
	if (yych == 'y') goto yy42;
	goto yy11;
yy29:
	yych = *++cur;
	if (yych == 's') goto yy43;
	goto yy11;
yy30:
	yych = *++cur;
	if (yych == 'e') goto yy44;
	goto yy11;
yy31:
	yych = *++cur;
	if (yych == 'n') goto yy45;
	goto yy11;
yy32:
	yych = *++cur;
	if (yych == 't') goto yy46;
	goto yy11;
yy33:
	yych = *++cur;
	if (yych == 'a') goto yy47;
	goto yy11;
yy34:
	yych = *++cur;
	if (yych == 'n') goto yy48;
	goto yy11;
yy35:
	yych = *++cur;
	if (yych == 'c') goto yy49;
	goto yy11;
yy36:
	yych = *++cur;
	if (yych == 'c') goto yy50;
	goto yy11;
yy37:
	yych = *++cur;
	if (yych == 'x') goto yy51;
	goto yy11;
yy38:
	yych = *++cur;
	if (yych == 'a') goto yy52;
	goto yy11;
yy39:
	yych = *++cur;
	if (yych == '2') goto yy53;
	goto yy11;
yy40:
	yych = *++cur;
	if (yych == 'l') goto yy54;
	goto yy11;
yy41:
	yych = *++cur;
	if (yych == 'a') goto yy55;
	goto yy11;
yy42:
	yych = *++cur;
	if (yych == 'p') goto yy56;
	goto yy11;
yy43:
	yych = *++cur;
	if (yych == 'e') goto yy57;
	goto yy11;
yy44:
	yych = *++cur;
	if (yych <= '0') goto yy59;
	if (yych <= '9') goto yy11;
	goto yy59;
yy45:
	yych = *++cur;
	if (yych == 'd') goto yy60;
	goto yy11;
yy46:
	yych = *++cur;
	if (yych == 's') goto yy61;
	goto yy11;
yy47:
	yych = *++cur;
	if (yych == 'd') goto yy62;
	goto yy11;
yy48:
	yych = *++cur;
	if (yych == 'o') goto yy63;
	goto yy11;
yy49:
	yych = *++cur;
	if (yych == 'l') goto yy64;
	goto yy11;
yy50:
	yych = *++cur;
	if (yych == 'a') goto yy65;
	goto yy11;
yy51:
	yych = *++cur;
	if (yych == ':') goto yy66;
	if (yych == 'n') goto yy67;
	goto yy11;
yy52:
	yych = *++cur;
	if (yych == 'g') goto yy68;
	goto yy11;
yy53:
	yych = *++cur;
	if (yych == 'c') goto yy69;
	goto yy11;
yy54:
	yych = *++cur;
	if (yych == 'e') goto yy70;
	goto yy11;
yy55:
	yych = *++cur;
	if (yych == 'g') goto yy71;
	goto yy11;
yy56:
	yych = *++cur;
	if (yych == 'e') goto yy72;
	goto yy11;
yy57:
	yych = *++cur;
	if (yych == ':') goto yy73;
	goto yy11;
yy58:
	++cur;
	if (lim <= cur) if (!fill(1)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
yy59:
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy58;
		goto yy11;
	} else {
		if (yych <= ' ') goto yy58;
		if (yych <= '0') goto yy11;
		if (yych <= '9') {
			yyt1 = cur;
			goto yy74;
		}
		goto yy11;
	}
yy60:
	yych = *++cur;
	if (yych == 'i') goto yy75;
	goto yy11;
yy61:
	yych = *++cur;
	if (yych == 't') goto yy76;
	goto yy11;
yy62:
	yych = *++cur;
	if (yych == 'e') goto yy77;
	goto yy11;
yy63:
	yych = *++cur;
	if (yych == 'r') goto yy78;
	goto yy11;
yy64:
	yych = *++cur;
	if (yych == 'u') goto yy79;
	goto yy11;
yy65:
	yych = *++cur;
	if (yych == 'l') goto yy80;
	goto yy11;
yy66:
	yych = *++cur;
	if (yych == 'r') goto yy81;
	goto yy11;
yy67:
	yych = *++cur;
	if (yych == 'm') goto yy82;
	goto yy11;
yy68:
	yych = *++cur;
	if (yych == 's') goto yy83;
	goto yy11;
yy69:
	++cur;
#line 161 "../src/parse/lexer.re"
	{
        out.gen_raw(tok, ptr);
        CHECK_RET(lex_opt_name(block_name));
        if (block_name == "local") {
            RET_FAIL(error_at_cur("ill-formed local block, expected `local:re2c`"));
        }
        RET_BLOCK(InputBlock::GLOBAL);
    }
#line 485 "src/parse/lexer.cc"
yy70:
	yych = *++cur;
	if (yych == 's') goto yy84;
	goto yy11;
yy71:
	yych = *++cur;
	if (yych == 's') goto yy85;
	goto yy11;
yy72:
	yych = *++cur;
	if (yych == 's') goto yy86;
	goto yy11;
yy73:
	yych = *++cur;
	if (yych == 'r') goto yy87;
	goto yy11;
yy74:
	++cur;
	if ((lim - cur) < 2) if (!fill(2)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yybm[0+yych] & 64) {
		goto yy74;
	}
	if (yych <= '\f') {
		if (yych <= 0x08) goto yy11;
		if (yych <= '\t') goto yy88;
		if (yych <= '\n') goto yy89;
		goto yy11;
	} else {
		if (yych <= '\r') goto yy90;
		if (yych == ' ') goto yy88;
		goto yy11;
	}
yy75:
	yych = *++cur;
	if (yych == 't') goto yy91;
	goto yy11;
yy76:
	yych = *++cur;
	if (yych == 'a') goto yy92;
	goto yy11;
yy77:
	yych = *++cur;
	if (yych == 'r') goto yy93;
	goto yy11;
yy78:
	yych = *++cur;
	if (yych == 'e') goto yy94;
	goto yy11;
yy79:
	yych = *++cur;
	if (yych == 'd') goto yy95;
	goto yy11;
yy80:
	yych = *++cur;
	if (yych == ':') goto yy96;
	goto yy11;
yy81:
	yych = *++cur;
	if (yych == 'e') goto yy97;
	goto yy11;
yy82:
	yych = *++cur;
	if (yych == 'a') goto yy98;
	goto yy11;
yy83:
	yych = *++cur;
	if (yych == ':') goto yy99;
	goto yy11;
yy84:
	yych = *++cur;
	if (yych == ':') goto yy100;
	goto yy11;
yy85:
	yych = *++cur;
	if (yych == ':') goto yy101;
	goto yy11;
yy86:
	yych = *++cur;
	if (yych == ':') goto yy102;
	goto yy11;
yy87:
	yych = *++cur;
	if (yych == 'e') goto yy103;
	goto yy11;
yy88:
	++cur;
	if (lim <= cur) if (!fill(1)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy88;
		goto yy11;
	} else {
		if (yych <= ' ') goto yy88;
		if (yych == '"') goto yy104;
		goto yy11;
	}
yy89:
	++cur;
	cur = yyt1;
#line 284 "../src/parse/lexer.re"
	{
        out.gen_raw(tok, ptr);
        out.gen_stmt(code_newline(alc));
        CHECK_RET(set_sourceline());
        goto next;
    }
#line 593 "src/parse/lexer.cc"
yy90:
	yych = *++cur;
	if (yych == '\n') goto yy89;
	goto yy11;
yy91:
	yych = *++cur;
	if (yych == 'i') goto yy105;
	goto yy11;
yy92:
	yych = *++cur;
	if (yych == 't') goto yy106;
	goto yy11;
yy93:
	yych = *++cur;
	if (yych == ':') goto yy107;
	goto yy11;
yy94:
	yych = *++cur;
	if (yych == ':') goto yy108;
	goto yy11;
yy95:
	yych = *++cur;
	if (yych == 'e') goto yy109;
	goto yy11;
yy96:
	yych = *++cur;
	if (yych == 'r') goto yy110;
	goto yy11;
yy97:
	yych = *++cur;
	if (yych == '2') goto yy111;
	goto yy11;
yy98:
	yych = *++cur;
	if (yych == 't') goto yy112;
	goto yy11;
yy99:
	yych = *++cur;
	if (yych == 'r') goto yy113;
	goto yy11;
yy100:
	yych = *++cur;
	if (yych == 'r') goto yy114;
	goto yy11;
yy101:
	yych = *++cur;
	if (yych == 'r') goto yy115;
	goto yy11;
yy102:
	yych = *++cur;
	if (yych == 'r') goto yy116;
	goto yy11;
yy103:
	yych = *++cur;
	if (yych == '2') goto yy117;
	goto yy11;
yy104:
	++cur;
	if ((lim - cur) < 3) if (!fill(3)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yybm[0+yych] & 128) {
		goto yy104;
	}
	if (yych <= '\n') goto yy11;
	if (yych <= '"') goto yy118;
	goto yy119;
yy105:
	yych = *++cur;
	if (yych == 'o') goto yy120;
	goto yy11;
yy106:
	yych = *++cur;
	if (yych == 'e') goto yy121;
	goto yy11;
yy107:
	yych = *++cur;
	if (yych == 'r') goto yy122;
	goto yy11;
yy108:
	yych = *++cur;
	if (yych == 'r') goto yy123;
	goto yy11;
yy109:
	yych = *++cur;
	if (yych == ':') goto yy124;
	goto yy11;
yy110:
	yych = *++cur;
	if (yych == 'e') goto yy125;
	goto yy11;
yy111:
	yych = *++cur;
	if (yych == 'c') goto yy126;
	goto yy11;
yy112:
	yych = *++cur;
	if (yych == 'c') goto yy127;
	goto yy11;
yy113:
	yych = *++cur;
	if (yych == 'e') goto yy128;
	goto yy11;
yy114:
	yych = *++cur;
	if (yych == 'e') goto yy129;
	goto yy11;
yy115:
	yych = *++cur;
	if (yych == 'e') goto yy130;
	goto yy11;
yy116:
	yych = *++cur;
	if (yych == 'e') goto yy131;
	goto yy11;
yy117:
	yych = *++cur;
	if (yych == 'c') goto yy132;
	goto yy11;
yy118:
	yych = *++cur;
	if (yych == '\n') goto yy89;
	if (yych == '\r') goto yy90;
	goto yy11;
yy119:
	++cur;
	if (lim <= cur) if (!fill(1)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yych <= 0x00) goto yy11;
	if (yych == '\n') goto yy11;
	goto yy104;
yy120:
	yych = *++cur;
	if (yych == 'n') goto yy72;
	goto yy11;
yy121:
	yych = *++cur;
	if (yych == ':') goto yy133;
	goto yy11;
yy122:
	yych = *++cur;
	if (yych == 'e') goto yy134;
	goto yy11;
yy123:
	yych = *++cur;
	if (yych == 'e') goto yy135;
	goto yy11;
yy124:
	yych = *++cur;
	if (yych == 'r') goto yy136;
	goto yy11;
yy125:
	yych = *++cur;
	if (yych == '2') goto yy137;
	goto yy11;
yy126:
	++cur;
#line 188 "../src/parse/lexer.re"
	{
        CHECK_RET(lex_special_block(out, CodeKind::MAXFILL, DCONF_FORMAT));
        goto next;
    }
#line 755 "src/parse/lexer.cc"
yy127:
	yych = *++cur;
	if (yych == 'h') goto yy138;
	goto yy11;
yy128:
	yych = *++cur;
	if (yych == '2') goto yy139;
	goto yy11;
yy129:
	yych = *++cur;
	if (yych == '2') goto yy140;
	goto yy11;
yy130:
	yych = *++cur;
	if (yych == '2') goto yy141;
	goto yy11;
yy131:
	yych = *++cur;
	if (yych == '2') goto yy142;
	goto yy11;
yy132:
	++cur;
#line 182 "../src/parse/lexer.re"
	{
        out.gen_raw(tok, ptr);
        CHECK_RET(lex_opt_name(block_name));
        RET_BLOCK(InputBlock::USE);
    }
#line 784 "src/parse/lexer.cc"
yy133:
	yych = *++cur;
	if (yych == 'r') goto yy143;
	goto yy11;
yy134:
	yych = *++cur;
	if (yych == '2') goto yy144;
	goto yy11;
yy135:
	yych = *++cur;
	if (yych == '2') goto yy145;
	goto yy11;
yy136:
	yych = *++cur;
	if (yych == 'e') goto yy146;
	goto yy11;
yy137:
	yych = *++cur;
	if (yych == 'c') goto yy147;
	goto yy11;
yy138:
	yych = *++cur;
	if (yych == ':') goto yy148;
	goto yy11;
yy139:
	yych = *++cur;
	if (yych == 'c') goto yy149;
	goto yy11;
yy140:
	yych = *++cur;
	if (yych == 'c') goto yy150;
	goto yy11;
yy141:
	yych = *++cur;
	if (yych == 'c') goto yy151;
	goto yy11;
yy142:
	yych = *++cur;
	if (yych == 'c') goto yy152;
	goto yy11;
yy143:
	yych = *++cur;
	if (yych == 'e') goto yy153;
	goto yy11;
yy144:
	yych = *++cur;
	if (yych == 'c') goto yy154;
	goto yy11;
yy145:
	yych = *++cur;
	if (yych == 'c') goto yy156;
	goto yy11;
yy146:
	yych = *++cur;
	if (yych == '2') goto yy158;
	goto yy11;
yy147:
	++cur;
#line 170 "../src/parse/lexer.re"
	{
        out.gen_raw(tok, ptr);
        CHECK_RET(lex_opt_name(block_name));
        RET_BLOCK(InputBlock::LOCAL);
    }
#line 849 "src/parse/lexer.cc"
yy148:
	yych = *++cur;
	if (yych == 'r') goto yy159;
	goto yy11;
yy149:
	++cur;
#line 204 "../src/parse/lexer.re"
	{
        uint32_t allow = DCONF_FORMAT | DCONF_SEPARATOR;
        CHECK_RET(lex_special_block(out, CodeKind::MTAGS, allow));
        goto next;
    }
#line 862 "src/parse/lexer.cc"
yy150:
	++cur;
#line 176 "../src/parse/lexer.re"
	{
        out.gen_raw(tok, ptr);
        CHECK_RET(lex_opt_name(block_name));
        RET_BLOCK(InputBlock::RULES);
    }
#line 871 "src/parse/lexer.cc"
yy151:
	++cur;
#line 198 "../src/parse/lexer.re"
	{
        uint32_t allow = DCONF_FORMAT | DCONF_SEPARATOR;
        CHECK_RET(lex_special_block(out, CodeKind::STAGS, allow));
        goto next;
    }
#line 880 "src/parse/lexer.cc"
yy152:
	++cur;
#line 210 "../src/parse/lexer.re"
	{
        out.cond_enum_autogen = false;
        out.warn_condition_order = false; // see note [condition order]
        uint32_t allow = DCONF_FORMAT | DCONF_SEPARATOR;
        CHECK_RET(lex_special_block(out, CodeKind::COND_ENUM, allow));
        goto next;
    }
#line 891 "src/parse/lexer.cc"
yy153:
	yych = *++cur;
	if (yych == '2') goto yy160;
	goto yy11;
yy154:
	yyaccept = 2;
	yych = *(mar = ++cur);
	if (yych == ':') goto yy161;
yy155:
#line 246 "../src/parse/lexer.re"
	{
        RET_FAIL(error_at_cur(
                "ill-formed header directive: expected `/*!header:re2c:<on|off>` followed by a"
                " space, a newline or the end of block `*" "/`"));
    }
#line 907 "src/parse/lexer.cc"
yy156:
	yyaccept = 3;
	yych = *(mar = ++cur);
	if (yych <= '\r') {
		if (yych <= 0x08) goto yy157;
		if (yych <= '\n') {
			yyt1 = cur;
			goto yy162;
		}
		if (yych >= '\r') {
			yyt1 = cur;
			goto yy162;
		}
	} else {
		if (yych <= ' ') {
			if (yych >= ' ') {
				yyt1 = cur;
				goto yy162;
			}
		} else {
			if (yych == '*') {
				yyt1 = cur;
				goto yy163;
			}
		}
	}
yy157:
#line 270 "../src/parse/lexer.re"
	{
        RET_FAIL(error_at_cur(
                "ill-formed start of `ignore:re2c` block: expected a space, a newline, or the end"
                " of block `*" "/`"));
    }
#line 941 "src/parse/lexer.cc"
yy158:
	yych = *++cur;
	if (yych == 'c') goto yy164;
	goto yy11;
yy159:
	yych = *++cur;
	if (yych == 'e') goto yy166;
	goto yy11;
yy160:
	yych = *++cur;
	if (yych == 'c') goto yy167;
	goto yy11;
yy161:
	yych = *++cur;
	if (yych == 'o') goto yy168;
	goto yy11;
yy162:
	++cur;
	cur = yyt1;
#line 264 "../src/parse/lexer.re"
	{
        out.gen_raw(tok, ptr);
        // allows arbitrary garbage before the end of the comment
        CHECK_RET(lex_block_end(out, true));
        goto next;
    }
#line 968 "src/parse/lexer.cc"
yy163:
	yych = *++cur;
	if (yych == '/') goto yy162;
	goto yy11;
yy164:
	yyaccept = 4;
	yych = *(mar = ++cur);
	if (yych == '\t') goto yy169;
	if (yych == ' ') goto yy169;
yy165:
#line 259 "../src/parse/lexer.re"
	{
        RET_FAIL(error_at_cur(
                "ill-formed include directive: expected `/*!include:re2c \"<file>\" *" "/`"));
    }
#line 984 "src/parse/lexer.cc"
yy166:
	yych = *++cur;
	if (yych == '2') goto yy170;
	goto yy11;
yy167:
	++cur;
#line 218 "../src/parse/lexer.re"
	{
        out.state_goto = true;
        if (!opts->storable_state) {
            RET_FAIL(error_at_cur("`getstate:re2c` without `-f --storable-state` option"));
        } else if (opts->code_model == CodeModel::LOOP_SWITCH) {
            RET_FAIL(error_at_cur(
                    "`getstate:re2c` is incompatible with --loop-switch code model, it requires"
                    " cross-block `goto` transitions or function calls"));
        }
        CHECK_RET(lex_special_block(out, CodeKind::STATE_GOTO, 0));
        goto next;
    }
#line 1004 "src/parse/lexer.cc"
yy168:
	yych = *++cur;
	if (yych == 'f') goto yy171;
	if (yych == 'n') goto yy172;
	goto yy11;
yy169:
	++cur;
	if (lim <= cur) if (!fill(1)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy169;
		goto yy11;
	} else {
		if (yych <= ' ') goto yy169;
		if (yych == '"') {
			yyt1 = cur;
			goto yy173;
		}
		goto yy11;
	}
yy170:
	yych = *++cur;
	if (yych == 'c') goto yy174;
	goto yy11;
yy171:
	yych = *++cur;
	if (yych == 'f') goto yy175;
	goto yy11;
yy172:
	++cur;
#line 231 "../src/parse/lexer.re"
	{
        out.gen_raw(tok, ptr);
        out.header_mode(true);
        out.need_header = true;
        CHECK_RET(lex_block_end(out));
        goto next;
    }
#line 1043 "src/parse/lexer.cc"
yy173:
	++cur;
	if ((lim - cur) < 3) if (!fill(3)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yych <= '!') {
		if (yych <= 0x00) goto yy11;
		if (yych == '\n') goto yy11;
		goto yy173;
	} else {
		if (yych <= '"') goto yy176;
		if (yych == '\\') goto yy177;
		goto yy173;
	}
yy174:
	++cur;
#line 193 "../src/parse/lexer.re"
	{
        CHECK_RET(lex_special_block(out, CodeKind::MAXNMATCH, DCONF_FORMAT));
        goto next;
    }
#line 1064 "src/parse/lexer.cc"
yy175:
	++cur;
#line 239 "../src/parse/lexer.re"
	{
        out.gen_raw(tok, ptr);
        out.header_mode(false);
        if (globopts->line_dirs) out.gen_stmt(code_line_info_input(alc, cur_loc()));
        CHECK_RET(lex_block_end(out));
        goto next;
    }
#line 1075 "src/parse/lexer.cc"
yy176:
	yych = *++cur;
	if (yych <= '\r') {
		if (yych <= 0x08) goto yy11;
		if (yych <= '\n') {
			yyt2 = cur;
			goto yy178;
		}
		if (yych <= '\f') goto yy11;
		yyt2 = cur;
		goto yy178;
	} else {
		if (yych <= ' ') {
			if (yych <= 0x1F) goto yy11;
			yyt2 = cur;
			goto yy178;
		} else {
			if (yych == '*') {
				yyt2 = cur;
				goto yy179;
			}
			goto yy11;
		}
	}
yy177:
	++cur;
	if (lim <= cur) if (!fill(1)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yych <= 0x00) goto yy11;
	if (yych == '\n') goto yy11;
	goto yy173;
yy178:
	++cur;
	x = yyt1;
	y = yyt2;
	cur = yyt2;
#line 252 "../src/parse/lexer.re"
	{
        out.gen_raw(tok, ptr);
        CHECK_RET(lex_block_end(out));
        CHECK_RET(include(getstr(x + 1, y - 1), ptr));
        if (globopts->line_dirs) out.gen_stmt(code_line_info_input(alc, cur_loc()));
        goto next;
    }
#line 1120 "src/parse/lexer.cc"
yy179:
	yych = *++cur;
	if (yych == '/') goto yy178;
	goto yy11;
}
#line 297 "../src/parse/lexer.re"

}

#undef RET_BLOCK

Ret Input::lex_opt_name(std::string& name) {
    tok = cur;

#line 1135 "src/parse/lexer.cc"
{
	uint8_t yych;
	static const unsigned char yybm[] = {
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128,   0,   0,   0,   0,   0,   0, 
		  0, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128,   0,   0,   0,   0, 128, 
		  0, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
	};
	if ((lim - cur) < 2) if (!fill(2)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *(mar = cur);
	if (yych <= 0x1F) {
		if (yych <= '\n') {
			if (yych >= '\t') {
				yyt1 = cur;
				goto yy182;
			}
		} else {
			if (yych == '\r') {
				yyt1 = cur;
				goto yy182;
			}
		}
	} else {
		if (yych <= '*') {
			if (yych <= ' ') {
				yyt1 = cur;
				goto yy182;
			}
			if (yych >= '*') {
				yyt1 = cur;
				goto yy183;
			}
		} else {
			if (yych == ':') goto yy185;
		}
	}
yy181:
#line 305 "../src/parse/lexer.re"
	{
        RET_FAIL(error_at_cur(
                "ill-formed start of a block: expected a space, a newline, a colon followed by a"
                " block name, or the end of block `*" "/`"));
    }
#line 1207 "src/parse/lexer.cc"
yy182:
	++cur;
	cur = yyt1;
#line 311 "../src/parse/lexer.re"
	{ name.clear();              return Ret::OK; }
#line 1213 "src/parse/lexer.cc"
yy183:
	yych = *++cur;
	if (yych == '/') goto yy182;
yy184:
	cur = mar;
	goto yy181;
yy185:
	yych = *++cur;
	if (yych <= '^') {
		if (yych <= '@') goto yy184;
		if (yych >= '[') goto yy184;
	} else {
		if (yych == '`') goto yy184;
		if (yych >= '{') goto yy184;
	}
yy186:
	++cur;
	if ((lim - cur) < 2) if (!fill(2)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yybm[0+yych] & 128) {
		goto yy186;
	}
	if (yych <= '\r') {
		if (yych <= 0x08) goto yy184;
		if (yych <= '\n') {
			yyt1 = cur;
			goto yy187;
		}
		if (yych <= '\f') goto yy184;
		yyt1 = cur;
	} else {
		if (yych <= ' ') {
			if (yych <= 0x1F) goto yy184;
			yyt1 = cur;
		} else {
			if (yych == '*') {
				yyt1 = cur;
				goto yy188;
			}
			goto yy184;
		}
	}
yy187:
	++cur;
	cur = yyt1;
#line 312 "../src/parse/lexer.re"
	{ name.assign(tok + 1, cur); return Ret::OK; }
#line 1261 "src/parse/lexer.cc"
yy188:
	yych = *++cur;
	if (yych == '/') goto yy187;
	goto yy184;
}
#line 313 "../src/parse/lexer.re"

}

Ret Input::lex_name_list(OutAllocator& alc, BlockNameList** ptail) {
    BlockNameList** phead = ptail;
loop:
    tok = cur;

#line 1276 "src/parse/lexer.cc"
{
	uint8_t yych;
	static const unsigned char yybm[] = {
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128,   0,   0,   0,   0,   0,   0, 
		  0, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128,   0,   0,   0,   0, 128, 
		  0, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
	};
	if ((lim - cur) < 2) if (!fill(2)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *(mar = cur);
	if (yych <= 0x1F) {
		if (yych <= '\n') {
			if (yych >= '\t') {
				yyt1 = cur;
				goto yy191;
			}
		} else {
			if (yych == '\r') {
				yyt1 = cur;
				goto yy191;
			}
		}
	} else {
		if (yych <= '*') {
			if (yych <= ' ') {
				yyt1 = cur;
				goto yy191;
			}
			if (yych >= '*') {
				yyt1 = cur;
				goto yy192;
			}
		} else {
			if (yych == ':') goto yy194;
		}
	}
yy190:
#line 321 "../src/parse/lexer.re"
	{
        RET_FAIL(error_at_cur(
                "ill-formed start of a block: expected a space, a newline, a colon followed by a"
                " list of colon-separated block names, or the end of block `*" "/`"));
    }
#line 1348 "src/parse/lexer.cc"
yy191:
	++cur;
	cur = yyt1;
#line 327 "../src/parse/lexer.re"
	{ *ptail = nullptr; return Ret::OK; }
#line 1354 "src/parse/lexer.cc"
yy192:
	yych = *++cur;
	if (yych == '/') goto yy191;
yy193:
	cur = mar;
	goto yy190;
yy194:
	yych = *++cur;
	if (yych <= '^') {
		if (yych <= '@') goto yy193;
		if (yych >= '[') goto yy193;
	} else {
		if (yych == '`') goto yy193;
		if (yych >= '{') goto yy193;
	}
yy195:
	++cur;
	if (lim <= cur) if (!fill(1)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yybm[0+yych] & 128) {
		goto yy195;
	}
#line 329 "../src/parse/lexer.re"
	{
        BlockNameList *l = alc.alloct<BlockNameList>(1);
        l->name = newcstr(tok + 1, cur, alc);
        l->next = nullptr;
        *ptail = l;
        ptail = &l->next;

        // Check that the added name is unique.
        for (const BlockNameList *p = *phead; p != l; p = p->next) {
            if (strcmp(p->name, l->name) == 0) {
                RET_FAIL(error_at_cur("duplicate block '%s' on the list", p->name));
            }
        }

        goto loop;
    }
#line 1394 "src/parse/lexer.cc"
}
#line 345 "../src/parse/lexer.re"

}

Ret Input::lex_block_end(Output& out, bool allow_garbage) {
    bool multiline = false;
loop: 
#line 1403 "src/parse/lexer.cc"
{
	uint8_t yych;
	static const unsigned char yybm[] = {
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0, 128,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		128,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
	};
	if ((lim - cur) < 2) if (!fill(2)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yybm[0+yych] & 128) {
		goto yy199;
	}
	if (yych <= '\f') {
		if (yych <= 0x08) goto yy197;
		if (yych <= '\n') goto yy200;
	} else {
		if (yych <= '\r') goto yy201;
		if (yych == '*') goto yy202;
	}
yy197:
	++cur;
yy198:
#line 351 "../src/parse/lexer.re"
	{
        if (allow_garbage && !is_eof()) goto loop;
        RET_FAIL(error_at_cur(
                "ill-formed end of block: expected optional whitespaces followed by `*" "/`"));
    }
#line 1461 "src/parse/lexer.cc"
yy199:
	++cur;
	if (lim <= cur) if (!fill(1)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yybm[0+yych] & 128) {
		goto yy199;
	}
#line 362 "../src/parse/lexer.re"
	{ goto loop; }
#line 1471 "src/parse/lexer.cc"
yy200:
	++cur;
#line 363 "../src/parse/lexer.re"
	{ next_line(); multiline = true; goto loop; }
#line 1476 "src/parse/lexer.cc"
yy201:
	yych = *++cur;
	if (yych == '\n') goto yy200;
	goto yy198;
yy202:
	yych = *++cur;
	if (yych != '/') goto yy198;
	++cur;
#line 356 "../src/parse/lexer.re"
	{
        if (multiline && globopts->line_dirs) {
            out.gen_stmt(code_line_info_input(out.allocator, cur_loc()));
        }
        return Ret::OK;
    }
#line 1492 "src/parse/lexer.cc"
}
#line 364 "../src/parse/lexer.re"

}

Ret Input::lex_special_block(Output& out, CodeKind kind, uint32_t mask) {
    OutAllocator& alc = out.allocator;
    const char* fmt = nullptr, *sep = nullptr;
    BlockNameList* blocks;

    out.gen_raw(tok, ptr, globopts->line_dirs);
    CHECK_RET(lex_name_list(alc, &blocks));

loop: 
#line 1507 "src/parse/lexer.cc"
{
	uint8_t yych;
	static const unsigned char yybm[] = {
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0, 128,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		128,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
	};
	if ((lim - cur) < 9) if (!fill(9)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yybm[0+yych] & 128) {
		goto yy205;
	}
	if (yych <= ')') {
		if (yych <= '\n') {
			if (yych >= '\t') goto yy206;
		} else {
			if (yych == '\r') goto yy207;
		}
	} else {
		if (yych <= 'f') {
			if (yych <= '*') goto yy208;
			if (yych >= 'f') goto yy209;
		} else {
			if (yych == 's') goto yy210;
		}
	}
	++cur;
yy204:
#line 376 "../src/parse/lexer.re"
	{
        RET_FAIL(error_at_cur(
                "ill-formed directive: expected optional configurations followed by the end of"
                " block `*" "/`"));
    }
#line 1571 "src/parse/lexer.cc"
yy205:
	++cur;
	if (lim <= cur) if (!fill(1)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yybm[0+yych] & 128) {
		goto yy205;
	}
#line 400 "../src/parse/lexer.re"
	{ goto loop; }
#line 1581 "src/parse/lexer.cc"
yy206:
	++cur;
#line 402 "../src/parse/lexer.re"
	{ next_line(); goto loop; }
#line 1586 "src/parse/lexer.cc"
yy207:
	yych = *++cur;
	if (yych == '\n') goto yy206;
	goto yy204;
yy208:
	yych = *++cur;
	if (yych == '/') goto yy211;
	goto yy204;
yy209:
	yych = *(mar = ++cur);
	if (yych == 'o') goto yy212;
	goto yy204;
yy210:
	yych = *(mar = ++cur);
	if (yych == 'e') goto yy214;
	goto yy204;
yy211:
	++cur;
#line 404 "../src/parse/lexer.re"
	{
        if (globopts->line_dirs) out.gen_stmt(code_line_info_output(alc));
        out.gen_stmt(code_fmt(alc, kind, blocks, fmt, sep));
        if (globopts->line_dirs) out.gen_stmt(code_line_info_input(alc, cur_loc()));
        return Ret::OK;
    }
#line 1612 "src/parse/lexer.cc"
yy212:
	yych = *++cur;
	if (yych == 'r') goto yy215;
yy213:
	cur = mar;
	goto yy204;
yy214:
	yych = *++cur;
	if (yych == 'p') goto yy216;
	goto yy213;
yy215:
	yych = *++cur;
	if (yych == 'm') goto yy217;
	goto yy213;
yy216:
	yych = *++cur;
	if (yych == 'a') goto yy218;
	goto yy213;
yy217:
	yych = *++cur;
	if (yych == 'a') goto yy219;
	goto yy213;
yy218:
	yych = *++cur;
	if (yych == 'r') goto yy220;
	goto yy213;
yy219:
	yych = *++cur;
	if (yych == 't') goto yy221;
	goto yy213;
yy220:
	yych = *++cur;
	if (yych == 'a') goto yy222;
	goto yy213;
yy221:
	++cur;
#line 382 "../src/parse/lexer.re"
	{
        if ((mask & DCONF_FORMAT) == 0) {
            RET_FAIL(error_at_cur("unexpected configuration 'format'"));
        }
        CHECK_RET(lex_conf_string());
        fmt = copystr(tmp_str, alc);
        goto loop;
    }
#line 1658 "src/parse/lexer.cc"
yy222:
	yych = *++cur;
	if (yych != 't') goto yy213;
	yych = *++cur;
	if (yych != 'o') goto yy213;
	yych = *++cur;
	if (yych != 'r') goto yy213;
	++cur;
#line 391 "../src/parse/lexer.re"
	{
        if ((mask & DCONF_SEPARATOR) == 0) {
            RET_FAIL(error_at_cur("unexpected configuration 'separator'"));
        }
        CHECK_RET(lex_conf_string());
        sep = copystr(tmp_str, alc);
        goto loop;
    }
#line 1676 "src/parse/lexer.cc"
}
#line 410 "../src/parse/lexer.re"

}

#define RET_TOK(t) do { token = t; return Ret::OK; } while(0)

Ret Input::lex_block(YYSTYPE* yylval, Ast& ast, int& token) {
    const uint8_t* p, *x, *y;
scan:
    tok = cur;
    location = cur_loc();

#line 1690 "src/parse/lexer.cc"
{
	uint8_t yych;
	unsigned int yyaccept = 0;
	static const unsigned char yybm[] = {
		  0, 128, 128, 128, 128, 128, 128, 128, 
		128, 144,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		144, 128,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		224, 224, 224, 224, 224, 224, 224, 224, 
		224, 224, 128, 128, 128, 128, 128, 128, 
		128, 160, 160, 160, 160, 160, 160, 160, 
		160, 160, 160, 160, 160, 160, 160, 160, 
		160, 160, 160, 160, 160, 160, 160, 160, 
		160, 160, 160, 128,   0, 128, 128, 160, 
		128, 160, 160, 160, 160, 160, 160, 160, 
		160, 160, 160, 160, 160, 160, 160, 160, 
		160, 160, 160, 160, 160, 160, 160, 160, 
		160, 160, 160, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
	};
	if ((lim - cur) < 9) if (!fill(9)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yybm[0+yych] & 16) {
		goto yy226;
	}
	if (yych <= '9') {
		if (yych <= '$') {
			if (yych <= '\r') {
				if (yych <= 0x08) goto yy224;
				if (yych <= '\n') goto yy227;
				if (yych >= '\r') goto yy229;
			} else {
				if (yych <= '!') {
					if (yych >= ' ') goto yy230;
				} else {
					if (yych <= '"') goto yy232;
					if (yych <= '#') goto yy233;
					goto yy234;
				}
			}
		} else {
			if (yych <= '*') {
				if (yych <= '&') {
					if (yych <= '%') goto yy235;
				} else {
					if (yych <= '\'') goto yy236;
					if (yych <= ')') goto yy234;
					goto yy237;
				}
			} else {
				if (yych <= '-') {
					if (yych <= '+') goto yy234;
				} else {
					if (yych <= '.') goto yy238;
					if (yych <= '/') goto yy239;
				}
			}
		}
	} else {
		if (yych <= '[') {
			if (yych <= '=') {
				if (yych <= ':') goto yy240;
				if (yych <= ';') goto yy234;
				if (yych <= '<') goto yy241;
				goto yy242;
			} else {
				if (yych <= '?') {
					if (yych >= '?') goto yy234;
				} else {
					if (yych <= '@') goto yy233;
					if (yych <= 'Z') goto yy243;
					goto yy245;
				}
			}
		} else {
			if (yych <= 'q') {
				if (yych <= '^') {
					if (yych <= '\\') goto yy234;
				} else {
					if (yych != '`') goto yy243;
				}
			} else {
				if (yych <= 'z') {
					if (yych <= 'r') goto yy246;
					goto yy243;
				} else {
					if (yych <= '{') goto yy247;
					if (yych <= '|') goto yy234;
				}
			}
		}
	}
yy224:
	++cur;
yy225:
#line 551 "../src/parse/lexer.re"
	{
        if (globopts->flex_syntax && globopts->input_encoding == Enc::Type::UTF8) {
            // Try to lex this as a raw UTF-8 code point (not captured by the `name` rule above
            // because it is restricted to alphanumeric ASCII characters and underscore).
            --cur;
            uint32_t c;
            CHECK_RET(lex_cls_chr(c));
            ast.temp_chars.push_back({c, tok_loc()});
            yylval->regexp = ast.str(tok_loc(), false);
            RET_TOK(TOKEN_REGEXP);
        }
        RET_FAIL(error_at_tok("unexpected character: '%c'", *tok));
    }
#line 1817 "src/parse/lexer.cc"
yy226:
	++cur;
	if (lim <= cur) if (!fill(1)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yybm[0+yych] & 16) {
		goto yy226;
	}
#line 538 "../src/parse/lexer.re"
	{ goto scan; }
#line 1827 "src/parse/lexer.cc"
yy227:
	yyaccept = 0;
	yych = *(mar = ++cur);
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy249;
	} else {
		if (yych <= ' ') goto yy249;
		if (yych == '#') goto yy251;
	}
yy228:
#line 542 "../src/parse/lexer.re"
	{
        next_line();
        if (mode == LexMode::FLEX_NAME) {
            mode = LexMode::NORMAL;
            RET_TOK(TOKEN_FID_END);
        }
        goto scan;
    }
#line 1847 "src/parse/lexer.cc"
yy229:
	yych = *++cur;
	if (yych == '\n') goto yy227;
	goto yy225;
yy230:
	yyaccept = 1;
	yych = *(mar = ++cur);
	if (yych == 'i') goto yy252;
	if (yych == 'u') goto yy253;
yy231:
#line 447 "../src/parse/lexer.re"
	{ RET_TOK(*tok); }
#line 1860 "src/parse/lexer.cc"
yy232:
	++cur;
#line 438 "../src/parse/lexer.re"
	{ CHECK_RET(lex_str(ast, '"',   yylval->regexp)); RET_TOK(TOKEN_REGEXP); }
#line 1865 "src/parse/lexer.cc"
yy233:
	yych = *++cur;
	if (yych <= '^') {
		if (yych <= '@') goto yy225;
		if (yych <= 'Z') goto yy254;
		goto yy225;
	} else {
		if (yych == '`') goto yy225;
		if (yych <= 'z') goto yy254;
		goto yy225;
	}
yy234:
	++cur;
	goto yy231;
yy235:
	yych = *++cur;
	if (yych == '}') goto yy256;
	goto yy225;
yy236:
	++cur;
#line 437 "../src/parse/lexer.re"
	{ CHECK_RET(lex_str(ast, '\'',  yylval->regexp)); RET_TOK(TOKEN_REGEXP); }
#line 1888 "src/parse/lexer.cc"
yy237:
	yych = *++cur;
	if (yych == '/') goto yy256;
	goto yy231;
yy238:
	++cur;
#line 536 "../src/parse/lexer.re"
	{ yylval->regexp = ast.dot(tok_loc()); RET_TOK(TOKEN_REGEXP); }
#line 1897 "src/parse/lexer.cc"
yy239:
	yych = *++cur;
	if (yych == '*') goto yy257;
	if (yych == '/') goto yy258;
	goto yy231;
yy240:
	yych = *++cur;
	if (yych == '=') goto yy259;
	goto yy225;
yy241:
	++cur;
#line 430 "../src/parse/lexer.re"
	{ return lex_clist(ast, token); }
#line 1911 "src/parse/lexer.cc"
yy242:
	yyaccept = 1;
	yych = *(mar = ++cur);
	if (yych == '>') goto yy261;
	goto yy231;
yy243:
	++cur;
	if (lim <= cur) if (!fill(1)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
yy244:
	if (yybm[0+yych] & 32) {
		goto yy243;
	}
#line 491 "../src/parse/lexer.re"
	{
        bool yes;
        CHECK_RET(lex_namedef_context_re2c(yes));
        if (!globopts->flex_syntax || yes) {
            yylval->cstr = ast.cstr_local(tok, cur);
            RET_TOK(TOKEN_ID);
        }
        CHECK_RET(lex_namedef_context_flex(yes));
        if (yes) {
            yylval->cstr = ast.cstr_local(tok, cur);
            mode = LexMode::FLEX_NAME;
            RET_TOK(TOKEN_FID);
        }
        // consume one character, otherwise we risk breaking operator precedence in cases like
        // `ab*`: it should be `a(b)*`, not `(ab)*`
        cur = tok + 1;
        ast.temp_chars.push_back({tok[0], tok_loc()});
        yylval->regexp = ast.str(tok_loc(), false);
        RET_TOK(TOKEN_REGEXP);
    }
#line 1946 "src/parse/lexer.cc"
yy245:
	yych = *++cur;
	if (yych == '^') goto yy262;
#line 439 "../src/parse/lexer.re"
	{ CHECK_RET(lex_cls(ast, false, yylval->regexp)); RET_TOK(TOKEN_REGEXP); }
#line 1952 "src/parse/lexer.cc"
yy246:
	yych = *++cur;
	if (yych == 'e') goto yy263;
	goto yy244;
yy247:
	yyaccept = 2;
	yych = *(mar = ++cur);
	if (yybm[0+yych] & 64) {
		goto yy266;
	}
	if (yych <= 'Z') {
		if (yych == ',') goto yy264;
		if (yych >= 'A') goto yy267;
	} else {
		if (yych <= '_') {
			if (yych >= '_') goto yy267;
		} else {
			if (yych <= '`') goto yy248;
			if (yych <= 'z') goto yy267;
		}
	}
yy248:
#line 422 "../src/parse/lexer.re"
	{ CHECK_RET(lex_code_in_braces(yylval, ast)); RET_TOK(TOKEN_CODE); }
#line 1977 "src/parse/lexer.cc"
yy249:
	++cur;
	if (lim <= cur) if (!fill(1)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy249;
	} else {
		if (yych <= ' ') goto yy249;
		if (yych == '#') goto yy251;
	}
yy250:
	cur = mar;
	if (yyaccept <= 3) {
		if (yyaccept <= 1) {
			if (yyaccept == 0) {
				goto yy228;
			} else {
				goto yy231;
			}
		} else {
			if (yyaccept == 2) {
				goto yy248;
			} else {
				goto yy260;
			}
		}
	} else {
		if (yyaccept <= 5) {
			if (yyaccept == 4) {
				goto yy265;
			} else {
				goto yy280;
			}
		} else {
			goto yy299;
		}
	}
yy251:
	++cur;
	if ((lim - cur) < 5) if (!fill(5)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy251;
		goto yy250;
	} else {
		if (yych <= ' ') goto yy251;
		if (yych == 'l') goto yy268;
		goto yy250;
	}
yy252:
	yych = *++cur;
	if (yych == 'n') goto yy269;
	goto yy250;
yy253:
	yych = *++cur;
	if (yych == 's') goto yy270;
	goto yy250;
yy254:
	++cur;
	if (lim <= cur) if (!fill(1)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yych <= 'Z') {
		if (yych <= '/') goto yy255;
		if (yych <= '9') goto yy254;
		if (yych >= 'A') goto yy254;
	} else {
		if (yych <= '_') {
			if (yych >= '_') goto yy254;
		} else {
			if (yych <= '`') goto yy255;
			if (yych <= 'z') goto yy254;
		}
	}
yy255:
#line 442 "../src/parse/lexer.re"
	{
        yylval->regexp = ast.tag(tok_loc(), ast.cstr_global(tok + 1, cur), tok[0] == '#');
        RET_TOK(TOKEN_REGEXP);
    }
#line 2057 "src/parse/lexer.cc"
yy256:
	++cur;
#line 435 "../src/parse/lexer.re"
	{ tok = cur; RET_TOK(0); }
#line 2062 "src/parse/lexer.cc"
yy257:
	++cur;
#line 433 "../src/parse/lexer.re"
	{ CHECK_RET(lex_c_comment());   goto scan; }
#line 2067 "src/parse/lexer.cc"
yy258:
	++cur;
#line 432 "../src/parse/lexer.re"
	{ CHECK_RET(lex_cpp_comment()); goto scan; }
#line 2072 "src/parse/lexer.cc"
yy259:
	yyaccept = 3;
	yych = *(mar = ++cur);
	if (yych == '>') goto yy261;
yy260:
#line 423 "../src/parse/lexer.re"
	{ CHECK_RET(lex_code_indented(yylval, ast));  RET_TOK(TOKEN_CODE); }
#line 2080 "src/parse/lexer.cc"
yy261:
	++cur;
	if (lim <= cur) if (!fill(1)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yych <= '@') {
		if (yych <= '\t') {
			if (yych <= 0x08) goto yy250;
			goto yy261;
		} else {
			if (yych == ' ') goto yy261;
			goto yy250;
		}
	} else {
		if (yych <= '_') {
			if (yych <= 'Z') {
				yyt1 = cur;
				goto yy271;
			}
			if (yych <= '^') goto yy250;
			yyt1 = cur;
			goto yy271;
		} else {
			if (yych <= '`') goto yy250;
			if (yych <= 'z') {
				yyt1 = cur;
				goto yy271;
			}
			goto yy250;
		}
	}
yy262:
	++cur;
#line 440 "../src/parse/lexer.re"
	{ CHECK_RET(lex_cls(ast, true,  yylval->regexp)); RET_TOK(TOKEN_REGEXP); }
#line 2115 "src/parse/lexer.cc"
yy263:
	yych = *++cur;
	if (yych == '2') goto yy273;
	goto yy244;
yy264:
	++cur;
yy265:
#line 476 "../src/parse/lexer.re"
	{
        RET_FAIL(error_at_tok(
                "illegal closure form, use '{n}', '{n,}', '{n,m}' where n and m are numbers"));
    }
#line 2128 "src/parse/lexer.cc"
yy266:
	++cur;
	if ((lim - cur) < 2) if (!fill(2)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yybm[0+yych] & 64) {
		goto yy266;
	}
	if (yych == ',') {
		yyt1 = cur;
		goto yy274;
	}
	if (yych == '}') goto yy275;
	goto yy250;
yy267:
	++cur;
	if (lim <= cur) if (!fill(1)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yych <= '^') {
		if (yych <= '9') {
			if (yych <= '/') goto yy250;
			goto yy267;
		} else {
			if (yych <= '@') goto yy250;
			if (yych <= 'Z') goto yy267;
			goto yy250;
		}
	} else {
		if (yych <= 'z') {
			if (yych == '`') goto yy250;
			goto yy267;
		} else {
			if (yych == '}') goto yy276;
			goto yy250;
		}
	}
yy268:
	yych = *++cur;
	if (yych == 'i') goto yy277;
	goto yy250;
yy269:
	yych = *++cur;
	if (yych == 'c') goto yy278;
	goto yy250;
yy270:
	yych = *++cur;
	if (yych == 'e') goto yy279;
	goto yy250;
yy271:
	++cur;
	if (lim <= cur) if (!fill(1)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yych <= 'Z') {
		if (yych <= '/') goto yy272;
		if (yych <= '9') goto yy271;
		if (yych >= 'A') goto yy271;
	} else {
		if (yych <= '_') {
			if (yych >= '_') goto yy271;
		} else {
			if (yych <= '`') goto yy272;
			if (yych <= 'z') goto yy271;
		}
	}
yy272:
	p = yyt1;
#line 425 "../src/parse/lexer.re"
	{
        yylval->cstr = ast.cstr_global(p, cur);
        RET_TOK(tok[0] == ':' ? TOKEN_CJUMP : TOKEN_CNEXT);
    }
#line 2199 "src/parse/lexer.cc"
yy273:
	yych = *++cur;
	if (yych == 'c') goto yy281;
	goto yy244;
yy274:
	yyaccept = 4;
	yych = *(mar = ++cur);
	if (yych <= '/') goto yy265;
	if (yych <= '9') goto yy282;
	if (yych == '}') goto yy283;
	goto yy265;
yy275:
	++cur;
#line 449 "../src/parse/lexer.re"
	{
        if (!s_to_u32_unsafe (tok + 1, cur - 1, yylval->bounds.min)) {
            RET_FAIL(error_at_tok("repetition count overflow"));
        }
        yylval->bounds.max = yylval->bounds.min;
        RET_TOK(TOKEN_CLOSESIZE);
    }
#line 2221 "src/parse/lexer.cc"
yy276:
	++cur;
#line 481 "../src/parse/lexer.re"
	{
        if (!globopts->flex_syntax) {
            RET_FAIL(error_at_tok("curly braces for names only allowed with -F switch"));
        }
        yylval->cstr = ast.cstr_local(tok + 1, cur - 1);
        RET_TOK(TOKEN_ID);
    }
#line 2232 "src/parse/lexer.cc"
yy277:
	yych = *++cur;
	if (yych == 'n') goto yy284;
	goto yy250;
yy278:
	yych = *++cur;
	if (yych == 'l') goto yy285;
	goto yy250;
yy279:
	yyaccept = 5;
	yych = *(mar = ++cur);
	if (yych == ':') goto yy286;
yy280:
#line 529 "../src/parse/lexer.re"
	{
        RET_FAIL(error_at_tok(
                "ill-formed use directive: expected `!use` followed by a colon, a block name,"
                " optional spaces, a semicolon, and finally a space, a newline, or the end of"
                " block"));
    }
#line 2253 "src/parse/lexer.cc"
yy281:
	yych = *++cur;
	if (yych == ':') goto yy287;
	goto yy244;
yy282:
	++cur;
	if (lim <= cur) if (!fill(1)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yych <= '/') goto yy250;
	if (yych <= '9') goto yy282;
	if (yych == '}') goto yy288;
	goto yy250;
yy283:
	++cur;
#line 468 "../src/parse/lexer.re"
	{
        if (!s_to_u32_unsafe (tok + 1, cur - 2, yylval->bounds.min)) {
            RET_FAIL(error_at_tok("repetition lower bound overflow"));
        }
        yylval->bounds.max = std::numeric_limits<uint32_t>::max();
        RET_TOK(TOKEN_CLOSESIZE);
    }
#line 2276 "src/parse/lexer.cc"
yy284:
	yych = *++cur;
	if (yych == 'e') goto yy289;
	goto yy250;
yy285:
	yych = *++cur;
	if (yych == 'u') goto yy290;
	goto yy250;
yy286:
	yych = *++cur;
	if (yych <= '^') {
		if (yych <= '@') goto yy250;
		if (yych <= 'Z') {
			yyt1 = cur;
			goto yy291;
		}
		goto yy250;
	} else {
		if (yych == '`') goto yy250;
		if (yych <= 'z') {
			yyt1 = cur;
			goto yy291;
		}
		goto yy250;
	}
yy287:
	++cur;
#line 489 "../src/parse/lexer.re"
	{ RET_TOK(TOKEN_CONF); }
#line 2306 "src/parse/lexer.cc"
yy288:
	++cur;
	p = yyt1;
#line 457 "../src/parse/lexer.re"
	{
        if (!s_to_u32_unsafe(tok + 1, p, yylval->bounds.min)) {
            RET_FAIL(error_at_tok("repetition lower bound overflow"));
        } else if (!s_to_u32_unsafe(p + 1, cur - 1, yylval->bounds.max)) {
            RET_FAIL(error_at_tok("repetition upper bound overflow"));
        } else if (yylval->bounds.min > yylval->bounds.max) {
            RET_FAIL(error_at_tok("repetition lower bound exceeds upper bound"));
        }
        RET_TOK(TOKEN_CLOSESIZE);
    }
#line 2321 "src/parse/lexer.cc"
yy289:
	yych = *++cur;
	if (yych <= '0') goto yy293;
	if (yych <= '9') goto yy250;
	goto yy293;
yy290:
	yych = *++cur;
	if (yych == 'd') goto yy294;
	goto yy250;
yy291:
	++cur;
	if ((lim - cur) < 3) if (!fill(3)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yych <= ':') {
		if (yych <= 0x1F) {
			if (yych == '\t') {
				yyt2 = cur;
				goto yy295;
			}
			goto yy250;
		} else {
			if (yych <= ' ') {
				yyt2 = cur;
				goto yy295;
			}
			if (yych <= '/') goto yy250;
			if (yych <= '9') goto yy291;
			goto yy250;
		}
	} else {
		if (yych <= '^') {
			if (yych <= ';') {
				yyt2 = cur;
				goto yy296;
			}
			if (yych <= '@') goto yy250;
			if (yych <= 'Z') goto yy291;
			goto yy250;
		} else {
			if (yych == '`') goto yy250;
			if (yych <= 'z') goto yy291;
			goto yy250;
		}
	}
yy292:
	++cur;
	if (lim <= cur) if (!fill(1)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
yy293:
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy292;
		goto yy250;
	} else {
		if (yych <= ' ') goto yy292;
		if (yych <= '0') goto yy250;
		if (yych <= '9') {
			yyt1 = cur;
			goto yy297;
		}
		goto yy250;
	}
yy294:
	yych = *++cur;
	if (yych == 'e') goto yy298;
	goto yy250;
yy295:
	++cur;
	if ((lim - cur) < 3) if (!fill(3)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy295;
		goto yy250;
	} else {
		if (yych <= ' ') goto yy295;
		if (yych != ';') goto yy250;
	}
yy296:
	yych = *++cur;
	if (yych <= '\r') {
		if (yych <= 0x08) goto yy250;
		if (yych <= '\n') {
			yyt3 = cur;
			goto yy300;
		}
		if (yych <= '\f') goto yy250;
		yyt3 = cur;
		goto yy300;
	} else {
		if (yych <= ' ') {
			if (yych <= 0x1F) goto yy250;
			yyt3 = cur;
			goto yy300;
		} else {
			if (yych == '*') {
				yyt3 = cur;
				goto yy301;
			}
			goto yy250;
		}
	}
yy297:
	++cur;
	if ((lim - cur) < 2) if (!fill(2)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yych <= '\r') {
		if (yych <= '\t') {
			if (yych <= 0x08) goto yy250;
			goto yy302;
		} else {
			if (yych <= '\n') goto yy303;
			if (yych <= '\f') goto yy250;
			goto yy304;
		}
	} else {
		if (yych <= ' ') {
			if (yych <= 0x1F) goto yy250;
			goto yy302;
		} else {
			if (yych <= '/') goto yy250;
			if (yych <= '9') goto yy297;
			goto yy250;
		}
	}
yy298:
	yyaccept = 6;
	yych = *(mar = ++cur);
	if (yych == '\t') goto yy305;
	if (yych == ' ') goto yy305;
yy299:
#line 516 "../src/parse/lexer.re"
	{
        RET_FAIL(error_at_tok(
                "ill-formed include directive: expected `!include` followed by spaces, a"
                " double-quoted file path, optional spaces, a semicolon, and finally a space, a"
                " newline, or the end of block"));
    }
#line 2458 "src/parse/lexer.cc"
yy300:
	++cur;
	x = yyt1;
	y = yyt2;
	cur = yyt3;
#line 523 "../src/parse/lexer.re"
	{
        // Save the name of the used block in a temporary buffer (ensure it is empty).
        CHECK(ast.temp_blockname.empty());
        ast.temp_blockname.assign(x, y);
        RET_TOK(TOKEN_BLOCK);
    }
#line 2471 "src/parse/lexer.cc"
yy301:
	yych = *++cur;
	if (yych == '/') goto yy300;
	goto yy250;
yy302:
	++cur;
	if (lim <= cur) if (!fill(1)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy302;
		goto yy250;
	} else {
		if (yych <= ' ') goto yy302;
		if (yych == '"') goto yy306;
		goto yy250;
	}
yy303:
	++cur;
	cur = yyt1;
#line 540 "../src/parse/lexer.re"
	{ CHECK_RET(set_sourceline()); RET_TOK(TOKEN_LINE_INFO); }
#line 2493 "src/parse/lexer.cc"
yy304:
	yych = *++cur;
	if (yych == '\n') goto yy303;
	goto yy250;
yy305:
	++cur;
	if (lim <= cur) if (!fill(1)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy305;
		goto yy250;
	} else {
		if (yych <= ' ') goto yy305;
		if (yych == '"') {
			yyt1 = cur;
			goto yy307;
		}
		goto yy250;
	}
yy306:
	++cur;
	if ((lim - cur) < 3) if (!fill(3)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yybm[0+yych] & 128) {
		goto yy306;
	}
	if (yych <= '\n') goto yy250;
	if (yych <= '"') goto yy308;
	goto yy309;
yy307:
	++cur;
	if ((lim - cur) < 4) if (!fill(4)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yych <= '!') {
		if (yych <= 0x00) goto yy250;
		if (yych == '\n') goto yy250;
		goto yy307;
	} else {
		if (yych <= '"') goto yy310;
		if (yych == '\\') goto yy311;
		goto yy307;
	}
yy308:
	yych = *++cur;
	if (yych == '\n') goto yy303;
	if (yych == '\r') goto yy304;
	goto yy250;
yy309:
	++cur;
	if (lim <= cur) if (!fill(1)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yych <= 0x00) goto yy250;
	if (yych == '\n') goto yy250;
	goto yy306;
yy310:
	yych = *++cur;
	if (yych <= 0x1F) {
		if (yych == '\t') {
			yyt2 = cur;
			goto yy312;
		}
		goto yy250;
	} else {
		if (yych <= ' ') {
			yyt2 = cur;
			goto yy312;
		}
		if (yych == ';') {
			yyt2 = cur;
			goto yy313;
		}
		goto yy250;
	}
yy311:
	++cur;
	if (lim <= cur) if (!fill(1)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yych <= 0x00) goto yy250;
	if (yych == '\n') goto yy250;
	goto yy307;
yy312:
	++cur;
	if ((lim - cur) < 3) if (!fill(3)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy312;
		goto yy250;
	} else {
		if (yych <= ' ') goto yy312;
		if (yych != ';') goto yy250;
	}
yy313:
	yych = *++cur;
	if (yych <= '\r') {
		if (yych <= 0x08) goto yy250;
		if (yych <= '\n') {
			yyt3 = cur;
			goto yy314;
		}
		if (yych <= '\f') goto yy250;
		yyt3 = cur;
	} else {
		if (yych <= ' ') {
			if (yych <= 0x1F) goto yy250;
			yyt3 = cur;
		} else {
			if (yych == '*') {
				yyt3 = cur;
				goto yy315;
			}
			goto yy250;
		}
	}
yy314:
	++cur;
	x = yyt1;
	y = yyt2;
	cur = yyt3;
#line 512 "../src/parse/lexer.re"
	{
        CHECK_RET(include(getstr(x + 1, y - 1), tok));
        goto scan;
    }
#line 2617 "src/parse/lexer.cc"
yy315:
	yych = *++cur;
	if (yych == '/') goto yy314;
	goto yy250;
}
#line 564 "../src/parse/lexer.re"

}

#undef RET_TOK

Ret Input::lex_namedef_context_re2c(bool& yes) {

#line 2631 "src/parse/lexer.cc"
{
	uint8_t yych;
	static const unsigned char yybm[] = {
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0, 128,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		128,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
	};
	if ((lim - cur) < 2) if (!fill(2)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *(mar = cur);
	if (yych <= 0x1F) {
		if (yych == '\t') {
			yyt1 = cur;
			goto yy318;
		}
	} else {
		if (yych <= ' ') {
			yyt1 = cur;
			goto yy318;
		}
		if (yych == '=') {
			yyt1 = cur;
			goto yy320;
		}
	}
yy317:
#line 572 "../src/parse/lexer.re"
	{ yes = false; return Ret::OK; }
#line 2688 "src/parse/lexer.cc"
yy318:
	++cur;
	if ((lim - cur) < 2) if (!fill(2)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yybm[0+yych] & 128) {
		goto yy318;
	}
	if (yych == '=') goto yy320;
yy319:
	cur = mar;
	goto yy317;
yy320:
	yych = *++cur;
	if (yych == '>') goto yy319;
	++cur;
	cur = yyt1;
#line 571 "../src/parse/lexer.re"
	{ yes = true;  return Ret::OK; }
#line 2707 "src/parse/lexer.cc"
}
#line 573 "../src/parse/lexer.re"

}

Ret Input::lex_namedef_context_flex(bool& yes) {

#line 2715 "src/parse/lexer.cc"
{
	uint8_t yych;
	static const unsigned char yybm[] = {
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0, 128,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		128,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
	};
	if (lim <= cur) if (!fill(1)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yych == '\t') {
		yyt1 = cur;
		goto yy322;
	}
	if (yych == ' ') {
		yyt1 = cur;
		goto yy322;
	}
#line 580 "../src/parse/lexer.re"
	{ yes = false; return Ret::OK; }
#line 2764 "src/parse/lexer.cc"
yy322:
	++cur;
	if (lim <= cur) if (!fill(1)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yybm[0+yych] & 128) {
		goto yy322;
	}
	if (yych <= '<') {
		if (yych == ':') goto yy323;
	} else {
		if (yych <= '=') goto yy323;
		if (yych == '{') goto yy323;
	}
	cur = yyt1;
#line 579 "../src/parse/lexer.re"
	{ yes = true;  return Ret::OK; }
#line 2781 "src/parse/lexer.cc"
yy323:
	++cur;
	cur = yyt1;
#line 578 "../src/parse/lexer.re"
	{ yes = false; return Ret::OK; }
#line 2787 "src/parse/lexer.cc"
}
#line 581 "../src/parse/lexer.re"

}

Ret Input::lex_clist(Ast& ast, int& token) {
    token = TOKEN_CLIST;
    std::set<std::string>& cl = ast.temp_condlist;
    // Due to the re2c grammar parser must reduce each condition list before shifing a new one.
    CHECK(cl.empty());

#line 2799 "src/parse/lexer.cc"
{
	uint8_t yych;
	static const unsigned char yybm[] = {
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0, 128,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		128,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
	};
	goto yy324;
yy325:
	++cur;
yy324:
	if (lim <= cur) if (!fill(1)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yybm[0+yych] & 128) {
		goto yy325;
	}
	if (yych <= 0x1F) goto yy326;
	if (yych <= '!') goto yy327;
	if (yych == '>') goto yy328;
yy326:
#line 592 "../src/parse/lexer.re"
	{ goto cond; }
#line 2851 "src/parse/lexer.cc"
yy327:
	++cur;
	if (lim <= cur) if (!fill(1)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yych == '\t') goto yy327;
	if (yych == ' ') goto yy327;
#line 590 "../src/parse/lexer.re"
	{ token = TOKEN_CSETUP; goto cond; }
#line 2860 "src/parse/lexer.cc"
yy328:
	++cur;
#line 591 "../src/parse/lexer.re"
	{ token = TOKEN_CZERO;  goto end; }
#line 2865 "src/parse/lexer.cc"
}
#line 593 "../src/parse/lexer.re"

cond:
    tok = cur;

#line 2872 "src/parse/lexer.cc"
{
	uint8_t yych;
	static const unsigned char yybm[] = {
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128,   0,   0,   0,   0,   0,   0, 
		  0, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128,   0,   0,   0,   0, 128, 
		  0, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
	};
	if (lim <= cur) if (!fill(1)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yych <= 'Z') {
		if (yych == '*') goto yy331;
		if (yych >= 'A') goto yy332;
	} else {
		if (yych <= '_') {
			if (yych >= '_') goto yy332;
		} else {
			if (yych <= '`') goto yy330;
			if (yych <= 'z') goto yy332;
		}
	}
yy330:
	++cur;
#line 599 "../src/parse/lexer.re"
	{ goto error; }
#line 2926 "src/parse/lexer.cc"
yy331:
	++cur;
#line 598 "../src/parse/lexer.re"
	{ if (!cl.empty()) goto error; cl.insert("*"); goto next; }
#line 2931 "src/parse/lexer.cc"
yy332:
	++cur;
	if (lim <= cur) if (!fill(1)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yybm[0+yych] & 128) {
		goto yy332;
	}
#line 597 "../src/parse/lexer.re"
	{ cl.insert(getstr(tok, cur)); goto next; }
#line 2941 "src/parse/lexer.cc"
}
#line 600 "../src/parse/lexer.re"

next: 
#line 2946 "src/parse/lexer.cc"
{
	uint8_t yych;
	static const unsigned char yybm[] = {
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0, 128,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		128,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
	};
	if ((lim - cur) < 2) if (!fill(2)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yych <= ' ') {
		if (yych == '\t') goto yy335;
		if (yych >= ' ') goto yy335;
	} else {
		if (yych <= ',') {
			if (yych >= ',') goto yy336;
		} else {
			if (yych == '>') goto yy337;
		}
	}
	++cur;
yy334:
#line 604 "../src/parse/lexer.re"
	{ goto error; }
#line 2999 "src/parse/lexer.cc"
yy335:
	yych = *(mar = ++cur);
	if (yych <= ' ') {
		if (yych == '\t') goto yy338;
		if (yych <= 0x1F) goto yy334;
		goto yy338;
	} else {
		if (yych <= ',') {
			if (yych <= '+') goto yy334;
		} else {
			if (yych == '>') goto yy337;
			goto yy334;
		}
	}
yy336:
	++cur;
	if (lim <= cur) if (!fill(1)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yybm[0+yych] & 128) {
		goto yy336;
	}
#line 602 "../src/parse/lexer.re"
	{ goto cond; }
#line 3023 "src/parse/lexer.cc"
yy337:
	++cur;
#line 603 "../src/parse/lexer.re"
	{ goto end; }
#line 3028 "src/parse/lexer.cc"
yy338:
	++cur;
	if (lim <= cur) if (!fill(1)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yych <= ' ') {
		if (yych == '\t') goto yy338;
		if (yych >= ' ') goto yy338;
	} else {
		if (yych <= ',') {
			if (yych >= ',') goto yy336;
		} else {
			if (yych == '>') goto yy337;
		}
	}
	cur = mar;
	goto yy334;
}
#line 605 "../src/parse/lexer.re"

end:
    // semantic value `yylval` is implicitly passed in temporary condition list
    return Ret::OK;
error:
    cl.clear();
    RET_FAIL(error_at_cur("syntax error in condition list"));
}

Ret Input::lex_code_indented(YYSTYPE* yylval, Ast& ast) {
    const loc_t& loc = tok_loc();
    tok = cur;
code: 
#line 3060 "src/parse/lexer.cc"
{
	uint8_t yych;
	if ((lim - cur) < 2) if (!fill(2)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yych <= '\'') {
		if (yych <= '\r') {
			if (yych == '\n') goto yy341;
			if (yych >= '\r') goto yy342;
		} else {
			if (yych == '"') goto yy343;
			if (yych >= '\'') goto yy343;
		}
	} else {
		if (yych <= '`') {
			if (yych == '/') goto yy344;
			if (yych >= '`') goto yy343;
		} else {
			if (yych <= '{') {
				if (yych >= '{') goto yy345;
			} else {
				if (yych == '}') goto yy345;
			}
		}
	}
	++cur;
yy340:
#line 623 "../src/parse/lexer.re"
	{ goto code; }
#line 3089 "src/parse/lexer.cc"
yy341:
	++cur;
#line 618 "../src/parse/lexer.re"
	{ next_line(); goto indent; }
#line 3094 "src/parse/lexer.cc"
yy342:
	yych = *++cur;
	if (yych == '\n') goto yy341;
	goto yy340;
yy343:
	++cur;
#line 621 "../src/parse/lexer.re"
	{ CHECK_RET(try_lex_literal_in_code(cur[-1])); goto code; }
#line 3103 "src/parse/lexer.cc"
yy344:
	yych = *++cur;
	if (yych == '*') goto yy346;
	if (yych == '/') goto yy347;
	goto yy340;
yy345:
	++cur;
#line 622 "../src/parse/lexer.re"
	{ RET_FAIL(error_at_cur("Curly braces are not allowed after ':='")); }
#line 3113 "src/parse/lexer.cc"
yy346:
	++cur;
#line 620 "../src/parse/lexer.re"
	{ CHECK_RET(lex_c_comment()); goto code; }
#line 3118 "src/parse/lexer.cc"
yy347:
	++cur;
#line 619 "../src/parse/lexer.re"
	{ CHECK_RET(lex_cpp_comment()); goto indent; }
#line 3123 "src/parse/lexer.cc"
}
#line 624 "../src/parse/lexer.re"

indent: 
#line 3128 "src/parse/lexer.cc"
{
	uint8_t yych;
	if (lim <= cur) if (!fill(1)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yych <= '\f') {
		if (yych <= 0x08) goto yy349;
		if (yych <= '\n') goto yy350;
	} else {
		if (yych <= '\r') goto yy350;
		if (yych == ' ') goto yy350;
	}
yy349:
#line 627 "../src/parse/lexer.re"
	{
        while (isspace(tok[0])) ++tok;
        uint8_t* p = cur;
        while (p > tok && isspace(p[-1])) --p;
        yylval->semact = ast.sem_act(loc, ast.cstr_global(tok, p), nullptr, false);
        return Ret::OK;
    }
#line 3149 "src/parse/lexer.cc"
yy350:
	++cur;
	cur -= 1;
#line 626 "../src/parse/lexer.re"
	{ goto code; }
#line 3155 "src/parse/lexer.cc"
}
#line 634 "../src/parse/lexer.re"

}

Ret Input::lex_code_in_braces(YYSTYPE* yylval, Ast& ast) {
    const loc_t& loc = tok_loc();
    uint32_t depth = 1;
code: 
#line 3165 "src/parse/lexer.cc"
{
	uint8_t yych;
	static const unsigned char yybm[] = {
		  0, 128, 128, 128, 128, 128, 128, 128, 
		128, 160,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		160, 128,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		192, 192, 192, 192, 192, 192, 192, 192, 
		192, 192, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128,   0, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
	};
	if ((lim - cur) < 3) if (!fill(3)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yych <= '\'') {
		if (yych <= '\r') {
			if (yych == '\n') goto yy353;
			if (yych >= '\r') goto yy355;
		} else {
			if (yych == '"') goto yy356;
			if (yych >= '\'') goto yy356;
		}
	} else {
		if (yych <= '`') {
			if (yych == '/') goto yy357;
			if (yych >= '`') goto yy356;
		} else {
			if (yych <= '{') {
				if (yych >= '{') goto yy358;
			} else {
				if (yych == '}') goto yy359;
			}
		}
	}
	++cur;
yy352:
#line 666 "../src/parse/lexer.re"
	{ goto code; }
#line 3228 "src/parse/lexer.cc"
yy353:
	yych = *(mar = ++cur);
	if (yybm[0+yych] & 32) {
		goto yy360;
	}
	if (yych == '#') goto yy362;
yy354:
#line 662 "../src/parse/lexer.re"
	{ next_line(); goto code; }
#line 3238 "src/parse/lexer.cc"
yy355:
	yych = *++cur;
	if (yych == '\n') goto yy353;
	goto yy352;
yy356:
	++cur;
#line 665 "../src/parse/lexer.re"
	{ CHECK_RET(try_lex_literal_in_code(cur[-1])); goto code; }
#line 3247 "src/parse/lexer.cc"
yy357:
	yych = *++cur;
	if (yych == '*') goto yy363;
	if (yych == '/') goto yy364;
	goto yy352;
yy358:
	++cur;
#line 660 "../src/parse/lexer.re"
	{ ++depth; goto code; }
#line 3257 "src/parse/lexer.cc"
yy359:
	++cur;
#line 641 "../src/parse/lexer.re"
	{
        if (--depth == 0) {
            const uint8_t* p = tok, *q = cur - 1;

            // In rec/func mode, strip curly braces and the adjacent whitespace.
            // (it won't cause any name collisions because the code is in a separate function).
            // This is needed for languages that don't use curly braces for compound statements.
            if (globopts->code_model == CodeModel::REC_FUNC) {
                ++p; --q; // skip '{' and '}'
                for (; p <= q && (*p == ' ' || *p == '\t'); ++p);
                for (; p <= q && (*q == ' ' || *q == '\t'); --q);
            }

            yylval->semact = ast.sem_act(loc, ast.cstr_global(p, q + 1), nullptr, false);
            return Ret::OK;
        }
        goto code;
    }
#line 3279 "src/parse/lexer.cc"
yy360:
	++cur;
	if (lim <= cur) if (!fill(1)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yybm[0+yych] & 32) {
		goto yy360;
	}
	if (yych == '#') goto yy362;
yy361:
	cur = mar;
	goto yy354;
yy362:
	++cur;
	if ((lim - cur) < 5) if (!fill(5)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy362;
		goto yy361;
	} else {
		if (yych <= ' ') goto yy362;
		if (yych == 'l') goto yy365;
		goto yy361;
	}
yy363:
	++cur;
#line 663 "../src/parse/lexer.re"
	{ CHECK_RET(lex_c_comment()); goto code; }
#line 3307 "src/parse/lexer.cc"
yy364:
	++cur;
#line 664 "../src/parse/lexer.re"
	{ CHECK_RET(lex_cpp_comment()); goto code; }
#line 3312 "src/parse/lexer.cc"
yy365:
	yych = *++cur;
	if (yych != 'i') goto yy361;
	yych = *++cur;
	if (yych != 'n') goto yy361;
	yych = *++cur;
	if (yych != 'e') goto yy361;
	yych = *++cur;
	if (yych <= '0') goto yy367;
	if (yych <= '9') goto yy361;
	goto yy367;
yy366:
	++cur;
	if (lim <= cur) if (!fill(1)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
yy367:
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy366;
		goto yy361;
	} else {
		if (yych <= ' ') goto yy366;
		if (yych <= '0') goto yy361;
		if (yych >= ':') goto yy361;
		yyt1 = cur;
	}
yy368:
	++cur;
	if ((lim - cur) < 2) if (!fill(2)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yybm[0+yych] & 64) {
		goto yy368;
	}
	if (yych <= '\f') {
		if (yych <= 0x08) goto yy361;
		if (yych <= '\t') goto yy369;
		if (yych <= '\n') goto yy370;
		goto yy361;
	} else {
		if (yych <= '\r') goto yy371;
		if (yych != ' ') goto yy361;
	}
yy369:
	++cur;
	if (lim <= cur) if (!fill(1)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy369;
		goto yy361;
	} else {
		if (yych <= ' ') goto yy369;
		if (yych == '"') goto yy372;
		goto yy361;
	}
yy370:
	++cur;
	cur = yyt1;
#line 661 "../src/parse/lexer.re"
	{ CHECK_RET(set_sourceline()); goto code; }
#line 3371 "src/parse/lexer.cc"
yy371:
	yych = *++cur;
	if (yych == '\n') goto yy370;
	goto yy361;
yy372:
	++cur;
	if ((lim - cur) < 3) if (!fill(3)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yybm[0+yych] & 128) {
		goto yy372;
	}
	if (yych <= '\n') goto yy361;
	if (yych >= '#') goto yy373;
	yych = *++cur;
	if (yych == '\n') goto yy370;
	if (yych == '\r') goto yy371;
	goto yy361;
yy373:
	++cur;
	if (lim <= cur) if (!fill(1)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yych <= 0x00) goto yy361;
	if (yych == '\n') goto yy361;
	goto yy372;
}
#line 667 "../src/parse/lexer.re"

}

Ret Input::try_lex_literal_in_code(uint8_t quote) {
    // We need to lex string and char literals in code blocks because they may contain closing
    // brace or newline that would otherwise be erroneously lexed as block terminator symbols.
    if (quote == '"') {
loop_dquote: 
#line 3406 "src/parse/lexer.cc"
{
	uint8_t yych;
	if ((lim - cur) < 2) if (!fill(2)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yych <= '\r') {
		if (yych == '\n') goto yy376;
		if (yych >= '\r') goto yy377;
	} else {
		if (yych <= '"') {
			if (yych >= '"') goto yy378;
		} else {
			if (yych == '\\') goto yy379;
		}
	}
	++cur;
yy375:
#line 678 "../src/parse/lexer.re"
	{ goto loop_dquote; }
#line 3425 "src/parse/lexer.cc"
yy376:
	++cur;
#line 677 "../src/parse/lexer.re"
	{ next_line(); goto loop_dquote; }
#line 3430 "src/parse/lexer.cc"
yy377:
	yych = *++cur;
	if (yych == '\n') goto yy376;
	goto yy375;
yy378:
	++cur;
#line 675 "../src/parse/lexer.re"
	{ return Ret::OK; }
#line 3439 "src/parse/lexer.cc"
yy379:
	yych = *++cur;
	if (yych == '"') goto yy380;
	if (yych != '\\') goto yy375;
yy380:
	++cur;
#line 676 "../src/parse/lexer.re"
	{ goto loop_dquote; }
#line 3448 "src/parse/lexer.cc"
}
#line 679 "../src/parse/lexer.re"

    } else if (quote == '`') {
        if (!globopts->eval_bool_conf("backtick_quoted_strings")) return Ret::OK; // skip
loop_backtick: 
#line 3455 "src/parse/lexer.cc"
{
	uint8_t yych;
	if ((lim - cur) < 2) if (!fill(2)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yych <= '\f') {
		if (yych == '\n') goto yy383;
	} else {
		if (yych <= '\r') goto yy384;
		if (yych == '`') goto yy385;
	}
	++cur;
yy382:
#line 685 "../src/parse/lexer.re"
	{ goto loop_backtick; }
#line 3470 "src/parse/lexer.cc"
yy383:
	++cur;
#line 684 "../src/parse/lexer.re"
	{ next_line(); goto loop_backtick; }
#line 3475 "src/parse/lexer.cc"
yy384:
	yych = *++cur;
	if (yych == '\n') goto yy383;
	goto yy382;
yy385:
	++cur;
#line 683 "../src/parse/lexer.re"
	{ return Ret::OK; }
#line 3484 "src/parse/lexer.cc"
}
#line 686 "../src/parse/lexer.re"

    } else if (quote == '\'') {
        // Single-quoted char literals may contain closing curly brace, e.g. '}'.
        // We must lex all possible forms (not only those with a closing brace), as otherwise we
        // might erroneously lex the closing single quote as the beginning of another literal, e.g.
        // in 'a'}'b' we would recognize '}' as a literal rather than the closing brace of a block.
    
#line 3494 "src/parse/lexer.cc"
{
	uint8_t yych;
	static const unsigned char yybm[] = {
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		192, 192, 192, 192, 192, 192, 192, 192, 
		128, 128,   0,   0,   0,   0,   0,   0, 
		  0, 128, 128, 128, 128, 128, 128,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0, 128, 128, 128, 128, 128, 128,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
	};
	if ((lim - cur) < 11) if (!fill(11)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *(mar = cur);
	if (yych <= 0xDF) {
		if (yych <= '\\') {
			if (yych <= '[') goto yy388;
			goto yy390;
		} else {
			if (yych <= 0x7F) goto yy388;
			if (yych >= 0xC2) goto yy391;
		}
	} else {
		if (yych <= 0xF0) {
			if (yych <= 0xE0) goto yy392;
			if (yych <= 0xEF) goto yy393;
			goto yy394;
		} else {
			if (yych <= 0xF3) goto yy395;
			if (yych <= 0xF4) goto yy396;
		}
	}
yy387:
#line 706 "../src/parse/lexer.re"
	{ return globopts->eval_bool_conf("standalone_single_quotes") ? Ret::OK : Ret::FAIL; }
#line 3554 "src/parse/lexer.cc"
yy388:
	yych = *++cur;
	if (yych == '\'') goto yy397;
yy389:
	cur = mar;
	goto yy387;
yy390:
	yych = *++cur;
	if (yych <= 'b') {
		if (yych <= '>') {
			if (yych <= '/') {
				if (yych == '\'') goto yy399;
				goto yy389;
			} else {
				if (yych <= '0') goto yy400;
				if (yych <= '7') goto yy401;
				goto yy389;
			}
		} else {
			if (yych <= 'U') {
				if (yych <= '?') goto yy388;
				if (yych <= 'T') goto yy389;
				goto yy402;
			} else {
				if (yych == '\\') goto yy388;
				if (yych <= '`') goto yy389;
				goto yy388;
			}
		}
	} else {
		if (yych <= 'r') {
			if (yych <= 'm') {
				if (yych == 'f') goto yy388;
				goto yy389;
			} else {
				if (yych <= 'n') goto yy388;
				if (yych <= 'o') goto yy403;
				if (yych <= 'q') goto yy389;
				goto yy388;
			}
		} else {
			if (yych <= 'u') {
				if (yych <= 's') goto yy389;
				if (yych <= 't') goto yy388;
				goto yy404;
			} else {
				if (yych <= 'v') goto yy388;
				if (yych == 'x') goto yy405;
				goto yy389;
			}
		}
	}
yy391:
	yych = *++cur;
	if (yych <= 0x7F) goto yy389;
	if (yych <= 0xBF) goto yy388;
	goto yy389;
yy392:
	yych = *++cur;
	if (yych <= 0x9F) goto yy389;
	if (yych <= 0xBF) goto yy391;
	goto yy389;
yy393:
	yych = *++cur;
	if (yych <= 0x7F) goto yy389;
	if (yych <= 0xBF) goto yy391;
	goto yy389;
yy394:
	yych = *++cur;
	if (yych <= 0x8F) goto yy389;
	if (yych <= 0xBF) goto yy393;
	goto yy389;
yy395:
	yych = *++cur;
	if (yych <= 0x7F) goto yy389;
	if (yych <= 0xBF) goto yy393;
	goto yy389;
yy396:
	yych = *++cur;
	if (yych <= 0x7F) goto yy389;
	if (yych <= 0x8F) goto yy393;
	goto yy389;
yy397:
	++cur;
yy398:
#line 703 "../src/parse/lexer.re"
	{ // any UTF-8 encoded Unicode symbol, unescaped
            return Ret::OK;
        }
#line 3644 "src/parse/lexer.cc"
yy399:
	yych = *++cur;
	if (yych == '\'') goto yy397;
	goto yy398;
yy400:
	yych = *++cur;
	if (yych == '\'') goto yy397;
	if (yych <= '/') goto yy389;
	if (yych <= '7') goto yy406;
	goto yy389;
yy401:
	yych = *++cur;
	if (yych <= '/') goto yy389;
	if (yych <= '7') goto yy406;
	goto yy389;
yy402:
	yych = *++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy389;
		if (yych <= '9') goto yy407;
		goto yy389;
	} else {
		if (yych <= 'F') goto yy407;
		if (yych <= '`') goto yy389;
		if (yych <= 'f') goto yy407;
		goto yy389;
	}
yy403:
	yych = *++cur;
	if (yych == '{') goto yy408;
	goto yy389;
yy404:
	yych = *++cur;
	if (yych <= 'F') {
		if (yych <= '/') goto yy389;
		if (yych <= '9') goto yy409;
		if (yych <= '@') goto yy389;
		goto yy409;
	} else {
		if (yych <= 'f') {
			if (yych <= '`') goto yy389;
			goto yy409;
		} else {
			if (yych == '{') goto yy410;
			goto yy389;
		}
	}
yy405:
	yych = *++cur;
	if (yych <= 'F') {
		if (yych <= '/') goto yy389;
		if (yych <= '9') goto yy411;
		if (yych <= '@') goto yy389;
		goto yy411;
	} else {
		if (yych <= 'f') {
			if (yych <= '`') goto yy389;
			goto yy411;
		} else {
			if (yych == '{') goto yy410;
			goto yy389;
		}
	}
yy406:
	yych = *++cur;
	if (yych <= '/') goto yy389;
	if (yych <= '7') goto yy388;
	goto yy389;
yy407:
	yych = *++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy389;
		if (yych <= '9') goto yy412;
		goto yy389;
	} else {
		if (yych <= 'F') goto yy412;
		if (yych <= '`') goto yy389;
		if (yych <= 'f') goto yy412;
		goto yy389;
	}
yy408:
	yych = *++cur;
	if (yybm[0+yych] & 64) {
		goto yy413;
	}
	goto yy389;
yy409:
	yych = *++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy389;
		if (yych <= '9') goto yy414;
		goto yy389;
	} else {
		if (yych <= 'F') goto yy414;
		if (yych <= '`') goto yy389;
		if (yych <= 'f') goto yy414;
		goto yy389;
	}
yy410:
	yych = *++cur;
	if (yych == '}') goto yy389;
	goto yy416;
yy411:
	yych = *++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy389;
		if (yych <= '9') goto yy388;
		goto yy389;
	} else {
		if (yych <= 'F') goto yy388;
		if (yych <= '`') goto yy389;
		if (yych <= 'f') goto yy388;
		goto yy389;
	}
yy412:
	yych = *++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy389;
		if (yych <= '9') goto yy417;
		goto yy389;
	} else {
		if (yych <= 'F') goto yy417;
		if (yych <= '`') goto yy389;
		if (yych <= 'f') goto yy417;
		goto yy389;
	}
yy413:
	++cur;
	if ((lim - cur) < 2) if (!fill(2)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yybm[0+yych] & 64) {
		goto yy413;
	}
	if (yych == '}') goto yy388;
	goto yy389;
yy414:
	yych = *++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy389;
		if (yych <= '9') goto yy411;
		goto yy389;
	} else {
		if (yych <= 'F') goto yy411;
		if (yych <= '`') goto yy389;
		if (yych <= 'f') goto yy411;
		goto yy389;
	}
yy415:
	++cur;
	if ((lim - cur) < 2) if (!fill(2)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
yy416:
	if (yybm[0+yych] & 128) {
		goto yy415;
	}
	if (yych == '}') goto yy388;
	goto yy389;
yy417:
	yych = *++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy389;
		if (yych >= ':') goto yy389;
	} else {
		if (yych <= 'F') goto yy418;
		if (yych <= '`') goto yy389;
		if (yych >= 'g') goto yy389;
	}
yy418:
	yych = *++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy389;
		if (yych <= '9') goto yy409;
		goto yy389;
	} else {
		if (yych <= 'F') goto yy409;
		if (yych <= '`') goto yy389;
		if (yych <= 'f') goto yy409;
		goto yy389;
	}
}
#line 707 "../src/parse/lexer.re"

    }
    return Ret::FAIL;
}

Ret Input::lex_c_comment() {
loop: 
#line 3833 "src/parse/lexer.cc"
{
	uint8_t yych;
	if ((lim - cur) < 2) if (!fill(2)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yych <= '\f') {
		if (yych == '\n') goto yy421;
	} else {
		if (yych <= '\r') goto yy422;
		if (yych == '*') goto yy423;
	}
	++cur;
yy420:
#line 716 "../src/parse/lexer.re"
	{ goto loop; }
#line 3848 "src/parse/lexer.cc"
yy421:
	++cur;
#line 715 "../src/parse/lexer.re"
	{ next_line(); goto loop; }
#line 3853 "src/parse/lexer.cc"
yy422:
	yych = *++cur;
	if (yych == '\n') goto yy421;
	goto yy420;
yy423:
	yych = *++cur;
	if (yych != '/') goto yy420;
	++cur;
#line 714 "../src/parse/lexer.re"
	{ return Ret::OK; }
#line 3864 "src/parse/lexer.cc"
}
#line 717 "../src/parse/lexer.re"

}

Ret Input::lex_cpp_comment() {
loop: 
#line 3872 "src/parse/lexer.cc"
{
	uint8_t yych;
	if ((lim - cur) < 2) if (!fill(2)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yych == '\n') goto yy426;
	if (yych == '\r') goto yy427;
	++cur;
yy425:
#line 723 "../src/parse/lexer.re"
	{ goto loop; }
#line 3883 "src/parse/lexer.cc"
yy426:
	++cur;
#line 722 "../src/parse/lexer.re"
	{ next_line(); return Ret::OK; }
#line 3888 "src/parse/lexer.cc"
yy427:
	yych = *++cur;
	if (yych == '\n') goto yy426;
	goto yy425;
}
#line 724 "../src/parse/lexer.re"

}

Ret Input::lex_cls(Ast& ast, bool neg, const AstNode*& a) {
    uint32_t u, l;
    const loc_t& loc0 = tok_loc();
    loc_t loc = cur_loc();
fst:
    tok = cur;

#line 3905 "src/parse/lexer.cc"
{
	uint8_t yych;
	if (lim <= cur) if (!fill(1)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yych == ']') goto yy429;
#line 735 "../src/parse/lexer.re"
	{ CHECK_RET(lex_cls_chr(l)); goto snd; }
#line 3913 "src/parse/lexer.cc"
yy429:
	++cur;
#line 734 "../src/parse/lexer.re"
	{ a = ast.cls(loc0, neg); return Ret::OK; }
#line 3918 "src/parse/lexer.cc"
}
#line 736 "../src/parse/lexer.re"

snd: 
#line 3923 "src/parse/lexer.cc"
{
	uint8_t yych;
	if ((lim - cur) < 2) if (!fill(2)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *(mar = cur);
	if (yych == '-') goto yy432;
yy431:
#line 738 "../src/parse/lexer.re"
	{ u = l; goto add; }
#line 3932 "src/parse/lexer.cc"
yy432:
	yych = *++cur;
	if (yych != ']') goto yy433;
	cur = mar;
	goto yy431;
yy433:
	++cur;
	cur -= 1;
#line 739 "../src/parse/lexer.re"
	{
        CHECK_RET(lex_cls_chr(u));
        if (l > u) {
            msg.warn.swapped_range(loc, l, u);
            std::swap(l, u);
        }
        goto add;
    }
#line 3950 "src/parse/lexer.cc"
}
#line 747 "../src/parse/lexer.re"

add:
    ast.temp_ranges.push_back(AstRange(l, u, loc));
    loc = cur_loc();
    goto fst;
}

Ret Input::lex_cls_chr(uint32_t& c) {
    tok = cur;
    const loc_t& loc = cur_loc();
#line 782 "../src/parse/lexer.re"

    if (globopts->input_encoding == Enc::Type::ASCII) {
        
#line 3967 "src/parse/lexer.cc"
{
	uint8_t yych;
	unsigned int yyaccept = 0;
	if ((lim - cur) < 10) if (!fill(10)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yych <= '\f') {
		if (yych == '\n') goto yy436;
	} else {
		if (yych <= '\r') goto yy437;
		if (yych == '\\') goto yy438;
	}
	++cur;
yy435:
#line 764 "../src/parse/lexer.re"
	{ c = decode(tok); return Ret::OK; }
#line 3983 "src/parse/lexer.cc"
yy436:
	++cur;
#line 758 "../src/parse/lexer.re"
	{ RET_FAIL(error_at(loc, "newline in character class")); }
#line 3988 "src/parse/lexer.cc"
yy437:
	yych = *++cur;
	if (yych == '\n') goto yy436;
	goto yy435;
yy438:
	yych = *++cur;
	if (yych <= '\\') {
		if (yych <= '/') {
			if (yych <= '\f') {
				if (yych <= 0x00) goto yy439;
				if (yych == '\n') goto yy436;
				goto yy440;
			} else {
				if (yych <= '\r') goto yy442;
				if (yych == '-') goto yy443;
				goto yy440;
			}
		} else {
			if (yych <= 'U') {
				if (yych <= '3') goto yy444;
				if (yych <= '7') goto yy446;
				if (yych <= 'T') goto yy440;
				goto yy447;
			} else {
				if (yych == 'X') goto yy449;
				if (yych <= '[') goto yy440;
				goto yy450;
			}
		}
	} else {
		if (yych <= 'n') {
			if (yych <= 'b') {
				if (yych <= ']') goto yy451;
				if (yych <= '`') goto yy440;
				if (yych <= 'a') goto yy452;
				goto yy453;
			} else {
				if (yych == 'f') goto yy454;
				if (yych <= 'm') goto yy440;
				goto yy455;
			}
		} else {
			if (yych <= 't') {
				if (yych == 'r') goto yy456;
				if (yych <= 's') goto yy440;
				goto yy457;
			} else {
				if (yych <= 'v') {
					if (yych <= 'u') goto yy449;
					goto yy458;
				} else {
					if (yych == 'x') goto yy459;
					goto yy440;
				}
			}
		}
	}
yy439:
#line 761 "../src/parse/lexer.re"
	{ RET_FAIL(error_at(loc, "syntax error in escape sequence")); }
#line 4049 "src/parse/lexer.cc"
yy440:
	++cur;
yy441:
#line 777 "../src/parse/lexer.re"
	{
        msg.warn.useless_escape(loc, tok, cur);
        c = decode(tok + 1);
        return Ret::OK;
    }
#line 4059 "src/parse/lexer.cc"
yy442:
	yych = *++cur;
	if (yych == '\n') goto yy436;
	goto yy441;
yy443:
	++cur;
#line 775 "../src/parse/lexer.re"
	{ c = '-'_u8; return Ret::OK; }
#line 4068 "src/parse/lexer.cc"
yy444:
	yyaccept = 0;
	yych = *(mar = ++cur);
	if (yych <= '/') goto yy445;
	if (yych <= '7') goto yy460;
yy445:
#line 760 "../src/parse/lexer.re"
	{ RET_FAIL(error_at(loc, "syntax error in octal escape sequence")); }
#line 4077 "src/parse/lexer.cc"
yy446:
	++cur;
	goto yy445;
yy447:
	yyaccept = 1;
	yych = *(mar = ++cur);
	if (yych <= '@') {
		if (yych <= '/') goto yy448;
		if (yych <= '9') goto yy462;
	} else {
		if (yych <= 'F') goto yy462;
		if (yych <= '`') goto yy448;
		if (yych <= 'f') goto yy462;
	}
yy448:
#line 759 "../src/parse/lexer.re"
	{ RET_FAIL(error_at(loc, "syntax error in hexadecimal escape sequence")); }
#line 4095 "src/parse/lexer.cc"
yy449:
	yyaccept = 1;
	yych = *(mar = ++cur);
	if (yych <= '@') {
		if (yych <= '/') goto yy448;
		if (yych <= '9') goto yy463;
		goto yy448;
	} else {
		if (yych <= 'F') goto yy463;
		if (yych <= '`') goto yy448;
		if (yych <= 'f') goto yy463;
		goto yy448;
	}
yy450:
	++cur;
#line 774 "../src/parse/lexer.re"
	{ c = '\\'_u8; return Ret::OK; }
#line 4113 "src/parse/lexer.cc"
yy451:
	++cur;
#line 776 "../src/parse/lexer.re"
	{ c = ']'_u8; return Ret::OK; }
#line 4118 "src/parse/lexer.cc"
yy452:
	++cur;
#line 767 "../src/parse/lexer.re"
	{ c = '\a'_u8; return Ret::OK; }
#line 4123 "src/parse/lexer.cc"
yy453:
	++cur;
#line 768 "../src/parse/lexer.re"
	{ c = '\b'_u8; return Ret::OK; }
#line 4128 "src/parse/lexer.cc"
yy454:
	++cur;
#line 769 "../src/parse/lexer.re"
	{ c = '\f'_u8; return Ret::OK; }
#line 4133 "src/parse/lexer.cc"
yy455:
	++cur;
#line 770 "../src/parse/lexer.re"
	{ c = '\n'_u8; return Ret::OK; }
#line 4138 "src/parse/lexer.cc"
yy456:
	++cur;
#line 771 "../src/parse/lexer.re"
	{ c = '\r'_u8; return Ret::OK; }
#line 4143 "src/parse/lexer.cc"
yy457:
	++cur;
#line 772 "../src/parse/lexer.re"
	{ c = '\t'_u8; return Ret::OK; }
#line 4148 "src/parse/lexer.cc"
yy458:
	++cur;
#line 773 "../src/parse/lexer.re"
	{ c = '\v'_u8; return Ret::OK; }
#line 4153 "src/parse/lexer.cc"
yy459:
	yyaccept = 1;
	yych = *(mar = ++cur);
	if (yych <= '@') {
		if (yych <= '/') goto yy448;
		if (yych <= '9') goto yy464;
		goto yy448;
	} else {
		if (yych <= 'F') goto yy464;
		if (yych <= '`') goto yy448;
		if (yych <= 'f') goto yy464;
		goto yy448;
	}
yy460:
	yych = *++cur;
	if (yych <= '/') goto yy461;
	if (yych <= '7') goto yy465;
yy461:
	cur = mar;
	if (yyaccept == 0) {
		goto yy445;
	} else {
		goto yy448;
	}
yy462:
	yych = *++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy461;
		if (yych <= '9') goto yy466;
		goto yy461;
	} else {
		if (yych <= 'F') goto yy466;
		if (yych <= '`') goto yy461;
		if (yych <= 'f') goto yy466;
		goto yy461;
	}
yy463:
	yych = *++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy461;
		if (yych <= '9') goto yy467;
		goto yy461;
	} else {
		if (yych <= 'F') goto yy467;
		if (yych <= '`') goto yy461;
		if (yych <= 'f') goto yy467;
		goto yy461;
	}
yy464:
	yych = *++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy461;
		if (yych <= '9') goto yy468;
		goto yy461;
	} else {
		if (yych <= 'F') goto yy468;
		if (yych <= '`') goto yy461;
		if (yych <= 'f') goto yy468;
		goto yy461;
	}
yy465:
	++cur;
#line 766 "../src/parse/lexer.re"
	{ c = unesc_oct(tok, cur); return Ret::OK; }
#line 4218 "src/parse/lexer.cc"
yy466:
	yych = *++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy461;
		if (yych <= '9') goto yy469;
		goto yy461;
	} else {
		if (yych <= 'F') goto yy469;
		if (yych <= '`') goto yy461;
		if (yych <= 'f') goto yy469;
		goto yy461;
	}
yy467:
	yych = *++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy461;
		if (yych <= '9') goto yy464;
		goto yy461;
	} else {
		if (yych <= 'F') goto yy464;
		if (yych <= '`') goto yy461;
		if (yych <= 'f') goto yy464;
		goto yy461;
	}
yy468:
	++cur;
#line 765 "../src/parse/lexer.re"
	{ c = unesc_hex(tok, cur); return Ret::OK; }
#line 4247 "src/parse/lexer.cc"
yy469:
	yych = *++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy461;
		if (yych >= ':') goto yy461;
	} else {
		if (yych <= 'F') goto yy470;
		if (yych <= '`') goto yy461;
		if (yych >= 'g') goto yy461;
	}
yy470:
	yych = *++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy461;
		if (yych <= '9') goto yy463;
		goto yy461;
	} else {
		if (yych <= 'F') goto yy463;
		if (yych <= '`') goto yy461;
		if (yych <= 'f') goto yy463;
		goto yy461;
	}
}
#line 784 "../src/parse/lexer.re"

    } else {
        
#line 4275 "src/parse/lexer.cc"
{
	uint8_t yych;
	unsigned int yyaccept = 0;
	if ((lim - cur) < 10) if (!fill(10)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yych <= 0x7F) {
		if (yych <= '\f') {
			if (yych == '\n') goto yy474;
		} else {
			if (yych <= '\r') goto yy475;
			if (yych == '\\') goto yy476;
		}
	} else {
		if (yych <= 0xEF) {
			if (yych <= 0xC1) goto yy478;
			if (yych <= 0xDF) goto yy480;
			if (yych <= 0xE0) goto yy481;
			goto yy482;
		} else {
			if (yych <= 0xF0) goto yy483;
			if (yych <= 0xF3) goto yy484;
			if (yych <= 0xF4) goto yy485;
			goto yy478;
		}
	}
yy472:
	++cur;
yy473:
#line 764 "../src/parse/lexer.re"
	{ c = decode(tok); return Ret::OK; }
#line 4306 "src/parse/lexer.cc"
yy474:
	++cur;
#line 758 "../src/parse/lexer.re"
	{ RET_FAIL(error_at(loc, "newline in character class")); }
#line 4311 "src/parse/lexer.cc"
yy475:
	yych = *++cur;
	if (yych == '\n') goto yy474;
	goto yy473;
yy476:
	yyaccept = 0;
	yych = *(mar = ++cur);
	if (yych <= 'b') {
		if (yych <= '7') {
			if (yych <= '\r') {
				if (yych <= '\t') {
					if (yych >= 0x01) goto yy486;
				} else {
					if (yych <= '\n') goto yy474;
					if (yych <= '\f') goto yy486;
					goto yy488;
				}
			} else {
				if (yych <= '-') {
					if (yych <= ',') goto yy486;
					goto yy489;
				} else {
					if (yych <= '/') goto yy486;
					if (yych <= '3') goto yy490;
					goto yy492;
				}
			}
		} else {
			if (yych <= '[') {
				if (yych <= 'U') {
					if (yych <= 'T') goto yy486;
					goto yy493;
				} else {
					if (yych == 'X') goto yy495;
					goto yy486;
				}
			} else {
				if (yych <= ']') {
					if (yych <= '\\') goto yy496;
					goto yy497;
				} else {
					if (yych <= '`') goto yy486;
					if (yych <= 'a') goto yy498;
					goto yy499;
				}
			}
		}
	} else {
		if (yych <= 'v') {
			if (yych <= 'q') {
				if (yych <= 'f') {
					if (yych <= 'e') goto yy486;
					goto yy500;
				} else {
					if (yych == 'n') goto yy501;
					goto yy486;
				}
			} else {
				if (yych <= 's') {
					if (yych <= 'r') goto yy502;
					goto yy486;
				} else {
					if (yych <= 't') goto yy503;
					if (yych <= 'u') goto yy495;
					goto yy504;
				}
			}
		} else {
			if (yych <= 0xDF) {
				if (yych <= 'x') {
					if (yych <= 'w') goto yy486;
					goto yy505;
				} else {
					if (yych <= 0x7F) goto yy486;
					if (yych >= 0xC2) goto yy506;
				}
			} else {
				if (yych <= 0xF0) {
					if (yych <= 0xE0) goto yy508;
					if (yych <= 0xEF) goto yy509;
					goto yy510;
				} else {
					if (yych <= 0xF3) goto yy511;
					if (yych <= 0xF4) goto yy512;
				}
			}
		}
	}
yy477:
#line 761 "../src/parse/lexer.re"
	{ RET_FAIL(error_at(loc, "syntax error in escape sequence")); }
#line 4403 "src/parse/lexer.cc"
yy478:
	++cur;
yy479:
#line 762 "../src/parse/lexer.re"
	{ RET_FAIL(error_at(loc, "syntax error")); }
#line 4409 "src/parse/lexer.cc"
yy480:
	yych = *++cur;
	if (yych <= 0x7F) goto yy479;
	if (yych <= 0xBF) goto yy472;
	goto yy479;
yy481:
	yyaccept = 1;
	yych = *(mar = ++cur);
	if (yych <= 0x9F) goto yy479;
	if (yych <= 0xBF) goto yy513;
	goto yy479;
yy482:
	yyaccept = 1;
	yych = *(mar = ++cur);
	if (yych <= 0x7F) goto yy479;
	if (yych <= 0xBF) goto yy513;
	goto yy479;
yy483:
	yyaccept = 1;
	yych = *(mar = ++cur);
	if (yych <= 0x8F) goto yy479;
	if (yych <= 0xBF) goto yy514;
	goto yy479;
yy484:
	yyaccept = 1;
	yych = *(mar = ++cur);
	if (yych <= 0x7F) goto yy479;
	if (yych <= 0xBF) goto yy514;
	goto yy479;
yy485:
	yyaccept = 1;
	yych = *(mar = ++cur);
	if (yych <= 0x7F) goto yy479;
	if (yych <= 0x8F) goto yy514;
	goto yy479;
yy486:
	++cur;
yy487:
#line 777 "../src/parse/lexer.re"
	{
        msg.warn.useless_escape(loc, tok, cur);
        c = decode(tok + 1);
        return Ret::OK;
    }
#line 4454 "src/parse/lexer.cc"
yy488:
	yych = *++cur;
	if (yych == '\n') goto yy474;
	goto yy487;
yy489:
	++cur;
#line 775 "../src/parse/lexer.re"
	{ c = '-'_u8; return Ret::OK; }
#line 4463 "src/parse/lexer.cc"
yy490:
	yyaccept = 2;
	yych = *(mar = ++cur);
	if (yych <= '/') goto yy491;
	if (yych <= '7') goto yy515;
yy491:
#line 760 "../src/parse/lexer.re"
	{ RET_FAIL(error_at(loc, "syntax error in octal escape sequence")); }
#line 4472 "src/parse/lexer.cc"
yy492:
	++cur;
	goto yy491;
yy493:
	yyaccept = 3;
	yych = *(mar = ++cur);
	if (yych <= '@') {
		if (yych <= '/') goto yy494;
		if (yych <= '9') goto yy516;
	} else {
		if (yych <= 'F') goto yy516;
		if (yych <= '`') goto yy494;
		if (yych <= 'f') goto yy516;
	}
yy494:
#line 759 "../src/parse/lexer.re"
	{ RET_FAIL(error_at(loc, "syntax error in hexadecimal escape sequence")); }
#line 4490 "src/parse/lexer.cc"
yy495:
	yyaccept = 3;
	yych = *(mar = ++cur);
	if (yych <= '@') {
		if (yych <= '/') goto yy494;
		if (yych <= '9') goto yy517;
		goto yy494;
	} else {
		if (yych <= 'F') goto yy517;
		if (yych <= '`') goto yy494;
		if (yych <= 'f') goto yy517;
		goto yy494;
	}
yy496:
	++cur;
#line 774 "../src/parse/lexer.re"
	{ c = '\\'_u8; return Ret::OK; }
#line 4508 "src/parse/lexer.cc"
yy497:
	++cur;
#line 776 "../src/parse/lexer.re"
	{ c = ']'_u8; return Ret::OK; }
#line 4513 "src/parse/lexer.cc"
yy498:
	++cur;
#line 767 "../src/parse/lexer.re"
	{ c = '\a'_u8; return Ret::OK; }
#line 4518 "src/parse/lexer.cc"
yy499:
	++cur;
#line 768 "../src/parse/lexer.re"
	{ c = '\b'_u8; return Ret::OK; }
#line 4523 "src/parse/lexer.cc"
yy500:
	++cur;
#line 769 "../src/parse/lexer.re"
	{ c = '\f'_u8; return Ret::OK; }
#line 4528 "src/parse/lexer.cc"
yy501:
	++cur;
#line 770 "../src/parse/lexer.re"
	{ c = '\n'_u8; return Ret::OK; }
#line 4533 "src/parse/lexer.cc"
yy502:
	++cur;
#line 771 "../src/parse/lexer.re"
	{ c = '\r'_u8; return Ret::OK; }
#line 4538 "src/parse/lexer.cc"
yy503:
	++cur;
#line 772 "../src/parse/lexer.re"
	{ c = '\t'_u8; return Ret::OK; }
#line 4543 "src/parse/lexer.cc"
yy504:
	++cur;
#line 773 "../src/parse/lexer.re"
	{ c = '\v'_u8; return Ret::OK; }
#line 4548 "src/parse/lexer.cc"
yy505:
	yyaccept = 3;
	yych = *(mar = ++cur);
	if (yych <= '@') {
		if (yych <= '/') goto yy494;
		if (yych <= '9') goto yy518;
		goto yy494;
	} else {
		if (yych <= 'F') goto yy518;
		if (yych <= '`') goto yy494;
		if (yych <= 'f') goto yy518;
		goto yy494;
	}
yy506:
	yych = *++cur;
	if (yych <= 0x7F) goto yy507;
	if (yych <= 0xBF) goto yy486;
yy507:
	cur = mar;
	if (yyaccept <= 1) {
		if (yyaccept == 0) {
			goto yy477;
		} else {
			goto yy479;
		}
	} else {
		if (yyaccept == 2) {
			goto yy491;
		} else {
			goto yy494;
		}
	}
yy508:
	yych = *++cur;
	if (yych <= 0x9F) goto yy507;
	if (yych <= 0xBF) goto yy506;
	goto yy507;
yy509:
	yych = *++cur;
	if (yych <= 0x7F) goto yy507;
	if (yych <= 0xBF) goto yy506;
	goto yy507;
yy510:
	yych = *++cur;
	if (yych <= 0x8F) goto yy507;
	if (yych <= 0xBF) goto yy509;
	goto yy507;
yy511:
	yych = *++cur;
	if (yych <= 0x7F) goto yy507;
	if (yych <= 0xBF) goto yy509;
	goto yy507;
yy512:
	yych = *++cur;
	if (yych <= 0x7F) goto yy507;
	if (yych <= 0x8F) goto yy509;
	goto yy507;
yy513:
	yych = *++cur;
	if (yych <= 0x7F) goto yy507;
	if (yych <= 0xBF) goto yy472;
	goto yy507;
yy514:
	yych = *++cur;
	if (yych <= 0x7F) goto yy507;
	if (yych <= 0xBF) goto yy513;
	goto yy507;
yy515:
	yych = *++cur;
	if (yych <= '/') goto yy507;
	if (yych <= '7') goto yy519;
	goto yy507;
yy516:
	yych = *++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy507;
		if (yych <= '9') goto yy520;
		goto yy507;
	} else {
		if (yych <= 'F') goto yy520;
		if (yych <= '`') goto yy507;
		if (yych <= 'f') goto yy520;
		goto yy507;
	}
yy517:
	yych = *++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy507;
		if (yych <= '9') goto yy521;
		goto yy507;
	} else {
		if (yych <= 'F') goto yy521;
		if (yych <= '`') goto yy507;
		if (yych <= 'f') goto yy521;
		goto yy507;
	}
yy518:
	yych = *++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy507;
		if (yych <= '9') goto yy522;
		goto yy507;
	} else {
		if (yych <= 'F') goto yy522;
		if (yych <= '`') goto yy507;
		if (yych <= 'f') goto yy522;
		goto yy507;
	}
yy519:
	++cur;
#line 766 "../src/parse/lexer.re"
	{ c = unesc_oct(tok, cur); return Ret::OK; }
#line 4661 "src/parse/lexer.cc"
yy520:
	yych = *++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy507;
		if (yych <= '9') goto yy523;
		goto yy507;
	} else {
		if (yych <= 'F') goto yy523;
		if (yych <= '`') goto yy507;
		if (yych <= 'f') goto yy523;
		goto yy507;
	}
yy521:
	yych = *++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy507;
		if (yych <= '9') goto yy518;
		goto yy507;
	} else {
		if (yych <= 'F') goto yy518;
		if (yych <= '`') goto yy507;
		if (yych <= 'f') goto yy518;
		goto yy507;
	}
yy522:
	++cur;
#line 765 "../src/parse/lexer.re"
	{ c = unesc_hex(tok, cur); return Ret::OK; }
#line 4690 "src/parse/lexer.cc"
yy523:
	yych = *++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy507;
		if (yych >= ':') goto yy507;
	} else {
		if (yych <= 'F') goto yy524;
		if (yych <= '`') goto yy507;
		if (yych >= 'g') goto yy507;
	}
yy524:
	yych = *++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy507;
		if (yych <= '9') goto yy517;
		goto yy507;
	} else {
		if (yych <= 'F') goto yy517;
		if (yych <= '`') goto yy507;
		if (yych <= 'f') goto yy517;
		goto yy507;
	}
}
#line 786 "../src/parse/lexer.re"

    }
}

Ret Input::lex_str_chr(uint8_t quote, AstChar& ast, bool& stop) {
    tok = cur;
    stop = false;
    ast.loc = cur_loc();
#line 817 "../src/parse/lexer.re"

    if (globopts->input_encoding == Enc::Type::ASCII) {
        
#line 4727 "src/parse/lexer.cc"
{
	uint8_t yych;
	unsigned int yyaccept = 0;
	if ((lim - cur) < 10) if (!fill(10)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yych <= '\f') {
		if (yych == '\n') goto yy527;
	} else {
		if (yych <= '\r') goto yy528;
		if (yych == '\\') goto yy529;
	}
	++cur;
yy526:
#line 801 "../src/parse/lexer.re"
	{ ast.chr = decode(tok); stop = (tok[0] == quote); return Ret::OK; }
#line 4743 "src/parse/lexer.cc"
yy527:
	++cur;
#line 795 "../src/parse/lexer.re"
	{ RET_FAIL(error_at(ast.loc, "newline in character string")); }
#line 4748 "src/parse/lexer.cc"
yy528:
	yych = *++cur;
	if (yych == '\n') goto yy527;
	goto yy526;
yy529:
	yych = *++cur;
	if (yych <= '`') {
		if (yych <= '3') {
			if (yych <= '\n') {
				if (yych <= 0x00) goto yy530;
				if (yych <= '\t') goto yy531;
				goto yy527;
			} else {
				if (yych == '\r') goto yy533;
				if (yych <= '/') goto yy531;
				goto yy534;
			}
		} else {
			if (yych <= 'W') {
				if (yych <= '7') goto yy536;
				if (yych == 'U') goto yy537;
				goto yy531;
			} else {
				if (yych <= 'X') goto yy539;
				if (yych == '\\') goto yy540;
				goto yy531;
			}
		}
	} else {
		if (yych <= 'q') {
			if (yych <= 'e') {
				if (yych <= 'a') goto yy541;
				if (yych <= 'b') goto yy542;
				goto yy531;
			} else {
				if (yych <= 'f') goto yy543;
				if (yych == 'n') goto yy544;
				goto yy531;
			}
		} else {
			if (yych <= 'u') {
				if (yych <= 'r') goto yy545;
				if (yych <= 's') goto yy531;
				if (yych <= 't') goto yy546;
				goto yy539;
			} else {
				if (yych <= 'v') goto yy547;
				if (yych == 'x') goto yy548;
				goto yy531;
			}
		}
	}
yy530:
#line 798 "../src/parse/lexer.re"
	{ RET_FAIL(error_at(ast.loc, "syntax error in escape sequence")); }
#line 4804 "src/parse/lexer.cc"
yy531:
	++cur;
yy532:
#line 812 "../src/parse/lexer.re"
	{
        ast.chr = decode(tok + 1);
        if (tok[1] != quote) msg.warn.useless_escape(ast.loc, tok, cur);
        return Ret::OK;
    }
#line 4814 "src/parse/lexer.cc"
yy533:
	yych = *++cur;
	if (yych == '\n') goto yy527;
	goto yy532;
yy534:
	yyaccept = 0;
	yych = *(mar = ++cur);
	if (yych <= '/') goto yy535;
	if (yych <= '7') goto yy549;
yy535:
#line 797 "../src/parse/lexer.re"
	{ RET_FAIL(error_at(ast.loc, "syntax error in octal escape sequence")); }
#line 4827 "src/parse/lexer.cc"
yy536:
	++cur;
	goto yy535;
yy537:
	yyaccept = 1;
	yych = *(mar = ++cur);
	if (yych <= '@') {
		if (yych <= '/') goto yy538;
		if (yych <= '9') goto yy551;
	} else {
		if (yych <= 'F') goto yy551;
		if (yych <= '`') goto yy538;
		if (yych <= 'f') goto yy551;
	}
yy538:
#line 796 "../src/parse/lexer.re"
	{ RET_FAIL(error_at(ast.loc, "syntax error in hexadecimal escape sequence")); }
#line 4845 "src/parse/lexer.cc"
yy539:
	yyaccept = 1;
	yych = *(mar = ++cur);
	if (yych <= '@') {
		if (yych <= '/') goto yy538;
		if (yych <= '9') goto yy552;
		goto yy538;
	} else {
		if (yych <= 'F') goto yy552;
		if (yych <= '`') goto yy538;
		if (yych <= 'f') goto yy552;
		goto yy538;
	}
yy540:
	++cur;
#line 811 "../src/parse/lexer.re"
	{ ast.chr = '\\'_u8; return Ret::OK; }
#line 4863 "src/parse/lexer.cc"
yy541:
	++cur;
#line 804 "../src/parse/lexer.re"
	{ ast.chr = '\a'_u8; return Ret::OK; }
#line 4868 "src/parse/lexer.cc"
yy542:
	++cur;
#line 805 "../src/parse/lexer.re"
	{ ast.chr = '\b'_u8; return Ret::OK; }
#line 4873 "src/parse/lexer.cc"
yy543:
	++cur;
#line 806 "../src/parse/lexer.re"
	{ ast.chr = '\f'_u8; return Ret::OK; }
#line 4878 "src/parse/lexer.cc"
yy544:
	++cur;
#line 807 "../src/parse/lexer.re"
	{ ast.chr = '\n'_u8; return Ret::OK; }
#line 4883 "src/parse/lexer.cc"
yy545:
	++cur;
#line 808 "../src/parse/lexer.re"
	{ ast.chr = '\r'_u8; return Ret::OK; }
#line 4888 "src/parse/lexer.cc"
yy546:
	++cur;
#line 809 "../src/parse/lexer.re"
	{ ast.chr = '\t'_u8; return Ret::OK; }
#line 4893 "src/parse/lexer.cc"
yy547:
	++cur;
#line 810 "../src/parse/lexer.re"
	{ ast.chr = '\v'_u8; return Ret::OK; }
#line 4898 "src/parse/lexer.cc"
yy548:
	yyaccept = 1;
	yych = *(mar = ++cur);
	if (yych <= '@') {
		if (yych <= '/') goto yy538;
		if (yych <= '9') goto yy553;
		goto yy538;
	} else {
		if (yych <= 'F') goto yy553;
		if (yych <= '`') goto yy538;
		if (yych <= 'f') goto yy553;
		goto yy538;
	}
yy549:
	yych = *++cur;
	if (yych <= '/') goto yy550;
	if (yych <= '7') goto yy554;
yy550:
	cur = mar;
	if (yyaccept == 0) {
		goto yy535;
	} else {
		goto yy538;
	}
yy551:
	yych = *++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy550;
		if (yych <= '9') goto yy555;
		goto yy550;
	} else {
		if (yych <= 'F') goto yy555;
		if (yych <= '`') goto yy550;
		if (yych <= 'f') goto yy555;
		goto yy550;
	}
yy552:
	yych = *++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy550;
		if (yych <= '9') goto yy556;
		goto yy550;
	} else {
		if (yych <= 'F') goto yy556;
		if (yych <= '`') goto yy550;
		if (yych <= 'f') goto yy556;
		goto yy550;
	}
yy553:
	yych = *++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy550;
		if (yych <= '9') goto yy557;
		goto yy550;
	} else {
		if (yych <= 'F') goto yy557;
		if (yych <= '`') goto yy550;
		if (yych <= 'f') goto yy557;
		goto yy550;
	}
yy554:
	++cur;
#line 803 "../src/parse/lexer.re"
	{ ast.chr = unesc_oct(tok, cur); return Ret::OK; }
#line 4963 "src/parse/lexer.cc"
yy555:
	yych = *++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy550;
		if (yych <= '9') goto yy558;
		goto yy550;
	} else {
		if (yych <= 'F') goto yy558;
		if (yych <= '`') goto yy550;
		if (yych <= 'f') goto yy558;
		goto yy550;
	}
yy556:
	yych = *++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy550;
		if (yych <= '9') goto yy553;
		goto yy550;
	} else {
		if (yych <= 'F') goto yy553;
		if (yych <= '`') goto yy550;
		if (yych <= 'f') goto yy553;
		goto yy550;
	}
yy557:
	++cur;
#line 802 "../src/parse/lexer.re"
	{ ast.chr = unesc_hex(tok, cur); return Ret::OK; }
#line 4992 "src/parse/lexer.cc"
yy558:
	yych = *++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy550;
		if (yych >= ':') goto yy550;
	} else {
		if (yych <= 'F') goto yy559;
		if (yych <= '`') goto yy550;
		if (yych >= 'g') goto yy550;
	}
yy559:
	yych = *++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy550;
		if (yych <= '9') goto yy552;
		goto yy550;
	} else {
		if (yych <= 'F') goto yy552;
		if (yych <= '`') goto yy550;
		if (yych <= 'f') goto yy552;
		goto yy550;
	}
}
#line 819 "../src/parse/lexer.re"

    } else {
        
#line 5020 "src/parse/lexer.cc"
{
	uint8_t yych;
	unsigned int yyaccept = 0;
	if ((lim - cur) < 10) if (!fill(10)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yych <= 0x7F) {
		if (yych <= '\f') {
			if (yych == '\n') goto yy563;
		} else {
			if (yych <= '\r') goto yy564;
			if (yych == '\\') goto yy565;
		}
	} else {
		if (yych <= 0xEF) {
			if (yych <= 0xC1) goto yy567;
			if (yych <= 0xDF) goto yy569;
			if (yych <= 0xE0) goto yy570;
			goto yy571;
		} else {
			if (yych <= 0xF0) goto yy572;
			if (yych <= 0xF3) goto yy573;
			if (yych <= 0xF4) goto yy574;
			goto yy567;
		}
	}
yy561:
	++cur;
yy562:
#line 801 "../src/parse/lexer.re"
	{ ast.chr = decode(tok); stop = (tok[0] == quote); return Ret::OK; }
#line 5051 "src/parse/lexer.cc"
yy563:
	++cur;
#line 795 "../src/parse/lexer.re"
	{ RET_FAIL(error_at(ast.loc, "newline in character string")); }
#line 5056 "src/parse/lexer.cc"
yy564:
	yych = *++cur;
	if (yych == '\n') goto yy563;
	goto yy562;
yy565:
	yyaccept = 0;
	yych = *(mar = ++cur);
	if (yych <= 'f') {
		if (yych <= 'T') {
			if (yych <= '\f') {
				if (yych <= 0x00) goto yy566;
				if (yych == '\n') goto yy563;
				goto yy575;
			} else {
				if (yych <= '/') {
					if (yych <= '\r') goto yy577;
					goto yy575;
				} else {
					if (yych <= '3') goto yy578;
					if (yych <= '7') goto yy580;
					goto yy575;
				}
			}
		} else {
			if (yych <= '\\') {
				if (yych <= 'W') {
					if (yych <= 'U') goto yy581;
					goto yy575;
				} else {
					if (yych <= 'X') goto yy583;
					if (yych <= '[') goto yy575;
					goto yy584;
				}
			} else {
				if (yych <= 'a') {
					if (yych <= '`') goto yy575;
					goto yy585;
				} else {
					if (yych <= 'b') goto yy586;
					if (yych <= 'e') goto yy575;
					goto yy587;
				}
			}
		}
	} else {
		if (yych <= 'w') {
			if (yych <= 'r') {
				if (yych == 'n') goto yy588;
				if (yych <= 'q') goto yy575;
				goto yy589;
			} else {
				if (yych <= 't') {
					if (yych <= 's') goto yy575;
					goto yy590;
				} else {
					if (yych <= 'u') goto yy583;
					if (yych <= 'v') goto yy591;
					goto yy575;
				}
			}
		} else {
			if (yych <= 0xE0) {
				if (yych <= 0x7F) {
					if (yych <= 'x') goto yy592;
					goto yy575;
				} else {
					if (yych <= 0xC1) goto yy566;
					if (yych <= 0xDF) goto yy593;
					goto yy595;
				}
			} else {
				if (yych <= 0xF0) {
					if (yych <= 0xEF) goto yy596;
					goto yy597;
				} else {
					if (yych <= 0xF3) goto yy598;
					if (yych <= 0xF4) goto yy599;
				}
			}
		}
	}
yy566:
#line 798 "../src/parse/lexer.re"
	{ RET_FAIL(error_at(ast.loc, "syntax error in escape sequence")); }
#line 5141 "src/parse/lexer.cc"
yy567:
	++cur;
yy568:
#line 799 "../src/parse/lexer.re"
	{ RET_FAIL(error_at(ast.loc, "syntax error")); }
#line 5147 "src/parse/lexer.cc"
yy569:
	yych = *++cur;
	if (yych <= 0x7F) goto yy568;
	if (yych <= 0xBF) goto yy561;
	goto yy568;
yy570:
	yyaccept = 1;
	yych = *(mar = ++cur);
	if (yych <= 0x9F) goto yy568;
	if (yych <= 0xBF) goto yy600;
	goto yy568;
yy571:
	yyaccept = 1;
	yych = *(mar = ++cur);
	if (yych <= 0x7F) goto yy568;
	if (yych <= 0xBF) goto yy600;
	goto yy568;
yy572:
	yyaccept = 1;
	yych = *(mar = ++cur);
	if (yych <= 0x8F) goto yy568;
	if (yych <= 0xBF) goto yy601;
	goto yy568;
yy573:
	yyaccept = 1;
	yych = *(mar = ++cur);
	if (yych <= 0x7F) goto yy568;
	if (yych <= 0xBF) goto yy601;
	goto yy568;
yy574:
	yyaccept = 1;
	yych = *(mar = ++cur);
	if (yych <= 0x7F) goto yy568;
	if (yych <= 0x8F) goto yy601;
	goto yy568;
yy575:
	++cur;
yy576:
#line 812 "../src/parse/lexer.re"
	{
        ast.chr = decode(tok + 1);
        if (tok[1] != quote) msg.warn.useless_escape(ast.loc, tok, cur);
        return Ret::OK;
    }
#line 5192 "src/parse/lexer.cc"
yy577:
	yych = *++cur;
	if (yych == '\n') goto yy563;
	goto yy576;
yy578:
	yyaccept = 2;
	yych = *(mar = ++cur);
	if (yych <= '/') goto yy579;
	if (yych <= '7') goto yy602;
yy579:
#line 797 "../src/parse/lexer.re"
	{ RET_FAIL(error_at(ast.loc, "syntax error in octal escape sequence")); }
#line 5205 "src/parse/lexer.cc"
yy580:
	++cur;
	goto yy579;
yy581:
	yyaccept = 3;
	yych = *(mar = ++cur);
	if (yych <= '@') {
		if (yych <= '/') goto yy582;
		if (yych <= '9') goto yy603;
	} else {
		if (yych <= 'F') goto yy603;
		if (yych <= '`') goto yy582;
		if (yych <= 'f') goto yy603;
	}
yy582:
#line 796 "../src/parse/lexer.re"
	{ RET_FAIL(error_at(ast.loc, "syntax error in hexadecimal escape sequence")); }
#line 5223 "src/parse/lexer.cc"
yy583:
	yyaccept = 3;
	yych = *(mar = ++cur);
	if (yych <= '@') {
		if (yych <= '/') goto yy582;
		if (yych <= '9') goto yy604;
		goto yy582;
	} else {
		if (yych <= 'F') goto yy604;
		if (yych <= '`') goto yy582;
		if (yych <= 'f') goto yy604;
		goto yy582;
	}
yy584:
	++cur;
#line 811 "../src/parse/lexer.re"
	{ ast.chr = '\\'_u8; return Ret::OK; }
#line 5241 "src/parse/lexer.cc"
yy585:
	++cur;
#line 804 "../src/parse/lexer.re"
	{ ast.chr = '\a'_u8; return Ret::OK; }
#line 5246 "src/parse/lexer.cc"
yy586:
	++cur;
#line 805 "../src/parse/lexer.re"
	{ ast.chr = '\b'_u8; return Ret::OK; }
#line 5251 "src/parse/lexer.cc"
yy587:
	++cur;
#line 806 "../src/parse/lexer.re"
	{ ast.chr = '\f'_u8; return Ret::OK; }
#line 5256 "src/parse/lexer.cc"
yy588:
	++cur;
#line 807 "../src/parse/lexer.re"
	{ ast.chr = '\n'_u8; return Ret::OK; }
#line 5261 "src/parse/lexer.cc"
yy589:
	++cur;
#line 808 "../src/parse/lexer.re"
	{ ast.chr = '\r'_u8; return Ret::OK; }
#line 5266 "src/parse/lexer.cc"
yy590:
	++cur;
#line 809 "../src/parse/lexer.re"
	{ ast.chr = '\t'_u8; return Ret::OK; }
#line 5271 "src/parse/lexer.cc"
yy591:
	++cur;
#line 810 "../src/parse/lexer.re"
	{ ast.chr = '\v'_u8; return Ret::OK; }
#line 5276 "src/parse/lexer.cc"
yy592:
	yyaccept = 3;
	yych = *(mar = ++cur);
	if (yych <= '@') {
		if (yych <= '/') goto yy582;
		if (yych <= '9') goto yy605;
		goto yy582;
	} else {
		if (yych <= 'F') goto yy605;
		if (yych <= '`') goto yy582;
		if (yych <= 'f') goto yy605;
		goto yy582;
	}
yy593:
	yych = *++cur;
	if (yych <= 0x7F) goto yy594;
	if (yych <= 0xBF) goto yy575;
yy594:
	cur = mar;
	if (yyaccept <= 1) {
		if (yyaccept == 0) {
			goto yy566;
		} else {
			goto yy568;
		}
	} else {
		if (yyaccept == 2) {
			goto yy579;
		} else {
			goto yy582;
		}
	}
yy595:
	yych = *++cur;
	if (yych <= 0x9F) goto yy594;
	if (yych <= 0xBF) goto yy593;
	goto yy594;
yy596:
	yych = *++cur;
	if (yych <= 0x7F) goto yy594;
	if (yych <= 0xBF) goto yy593;
	goto yy594;
yy597:
	yych = *++cur;
	if (yych <= 0x8F) goto yy594;
	if (yych <= 0xBF) goto yy596;
	goto yy594;
yy598:
	yych = *++cur;
	if (yych <= 0x7F) goto yy594;
	if (yych <= 0xBF) goto yy596;
	goto yy594;
yy599:
	yych = *++cur;
	if (yych <= 0x7F) goto yy594;
	if (yych <= 0x8F) goto yy596;
	goto yy594;
yy600:
	yych = *++cur;
	if (yych <= 0x7F) goto yy594;
	if (yych <= 0xBF) goto yy561;
	goto yy594;
yy601:
	yych = *++cur;
	if (yych <= 0x7F) goto yy594;
	if (yych <= 0xBF) goto yy600;
	goto yy594;
yy602:
	yych = *++cur;
	if (yych <= '/') goto yy594;
	if (yych <= '7') goto yy606;
	goto yy594;
yy603:
	yych = *++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy594;
		if (yych <= '9') goto yy607;
		goto yy594;
	} else {
		if (yych <= 'F') goto yy607;
		if (yych <= '`') goto yy594;
		if (yych <= 'f') goto yy607;
		goto yy594;
	}
yy604:
	yych = *++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy594;
		if (yych <= '9') goto yy608;
		goto yy594;
	} else {
		if (yych <= 'F') goto yy608;
		if (yych <= '`') goto yy594;
		if (yych <= 'f') goto yy608;
		goto yy594;
	}
yy605:
	yych = *++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy594;
		if (yych <= '9') goto yy609;
		goto yy594;
	} else {
		if (yych <= 'F') goto yy609;
		if (yych <= '`') goto yy594;
		if (yych <= 'f') goto yy609;
		goto yy594;
	}
yy606:
	++cur;
#line 803 "../src/parse/lexer.re"
	{ ast.chr = unesc_oct(tok, cur); return Ret::OK; }
#line 5389 "src/parse/lexer.cc"
yy607:
	yych = *++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy594;
		if (yych <= '9') goto yy610;
		goto yy594;
	} else {
		if (yych <= 'F') goto yy610;
		if (yych <= '`') goto yy594;
		if (yych <= 'f') goto yy610;
		goto yy594;
	}
yy608:
	yych = *++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy594;
		if (yych <= '9') goto yy605;
		goto yy594;
	} else {
		if (yych <= 'F') goto yy605;
		if (yych <= '`') goto yy594;
		if (yych <= 'f') goto yy605;
		goto yy594;
	}
yy609:
	++cur;
#line 802 "../src/parse/lexer.re"
	{ ast.chr = unesc_hex(tok, cur); return Ret::OK; }
#line 5418 "src/parse/lexer.cc"
yy610:
	yych = *++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy594;
		if (yych >= ':') goto yy594;
	} else {
		if (yych <= 'F') goto yy611;
		if (yych <= '`') goto yy594;
		if (yych >= 'g') goto yy594;
	}
yy611:
	yych = *++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy594;
		if (yych <= '9') goto yy604;
		goto yy594;
	} else {
		if (yych <= 'F') goto yy604;
		if (yych <= '`') goto yy594;
		if (yych <= 'f') goto yy604;
		goto yy594;
	}
}
#line 821 "../src/parse/lexer.re"

    }
}

Ret Input::lex_str(Ast& ast, uint8_t quote, const AstNode*& a) {
    const loc_t& loc = tok_loc();
    AstChar c;
    bool stop;
    for (;;) {
        CHECK_RET(lex_str_chr(quote, c, stop));
        if (stop) {
            a = ast.str(loc, quote == '\'');
            return Ret::OK;
        }
        ast.temp_chars.push_back(c);
    }
}

Ret Input::set_sourceline() {
sourceline:
    tok = cur;

#line 5465 "src/parse/lexer.cc"
{
	uint8_t yych;
	static const unsigned char yybm[] = {
		  0, 128, 128, 128, 128, 128, 128, 128, 
		128, 128,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		192, 192, 192, 192, 192, 192, 192, 192, 
		192, 192, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128,   0, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
	};
	if ((lim - cur) < 2) if (!fill(2)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yych <= '\r') {
		if (yych <= '\t') {
			if (yych >= 0x01) goto yy613;
		} else {
			if (yych <= '\n') goto yy615;
			if (yych <= '\f') goto yy613;
			goto yy616;
		}
	} else {
		if (yych <= '"') {
			if (yych <= '!') goto yy613;
			goto yy617;
		} else {
			if (yych <= '0') goto yy613;
			if (yych <= '9') goto yy618;
			goto yy613;
		}
	}
	++cur;
#line 862 "../src/parse/lexer.re"
	{ --cur; return Ret::OK; }
#line 5525 "src/parse/lexer.cc"
yy613:
	++cur;
yy614:
#line 863 "../src/parse/lexer.re"
	{ goto sourceline; }
#line 5531 "src/parse/lexer.cc"
yy615:
	++cur;
#line 861 "../src/parse/lexer.re"
	{ pos = tok = cur; return Ret::OK; }
#line 5536 "src/parse/lexer.cc"
yy616:
	yych = *++cur;
	if (yych == '\n') goto yy615;
	goto yy614;
yy617:
	yych = *(mar = ++cur);
	if (yych <= 0x00) goto yy614;
	if (yych == '\n') goto yy614;
	goto yy620;
yy618:
	++cur;
	if (lim <= cur) if (!fill(1)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yybm[0+yych] & 64) {
		goto yy618;
	}
#line 843 "../src/parse/lexer.re"
	{
        uint32_t l;
        if (!s_to_u32_unsafe(tok, cur, l)) {
            RET_FAIL(error_at_tok("line number overflow"));
        }
        set_line(l);
        goto sourceline;
    }
#line 5562 "src/parse/lexer.cc"
yy619:
	++cur;
	if (lim <= cur) if (!fill(1)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
yy620:
	if (yybm[0+yych] & 128) {
		goto yy619;
	}
	if (yych <= '\n') goto yy621;
	if (yych <= '"') goto yy622;
	goto yy623;
yy621:
	cur = mar;
	goto yy614;
yy622:
	++cur;
#line 852 "../src/parse/lexer.re"
	{
        InputFile &in = get_input();
        std::string &name = in.escaped_name;
        name = escape_backslashes(getstr(tok + 1, cur - 1));
        in.fidx = static_cast<uint32_t>(msg.filenames.size());
        msg.filenames.push_back(name);
        goto sourceline;
    }
#line 5588 "src/parse/lexer.cc"
yy623:
	++cur;
	if (lim <= cur) if (!fill(1)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yych <= 0x00) goto yy621;
	if (yych == '\n') goto yy621;
	goto yy619;
}
#line 864 "../src/parse/lexer.re"

}

#undef YYFILL

} // end namespace re2c
